#include "DATA/Shaders/HLSL/FogOfWar/FogOfWar_PS.hls"
#include "DATA/Shaders/HLSL/ShadowMap/pcf1.hls"
#include "DATA/Shaders/HLSL/MipLevels.hls"

// Texture for dynamic shadows
sampler2D BAKED_SHADOW;
float4 BAKED_SHADOW_SCALE_AND_BIAS;
float3 MESH_CENTER;

#ifdef FEATURE_BAKED_PAINT
float4 BAKED_PAINT_UV_SCALE_BIAS;
#endif


#ifdef LOW_QUALITY_MODE
#undef CLOUD_SHADOWS
#endif

#if defined(CLOUD_SHADOWS) && defined(DISABLE_FOW)
#define CLOUDS_NEED_UV 1
#endif

#if !defined(NO_BAKED_LIGHTING)
#define ENABLE_BAKED_SHADOW
#endif

#if !defined(NO_BAKED_LIGHTING) || defined(FEATURE_BAKED_PAINT)
#define NEED_ATLAS_UVS 1
#endif


float4 Parameter0; // (Diffuse_UV_Tiling = Parameter0.xy,MaxFlowStrength = Parameter0.z,Flow_Speed = Parameter0.w) 
float4 Parameter1; // (Flow_Distance = Parameter1.x,Noise_Strength = Parameter1.y,Rim_Intensity = Parameter1.z,Rim_Power = Parameter1.w) 
float4 Parameter2; // (Rim_Color = Parameter2.xyzw) 
float4 Parameter3; // (Alpha_Strength = Parameter3.x,Emmissive_Intensity = Parameter3.y,Emission_Anim_Frequency = Parameter3.z,Emission_Anim_Amplitude = Parameter3.w) 
float4 Parameter4; // (Specular_Color = Parameter4.xyzw) 
float3 Parameter5; // (Emission_Anim_Offset = Parameter5.x,EMMISSIVE_WorldSpace_GradientBounds_MIN_MAX = Parameter5.yz) 
float4 Parameter6; // (Emissive_Color = Parameter6.xyzw) 
sampler2D FlowMap;
sampler2D Emission_X_Noise_Mask;
sampler2D Diffuse_Texture;



/////////////////////////////////////////////////////////////////////////////////////
// Constants & Structures
/////////////////////////////////////////////////////////////////////////////////////
struct INTERPOLANTS
{
    float4 m_Position      : POSITION;
    // we only need the interpolant if the vertex color is used in the pixel shader
#ifdef FEATURE_VERTEX_COLOR
    float4 m_VertexColor : COLOR0;
#endif
    float4 m_WorldNormalAndHeight : TEXCOORD_INTERP;
#ifdef FEATURE_TANGENT
    float4 m_WorldTangent  : TEXCOORD_INTERP;
#endif
#ifdef NEED_ATLAS_UVS
    float4 m_Texcoord      : TEXCOORD_INTERP; // regular UVs in xy, atlas UVs in ZW
#else
    float2 m_Texcoord      : TEXCOORD_INTERP; // regular UVs in xy
#endif

#ifdef CLOUDS_NEED_UV
    float2 m_Clouds_TC     : TEXCOORD_INTERP;
#endif
#if !defined(LOW_QUALITY_MODE) || defined(FEATURE_WORLD_POSITION)
    float2 m_WorldPositionXZ : TEXCOORD_INTERP;
#endif
#ifndef DISABLE_SHADOWS
    float3 m_ShadowTC      : TEXCOORD_INTERP; //Dynamic shadow map texture coordinates.
#endif
#ifndef DISABLE_FOW
    float3 m_FoW_TC        : TEXCOORD_INTERP; //Fog of War texture coordinates.
#endif
#ifdef FEATURE_SCREENSPACE_UV
    float4 vScreenSpaceUV : TEXCOORD_INTERP;
#endif
    float4 interp_0 : TEXCOORD_INTERP;
};

struct FRAGMENT
{
    float4  m_Color0 : COLOR0;
#ifdef MRT_SUPPORTED
#ifdef IS_DX9
    // Dummy slot for unused "CharacterInking". DX9 doesn't like have gaps in the MRT output
    float4 m_DummyColorOutput: COLOR1;
#endif
    float4 m_BloomColor : COLOR2; // the bloom color is always in slot 2 of the MRT. We don't write to slot 1
#endif
};

/////////////////////////////////////////////////////////////////////////////////////
// Shader
/////////////////////////////////////////////////////////////////////////////////////
FRAGMENT main(INTERPOLANTS interpolants)
{


#if defined(FEATURE_SCREENSPACE_UV)
    float3 screenSpacePerspDivide = interpolants.vScreenSpaceUV.xyz / interpolants.vScreenSpaceUV.w;
    float2 screenSpaceUV = screenSpacePerspDivide.xy;
    float screenSpaceDepth = screenSpacePerspDivide.z;
    screenSpaceUV *= 0.5f;
    screenSpaceUV += 0.5f;
#ifndef IS_OPENGL
    screenSpaceUV.y = 1.0f - screenSpaceUV.y;
#else
    // OpenGL clip space is -1 to 1 on Z but we want Z in in the 0-1 range to be
    // able to sample the depth texture if necessasry
    screenSpaceDepth = (screenSpaceDepth * 0.5f) + 0.5f;
#endif

#endif

#ifdef FEATURE_BAKED_PAINT
    // we set up this variable so node graphs can use the snippet for it
    float2 bakedTerrainPaintUVs = interpolants.m_Texcoord.zw * BAKED_PAINT_UV_SCALE_BIAS.xy;
    bakedTerrainPaintUVs += BAKED_PAINT_UV_SCALE_BIAS.zw;
#endif

    float2 defaultUVs = interpolants.m_Texcoord.xy;

    float3 worldNormalIn = normalize(interpolants.m_WorldNormalAndHeight.xyz);
    float worldHeight = interpolants.m_WorldNormalAndHeight.w;
#if !defined(LOW_QUALITY_MODE) || defined(FEATURE_WORLD_POSITION)
    float3 worldPosition = float3(interpolants.m_WorldPositionXZ.x, worldHeight, interpolants.m_WorldPositionXZ.y);
#endif
#ifdef FEATURE_VERTEX_COLOR
     float4 vColorIn0 = interpolants.m_VertexColor;
#endif

#ifdef FEATURE_TANGENT
    // plugging something into TANGENT_SPACE_NORMAL defines FEATURE_TANGENT
    
    float3 tangentSpaceNormal =  float3(0.0,0.0,1) ;

    float3 worldTangent = normalize(interpolants.m_WorldTangent.xyz);
    float3 worldBinormal = cross(worldNormalIn, worldTangent) * interpolants.m_WorldTangent.w;
    float3x3 tangentBasis = float3x3(worldTangent, worldBinormal, worldNormalIn);

    worldNormalIn = mul(tangentSpaceNormal, tangentBasis);

#endif
    
    float3 worldNormal =  worldNormalIn;



#ifndef LOW_QUALITY_MODE
    float3 viewDirection = normalize(vCamera - worldPosition);
#endif

    float2 var0;
    { // (UVCoord)
    float2 result = defaultUVs;
    var0 = result;
    }
    float2 var1 = Parameter0.xy; // Diffuse_UV_Tiling
    float2 var2 = var0 * var1; // Multiply
    float4 var3 = tex2D(FlowMap, defaultUVs); // FlowMap
    float2 var4 = var3.xy; // Mask
    float2 var5;
    { // (simpleRemapFloat2)
    float2 input = var4;
    float2 result = float2(input.x*2-1, input.y*2-1);
    var5 = result;
    }
    float var6 = Parameter0.z; // MaxFlowStrength
    float2 var7 = var5 * var6; // Multiply
    float4 var8 = TIME; // Time
    float var9 = Parameter0.w; // Flow_Speed
    float var10 = var8.x * var9; // Multiply
    float var11 = Parameter1.x; // Flow_Distance
    float var12 = fmod(var10,var11); // fmod
    float2 var13 = interpolants.interp_0.xy; // EvaluateInVertexShader
    float4 var14 = tex2D(Emission_X_Noise_Mask, var13); // Emission_X_Noise_Mask
    float var15 = Parameter1.y; // Noise_Strength
    float var16 = var14.z * var15; // Multiply
    float var17 = var12 + var16; // Add
    float2 var18 = var7 * var17; // Multiply
    float2 var19 = var2 + var18; // Add
    float4 var20 = tex2D(Diffuse_Texture, var19); // Diffuse_Texture
    float var21 = var8.x * var9; // Multiply
    float var22 = 0.5; // FloatLiteral
    float var23 = var11 * var22; // Multiply
    float var24 = var21 + var23; // Add
    float var25 = fmod(var24,var11); // fmod
    float var26 = var25 + var16; // Add
    float2 var27 = var7 * var26; // Multiply
    float2 var28 = var2 + var27; // Add
    float4 var29 = tex2D(Diffuse_Texture, var28); // Diffuse_Texture
    float var30 = var12 / var11; // Divide
    float var31 = 0.5; // FloatLiteral
    float var32 = var30 - var31; // Subtract
    float var33 = abs(var32); // abs
    float var34 = 2; // FloatLiteral
    float var35 = var33 * var34; // Multiply
    float4 var36 = lerp(var20, var29, var35); // Lerp
    
    #ifdef LOW_QUALITY_MODE
        float4 var37 =  var20;
    #else
        float4 var37 =  var36;
    #endif
    
    float4 var38 = tex2D(Diffuse_Texture, defaultUVs); // Diffuse_Texture
    
    #if USE_FLOW_ALPHA_SCROLL // STATIC_SWITCH: USE_FLOW_ALPHA_SCROLL
        float var39 =  var20.w;
    #else
        float var39 =  var38.w;
    #endif
    
    float4 var40 = float4(var37.xyz,var39); // Combine
    float2 var41 = interpolants.interp_0.zw; // EvaluateInVertexShader
    float2 var42;
    { // (UVCoord)
    float2 result = defaultUVs;
    var42 = result;
    }
    
    #if USE_UV_SCROLL // STATIC_SWITCH: USE_UV_SCROLL
        float2 var43 =  var41;
    #else
        float2 var43 =  var42;
    #endif
    
    float4 var44 = tex2D(Diffuse_Texture, var43); // Diffuse_Texture
    
    #if USE_FLOW // STATIC_SWITCH: USE_FLOW
        float4 var45 =  var40;
    #else
        float4 var45 =  var44;
    #endif
    
    float var46 = Parameter1.z; // Rim_Intensity
    float3 var47;
    { // (EyeVector)
    float3 result = normalize( vCamera - worldPosition );
    var47 = result;
    }
    float3 var48;
    { // (WorldNormal)
    float3 result = worldNormal;
    var48 = result;
    }
    float var49 = dot(var47,var48); // Dot
    float var50;
    { // (OneMinus)
    float input =var49;
    float result = 1.0f - input;
    var50 = result;
    }
    float var51 = var46 * var50; // Multiply
    float var52 = Parameter1.w; // Rim_Power
    float var53 = pow(var51,var52); // Pow
    float4 var54 = Parameter2.xyzw; // Rim_Color
    float4 var55 = var53 * var54; // Multiply
    float4 var56 = var55 + var45; // Add
    
    #ifdef LOW_QUALITY_MODE
        float4 var57 =  var45;
    #else
        float4 var57 =  var56;
    #endif
    
    
    #if USE_RIM_LIGHT // STATIC_SWITCH: USE_RIM_LIGHT
        float4 var58 =  var57;
    #else
        float4 var58 =  var45;
    #endif
    
    float4 var59 = saturate(var58); // saturate
    
    float4 color = var59;    
    
    #if USE_UV_ALPHA_SCROLL // STATIC_SWITCH: USE_UV_ALPHA_SCROLL
        float var60 =  var44.w;
    #else
        float var60 =  var39;
    #endif
    
    float var61 = Parameter3.x; // Alpha_Strength
    float var62 = var60 * var61; // Multiply
    
    color.a = var62;
    float4 baseColor = color;

#ifdef FEATURE_MASKED
#ifdef DISCARD_ALPHA_TEXELS
    if (color.a < 1.0f)
    {
        discard;
    }
#else
    
    float alphaMaskValue =  0.5 ;
    if (color.a < alphaMaskValue)
    {
        discard;
    }
#endif
#endif

    float4 var63 = Parameter4.xyzw; // Specular_Color
    float3 var64 = var63.xyz; // Mask
    
    float3 specularColor = var64;
    
    float gloss = var63.w;
    float specPower = exp2(10 * gloss + 1);

    // Dynamic shadow
#ifndef DISABLE_SHADOWS
    float sunShadowMask = SampleShadowMap(SHADOW_MAP, interpolants.m_ShadowTC);
#ifdef ENABLE_BAKED_SHADOW
    float2 shdowMapUVs = interpolants.m_Texcoord.zw * BAKED_SHADOW_SCALE_AND_BIAS.xy;
    shdowMapUVs += BAKED_SHADOW_SCALE_AND_BIAS.zw;
    float4 bakedShadow = tex2D(BAKED_SHADOW, shdowMapUVs);
#else
    float4 bakedShadow = float4(1,1,1,1);
#endif

    sunShadowMask = min(sunShadowMask, bakedShadow.a);

    // the baked diffuse lighting from all point lights
    float3 pointLightInfo = bakedShadow.rgb;

#else   
#ifdef ENABLE_BAKED_SHADOW
    float2 shdowMapUVs = interpolants.m_Texcoord.zw * BAKED_SHADOW_SCALE_AND_BIAS.xy;
    shdowMapUVs += BAKED_SHADOW_SCALE_AND_BIAS.zw;
    float4 bakedShadow = tex2D(BAKED_SHADOW, shdowMapUVs);
    float sunShadowMask = bakedShadow.a;
    float3 pointLightInfo = bakedShadow.rgb;
#else
    float sunShadowMask = 1.0f;
    float3 pointLightInfo = float3(1,1,1);
#endif

#endif

    float3 diffuseReflection = float3(0,0,0);
    float3 specularReflection = float3(0,0,0);
    float3 sunLightCol = SUN_LIGHT_COLOR;
#ifdef CLOUD_SHADOWS
    #ifdef CLOUDS_NEED_UV
        float2 tc = interpolants.m_Clouds_TC.xy;
    #else
        float2 tc = interpolants.m_FoW_TC.xy;
    #endif

    float cloudStrengthR = tex2D(CLOUDS_TEXTURE, tc * CloudsScaleBias[0].xy + CloudsScaleBias[0].zw).r;
    float cloudStrengthG = tex2D(CLOUDS_TEXTURE, tc * CloudsScaleBias[1].xy + CloudsScaleBias[1].zw).g;
    float cloudStrengthB = tex2D(CLOUDS_TEXTURE, tc * CloudsScaleBias[2].xy + CloudsScaleBias[2].zw).b;
	float cloudStrength = saturate(cloudStrengthR + cloudStrengthG + cloudStrengthB);
	    sunLightCol = lerp(sunLightCol, CloudsSunColor, cloudStrength);
#endif
    float3 sunColor = sunLightCol * sunShadowMask;
    float sunDot = dot(worldNormal, SUN_LIGHT_DIRECTION);
    diffuseReflection += max(sunDot, 0.0f) * sunColor;

    // low quality mode gets no sun spec
#ifndef LOW_QUALITY_MODE
    // half vector
    float3 sunHalfAngle = normalize(SUN_LIGHT_DIRECTION_FOR_SPEC + viewDirection);
    float sunSpecularTerm = pow(abs(dot(worldNormal, sunHalfAngle)), specPower);
    sunSpecularTerm *= step(0.0f, sunDot);

    specularReflection += specularColor * sunColor * sunSpecularTerm;
#endif

    // add the diffuse contribution we baked    
    diffuseReflection += pointLightInfo * LIGHT_MAP_COLOR_SCALE;

    float4 var65 = float4(0,0,0,0); // Float4Literal
    float var66 = Parameter3.y; // Emmissive_Intensity
    float4 var67 = TIME; // Time
    float var68 = Parameter3.z; // Emission_Anim_Frequency
    float var69 = Parameter3.w; // Emission_Anim_Amplitude
    float var70 = Parameter5.x; // Emission_Anim_Offset
    float var71;
    { // (SineFunctionComplete)
    float Time = var67.x;
    float Freq = var68;
    float Amp = var69;
    float Offset = var70;
    float result = sin( Time * Freq ) * Amp + Offset;
    var71 = result;
    }
    float var72 = saturate(var71); // saturate
    float4 var73 = tex2D(Emission_X_Noise_Mask, defaultUVs); // Emission_X_Noise_Mask
    float2 var74;
    { // (UVCoord)
    float2 result = defaultUVs;
    var74 = result;
    }
    
    #if USE_UV_SCROLL // STATIC_SWITCH: USE_UV_SCROLL
        float2 var75 =  var41;
    #else
        float2 var75 =  var74;
    #endif
    
    float4 var76 = tex2D(Diffuse_Texture, var75); // Diffuse_Texture
    
    #if USE_FLOW // STATIC_SWITCH: USE_FLOW
        float4 var77 =  var40;
    #else
        float4 var77 =  var76;
    #endif
    
    float4 var78 = Parameter6.xyzw; // Emissive_Color
    float4 var79 = var77 * var78; // Multiply
    
    #if EMISSIVE_IS_TEXTURE // STATIC_SWITCH: EMISSIVE_IS_TEXTURE
        float4 var80 =  var79;
    #else
        float4 var80 =  var78;
    #endif
    
    float2 var81 = Parameter5.yz; // EMMISSIVE_WorldSpace_GradientBounds_MIN_MAX
    float3 var82;
    { // (WorldPosition)
    float3 result = worldPosition;
    var82 = result;
    }
    float3 var83 = float3(0,1,0); // Float3Literal
    float var84 = dot(var82,var83); // Dot
    float var85 = smoothstep(var81.x, var81.y, var84); // smoothstep
    float4 var86 = var80 * var85; // Multiply
    
    #if EMISSIVE_GRADIENT_MASK // STATIC_SWITCH: EMISSIVE_GRADIENT_MASK
        float4 var87 =  var86;
    #else
        float4 var87 =  var80;
    #endif
    
    float4 var88 = var73.x * var87; // Multiply
    
    #if TOGGLE_EMISSION_TEXTURE_MASK // STATIC_SWITCH: TOGGLE_EMISSION_TEXTURE_MASK
        float4 var89 =  var88;
    #else
        float4 var89 =  var87;
    #endif
    
    float4 var90 = var72 * var89; // Multiply
    
    #if USE_ANIMATED_EMISSION // STATIC_SWITCH: USE_ANIMATED_EMISSION
        float4 var91 =  var90;
    #else
        float4 var91 =  var89;
    #endif
    
    float4 var92 = tex2D(Emission_X_Noise_Mask, var41); // Emission_X_Noise_Mask
    float4 var93 = var91 * var92.z; // Multiply
    
    #if USE_EMISSIVE_SCROLL // STATIC_SWITCH: USE_EMISSIVE_SCROLL
        float4 var94 =  var93;
    #else
        float4 var94 =  var91;
    #endif
    
    float4 var95 = var66 * var94; // Multiply
    float4 var96 = float4(0,0,0,0); // Float4Literal
    
    #if TOGGLE_EMMISSIVE_MASTER // STATIC_SWITCH: TOGGLE_EMMISSIVE_MASTER
        float4 var97 =  var95;
    #else
        float4 var97 =  var96;
    #endif
    
    
    #ifdef LOW_QUALITY_MODE
        float4 var98 =  var65;
    #else
        float4 var98 =  var97;
    #endif
    
    
    float3 emissiveColor = var98.xyz;

#ifdef NO_BAKED_LIGHTING

    // Dynamic shadow, no baked lighting
    // using the shadow color complement
#ifndef DISABLE_SHADOWS
    float3 shadowMask = SampleShadowMap(SHADOW_MAP, interpolants.m_ShadowTC)*SHADOW_COLOR_COMPLEMENT + SHADOW_COLOR; // i.e. lerp(SHADOW_COLOR, white, sampledValue)
    color.rgb *= shadowMask;
#endif

#else // NO_BAKED_LIGHTING
    color.rgb *= diffuseReflection;
    color.rgb += specularReflection;
#endif


#ifdef DISABLE_DEPTH_FOG
    // normally we have the fog modulate the emissive somewhat.
    // But if we turn off fog, we still want the emissive contribution
    color.rgb += emissiveColor;
#else
#ifndef LOW_QUALITY_MODE    
    float fStart = ENV_FOG_START_END_SCALE_EMISSIVE_REMAP.x;
    float fEnd = ENV_FOG_START_END_SCALE_EMISSIVE_REMAP.y;
    float fDist = smoothstep(fEnd, fStart, worldHeight);
    // these constants correct for the fact that the exponentional fog calcs don't actually get completely fogged or unfogged
    float fogFactor = saturate(((1.0f / exp(fDist * 2.0f)) - 0.13533528323) * 1.15651764274);
    float RMfogFactor = saturate(ENV_FOG_START_END_SCALE_EMISSIVE_REMAP.w * fogFactor - 1.0f);
    
    float3 fogColor = lerp(ENV_FOG_COLOR, ENV_FOG_ALT_COLOR, fogFactor);
    color.rgb = lerp(color.rgb, fogColor.rgb, fogFactor);
    color.rgb += emissiveColor * (1 - RMfogFactor);
#else
    float fStart = ENV_FOG_START_END_SCALE_EMISSIVE_REMAP.x;
    float fEnd = ENV_FOG_START_END_SCALE_EMISSIVE_REMAP.y;
    float fDist = smoothstep(fEnd, fStart, worldHeight);
    float RMfogFactor = saturate(fDist*fDist + ENV_FOG_START_END_SCALE_EMISSIVE_REMAP.z);

    float3 fogColor = lerp(ENV_FOG_ALT_COLOR, ENV_FOG_COLOR, fDist);
    color.rgb = lerp( fogColor.rgb,color.rgb, fDist);
    color.rgb += emissiveColor * RMfogFactor;
    //color.rgb += emissiveColor;
#endif   
#endif

    // Fog of war
#ifndef DISABLE_FOW
    #ifdef FOW_FADE_TO_FOGGED
        float4 fowFactors = GetFogOfWarFactorsWithFadeTowardFogged(interpolants.m_FoW_TC.xy, interpolants.m_FoW_TC.z);
    #else
        float4 fowFactors = GetFogOfWarFactorsWithFadeTowardClear(interpolants.m_FoW_TC.xy, interpolants.m_FoW_TC.z);
    #endif

    #ifdef PREMULTIPLIED_ALPHA
        // to deal with cases where we are using premultiplied alpha
        // we need to also multiply the fowFactors by alpha so we don't get
        // strange brightening on the edges
        fowFactors.rgb *= color.a;
    #endif
        // Blend between the computed color of this point on the map and the fog color.
        color.rgb = lerp(fowFactors.rgb, color.rgb, fowFactors.a);
#endif
    color.rgb = ApplyMipColorsVisualization(color.rgb, interpolants.m_Texcoord.xy);



    FRAGMENT fragment;
    fragment.m_Color0 = color;
   

#ifdef MRT_SUPPORTED
    
    float bloomAlphaOverride =  1.0f;

    #if defined(FEATURE_BLOOM) && !defined(LOW_QUALITY_MODE)
        
        float3 bloomColor =  float3(0,0,0) ;
        #ifndef DISABLE_DEPTH_FOG
            bloomColor *=  (1 - RMfogFactor);
        #endif
        fragment.m_BloomColor = float4(bloomColor, bloomAlphaOverride);
    #else
        fragment.m_BloomColor = float4(0,0,0, bloomAlphaOverride);
    #endif
#endif

#ifdef SHOW_LIGHTING
    fragment.m_Color0.rgb = diffuseReflection + specularReflection + emissiveColor;
#endif

#ifdef CAPTURE_DIFFUSE
    fragment.m_Color0 = baseColor;
#endif

#ifdef MRT_SUPPORTED
#ifdef IS_DX9
    fragment.m_DummyColorOutput = float4(0,0,0,0);
#endif
#endif

    

    return fragment;
}
