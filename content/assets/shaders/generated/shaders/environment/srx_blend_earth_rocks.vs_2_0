#include "DATA/Shaders/HLSL/FogOfWar/FogOfWar_VS.hls"
#include "DATA/Shaders/HLSL/DX9HalfPixelAdjust.hls"

#ifdef LOW_QUALITY_MODE
#undef CLOUD_SHADOWS
#endif

#if defined(CLOUD_SHADOWS) && defined(DISABLE_FOW)
#define CLOUDS_NEED_UV 1
#endif

#if !defined(NO_BAKED_LIGHTING) || defined(FEATURE_BAKED_PAINT)
#define NEED_ATLAS_UVS 1
#endif

/////////////////////////////////////////////////////////////////////////////////////
// Constants
/////////////////////////////////////////////////////////////////////////////////////
column_major float4x4 WORLD_MATRIX;
column_major float4x4 WORLD_MATRIX_INV; // used if particular snippets are used and optimized out if not
float3 MESH_CENTER;

struct VERTEX
{
    float3 m_Position       : X3D_VSIN_POSITION;
    float3 m_Normal         : X3D_VSIN_NORMAL;
    float2 m_Texcoord       : X3D_VSIN_TEXCOORD0;
    
    
#ifdef FEATURE_TANGENT
    float4 m_Tangent : X3D_VSIN_TEXCOORD6;
#endif
    // if the vertex color is used in either the vertex shader or pixel shader
    // we need the input
#if defined(FEATURE_VERTEX_COLOR_VS) || defined(FEATURE_VERTEX_COLOR)
    float4 m_Color : X3D_VSIN_COLOR0;
#endif
#if defined(NEED_ATLAS_UVS) || defined(CAPTURE_DIFFUSE)
    float2 m_AtlasTexcoord  : X3D_VSIN_TEXCOORD7;
#endif
};

struct INTERPOLANTS
{
    float4 m_Position      : POSITION;
    // we only need the interpolant if the vertex color is used in the pixel shader
#ifdef FEATURE_VERTEX_COLOR
    float4 m_VertexColor : COLOR0;
#endif
    float4 m_WorldNormalAndHeight : TEXCOORD_INTERP;
#ifdef FEATURE_TANGENT
    float4 m_WorldTangent  : TEXCOORD_INTERP;
#endif
#ifdef NEED_ATLAS_UVS
    float4 m_Texcoord      : TEXCOORD_INTERP; // regular UVs in xy, atlas UVs in ZW
#else
    float2 m_Texcoord      : TEXCOORD_INTERP; // regular UVs in xy
#endif

#ifdef CLOUDS_NEED_UV
    float2 m_Clouds_TC     : TEXCOORD_INTERP;
#endif
#if !defined(LOW_QUALITY_MODE) || defined(FEATURE_WORLD_POSITION)
    float2 m_WorldPositionXZ : TEXCOORD_INTERP;
#endif
#ifndef DISABLE_SHADOWS
    float3 m_ShadowTC      : TEXCOORD_INTERP; //Dynamic shadow map texture coordinates.
#endif
#ifndef DISABLE_FOW
    float3 m_FoW_TC        : TEXCOORD_INTERP; //Fog of War texture coordinates.
#endif
#ifdef FEATURE_SCREENSPACE_UV
    float4 vScreenSpaceUV : TEXCOORD_INTERP;
#endif
    
};

float4 Parameter0; // (Transition_Speed_Factor = Parameter0.xy,Starting_Geo_Offset = Parameter0.zw) 



/////////////////////////////////////////////////////////////////////////////////////
// Shader
/////////////////////////////////////////////////////////////////////////////////////
INTERPOLANTS main(VERTEX vertex)
{

    INTERPOLANTS interpolants;

    float2 defaultUVs = vertex.m_Texcoord;
    float4 localPosition = float4(vertex.m_Position, 1.0f);
    float3 worldNormal = normalize(mul(float4(vertex.m_Normal,0), WORLD_MATRIX).xyz);

#if defined(FEATURE_VERTEX_COLOR_VS) || defined(FEATURE_VERTEX_COLOR)
    float4 vColorIn0 = vertex.m_Color;
#endif


    float3 var0 = float3(0,0,0); // Float3Literal
    float3 var1 = float3(0,12,0); // Float3Literal
    float3 var2 = float3(0,4,0); // Float3Literal
    float var3;
    { // (RandomizeByLocation)
    float3 mLoc = MESH_CENTER;
    float result = sin(mLoc.x + mLoc.y + mLoc.z);
    var3 = result;
    }
    float var4;
    { // (simpleRemap)
    float input = var3;
    float result = ( input + 1 ) * 0.5;
    var4 = result;
    }
    float3 var5 = lerp(var1, var2, var4); // Lerp
    float2 var6 = float2(20,0); // Float2Literal
    float2 var7 = Parameter0.xy; // Transition_Speed_Factor
    float var8;
    { // (FloatRandomize)
    float3 mLoc = MESH_CENTER;
    float factor = sin(mLoc.x + mLoc.y + mLoc.z);
    float t = ( factor + 1 ) * 0.5;
    float x = var7.x;
    float y = var7.y;
    float value = x * y;
    float result = lerp(x, value,  t);
    
    
    var8 = result;
    }
    float2 var9;
    { // (TransitionFactorAndDirection)
    #ifdef ENV_TRANSITION
    float2 result = TransitionFactorAndDirection;
    #else
    float2 result = float2(0.0f, 0.0f);
    #endif
    
    var9 = result;
    }
    float var10 = var9.x; // Mask
    float var11 = var8 * var10; // Multiply
    float var12 = saturate(var11); // saturate
    float var13 = lerp(var6.x, var6.y, var12); // Lerp
    float var14 = saturate(var13); // saturate
    float3 var15 = lerp(var0, var5, var14); // Lerp
    float var16 = 0; // FloatLiteral
    float2 var17 = Parameter0.zw; // Starting_Geo_Offset
    float var18;
    { // (FloatRandomize)
    float3 mLoc = MESH_CENTER;
    float factor = sin(mLoc.x + mLoc.y + mLoc.z);
    float t = ( factor + 1 ) * 0.5;
    float x = var17.x;
    float y = var17.y;
    float value = x * y;
    float result = lerp(x, value,  t);
    
    
    var18 = result;
    }
    float2 var19 = float2(var16,var18); // Combine
    float var20 = 0; // FloatLiteral
    float3 var21 = float3(var19.xy,var20); // Combine
    float3 var22 = float3(0,0,0); // Float3Literal
    float2 var23 = float2(1,1.3); // Float2Literal
    float var24;
    { // (RandomizeByLocation)
    float3 mLoc = MESH_CENTER;
    float result = sin(mLoc.x + mLoc.y + mLoc.z);
    var24 = result;
    }
    float var25;
    { // (simpleRemap)
    float input = var24;
    float result = ( input + 1 ) * 0.5;
    var25 = result;
    }
    float var26 = lerp(var23.x, var23.y, var25); // Lerp
    float var27 = var26 * var12; // Multiply
    float var28 = saturate(var27); // saturate
    float3 var29 = lerp(var21, var22, var28); // Lerp
    float3 var30 = var15 + var29; // Add
    float3 var31 = float3(0,0,0); // Float3Literal
    
    #if ENV_TRANSITION // STATIC_SWITCH: ENV_TRANSITION
        float3 var32 =  var30;
    #else
        float3 var32 =  var31;
    #endif
    
    
    localPosition.xyz += var32;

    float3 worldPosition = mul(localPosition, WORLD_MATRIX).xyz;
    float var33 = -1; // FloatLiteral
    float3 var34 = float3(12,5,15); // Float3Literal
    float3 var35 = var33 * var34; // Multiply
    float4 var36 = TIME; // Time
    float2 var37 = float2(7,12); // Float2Literal
    float2 var38 = float2(0.5,0.5); // Float2Literal
    float var39;
    { // (SimpleNoise)
    float x = var36.x;
    float amp = var38.x;
    float offset = var38.y;
    float noise = cos(2*x+1.7)*cos(3.3*x)*sin(.8*x);
    float result = noise * amp + offset;
    var39 = result;
    }
    float var40 = lerp(var37.x, var37.y, var39); // Lerp
    float var41 = var36.x * var40; // Multiply
    float2 var42 = float2(0.5,0.5); // Float2Literal
    float var43;
    { // (SimpleNoise)
    float x = var41;
    float amp = var42.x;
    float offset = var42.y;
    float noise = cos(2*x+1.7)*cos(3.3*x)*sin(.8*x);
    float result = noise * amp + offset;
    var43 = result;
    }
    float3 var44 = lerp(var35, var34, var43); // Lerp
    float3 var45 = float3(0,0,0); // Float3Literal
    float3 var46 = lerp(var44, var45, var12); // Lerp
    float3 var47 = float3(0,0,0); // Float3Literal
    
    #if ENV_TRANSITION // STATIC_SWITCH: ENV_TRANSITION
        float3 var48 =  var46;
    #else
        float3 var48 =  var47;
    #endif
    
    
    worldPosition.xyz += var48;

    // Output homogeneous position
    interpolants.m_Position = mul(float4(worldPosition, 1.0f), VIEW_PROJECTION_MATRIX);

#ifdef FEATURE_SCREENSPACE_UV
    interpolants.vScreenSpaceUV = interpolants.m_Position.xyzw;
#endif

    interpolants.m_Texcoord.xy = vertex.m_Texcoord;

#if defined(NEED_ATLAS_UVS)
    interpolants.m_Texcoord.zw = vertex.m_AtlasTexcoord;
#endif

    interpolants.m_WorldNormalAndHeight = float4(worldNormal, worldPosition.y);
#if !defined(LOW_QUALITY_MODE) || defined(FEATURE_WORLD_POSITION)
    interpolants.m_WorldPositionXZ = worldPosition.xz;
#endif

#ifdef FEATURE_TANGENT
    float3 worldTangent = normalize(mul(float4(vertex.m_Tangent.xyz,0), WORLD_MATRIX).xyz);
    interpolants.m_WorldTangent = float4(worldTangent, vertex.m_Tangent.w);
#endif

    // Shadow position
#ifndef DISABLE_SHADOWS
    interpolants.m_ShadowTC = mul(float4(worldPosition,1), SHADOW_PROJECTION_MATRIX).xyz;
#endif

#ifndef DISABLE_FOW
        // Fog of war texture coordinates
    #ifdef FOW_FADE_TO_FOGGED
        // the height value we need for fading to fogged is in w, not z
        interpolants.m_FoW_TC = FogOfWarTextureCoordinates( worldPosition ).xyw;
    #else
        interpolants.m_FoW_TC = FogOfWarTextureCoordinates( worldPosition ).xyz;
    #endif
#endif
#ifdef CLOUDS_NEED_UV
     interpolants.m_Clouds_TC = worldPosition.xz * TERRAIN_XFORM.xy + TERRAIN_XFORM.zw;
#endif

#ifdef FEATURE_VERTEX_COLOR
    interpolants.m_VertexColor = vertex.m_Color;
#endif

#ifdef CAPTURE_DIFFUSE
    interpolants.m_Position = float4(vertex.m_AtlasTexcoord * 2.0f - 1.0f, 0.0f, 1.0f);
    DoDX9HalfPixelAdjust(interpolants.m_Position);
#endif

    
    

    return interpolants;
}
