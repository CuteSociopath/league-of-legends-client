#include "DATA/Shaders/HLSL/FogOfWar/FogOfWar_PS.hls"
#include "DATA/Shaders/HLSL/ShadowMap/pcf1.hls"
#include "DATA/Shaders/HLSL/MipLevels.hls"

// Texture for dynamic shadows
sampler2D BAKED_SHADOW;
float4 BAKED_SHADOW_SCALE_AND_BIAS;
float3 MESH_CENTER;

#ifdef FEATURE_BAKED_PAINT
float4 BAKED_PAINT_UV_SCALE_BIAS;
#endif


#ifdef LOW_QUALITY_MODE
#undef CLOUD_SHADOWS
#endif

#if defined(CLOUD_SHADOWS) && defined(DISABLE_FOW)
#define CLOUDS_NEED_UV 1
#endif

#if !defined(NO_BAKED_LIGHTING)
#define ENABLE_BAKED_SHADOW
#endif

#if !defined(NO_BAKED_LIGHTING) || defined(FEATURE_BAKED_PAINT)
#define NEED_ATLAS_UVS 1
#endif


float4 Parameter0; // (RGB_Difffuse_Add = Parameter0.xyzw) 
sampler2D Diffuse_Texture;
sampler2D Decal_Texture;
sampler2D Noise_Texture;



/////////////////////////////////////////////////////////////////////////////////////
// Constants & Structures
/////////////////////////////////////////////////////////////////////////////////////
struct INTERPOLANTS
{
    float4 m_Position      : POSITION;
    // we only need the interpolant if the vertex color is used in the pixel shader
#ifdef FEATURE_VERTEX_COLOR
    float4 m_VertexColor : COLOR0;
#endif
    float4 m_WorldNormalAndHeight : TEXCOORD_INTERP;
#ifdef FEATURE_TANGENT
    float4 m_WorldTangent  : TEXCOORD_INTERP;
#endif
#ifdef NEED_ATLAS_UVS
    float4 m_Texcoord      : TEXCOORD_INTERP; // regular UVs in xy, atlas UVs in ZW
#else
    float2 m_Texcoord      : TEXCOORD_INTERP; // regular UVs in xy
#endif

#ifdef CLOUDS_NEED_UV
    float2 m_Clouds_TC     : TEXCOORD_INTERP;
#endif
#if !defined(LOW_QUALITY_MODE) || defined(FEATURE_WORLD_POSITION)
    float2 m_WorldPositionXZ : TEXCOORD_INTERP;
#endif
#ifndef DISABLE_SHADOWS
    float3 m_ShadowTC      : TEXCOORD_INTERP; //Dynamic shadow map texture coordinates.
#endif
#ifndef DISABLE_FOW
    float3 m_FoW_TC        : TEXCOORD_INTERP; //Fog of War texture coordinates.
#endif
#ifdef FEATURE_SCREENSPACE_UV
    float4 vScreenSpaceUV : TEXCOORD_INTERP;
#endif
    float4 interp_0 : TEXCOORD_INTERP;
float4 interp_1 : TEXCOORD_INTERP;
};

struct FRAGMENT
{
    float4  m_Color0 : COLOR0;
#ifdef MRT_SUPPORTED
#ifdef IS_DX9
    // Dummy slot for unused "CharacterInking". DX9 doesn't like have gaps in the MRT output
    float4 m_DummyColorOutput: COLOR1;
#endif
    float4 m_BloomColor : COLOR2; // the bloom color is always in slot 2 of the MRT. We don't write to slot 1
#endif
};

/////////////////////////////////////////////////////////////////////////////////////
// Shader
/////////////////////////////////////////////////////////////////////////////////////
FRAGMENT main(INTERPOLANTS interpolants)
{


#if defined(FEATURE_SCREENSPACE_UV)
    float3 screenSpacePerspDivide = interpolants.vScreenSpaceUV.xyz / interpolants.vScreenSpaceUV.w;
    float2 screenSpaceUV = screenSpacePerspDivide.xy;
    float screenSpaceDepth = screenSpacePerspDivide.z;
    screenSpaceUV *= 0.5f;
    screenSpaceUV += 0.5f;
#ifndef IS_OPENGL
    screenSpaceUV.y = 1.0f - screenSpaceUV.y;
#else
    // OpenGL clip space is -1 to 1 on Z but we want Z in in the 0-1 range to be
    // able to sample the depth texture if necessasry
    screenSpaceDepth = (screenSpaceDepth * 0.5f) + 0.5f;
#endif

#endif

#ifdef FEATURE_BAKED_PAINT
    // we set up this variable so node graphs can use the snippet for it
    float2 bakedTerrainPaintUVs = interpolants.m_Texcoord.zw * BAKED_PAINT_UV_SCALE_BIAS.xy;
    bakedTerrainPaintUVs += BAKED_PAINT_UV_SCALE_BIAS.zw;
#endif

    float2 defaultUVs = interpolants.m_Texcoord.xy;

    float3 worldNormalIn = normalize(interpolants.m_WorldNormalAndHeight.xyz);
    float worldHeight = interpolants.m_WorldNormalAndHeight.w;
#if !defined(LOW_QUALITY_MODE) || defined(FEATURE_WORLD_POSITION)
    float3 worldPosition = float3(interpolants.m_WorldPositionXZ.x, worldHeight, interpolants.m_WorldPositionXZ.y);
#endif
#ifdef FEATURE_VERTEX_COLOR
     float4 vColorIn0 = interpolants.m_VertexColor;
#endif

#ifdef FEATURE_TANGENT
    // plugging something into TANGENT_SPACE_NORMAL defines FEATURE_TANGENT
    
    float3 tangentSpaceNormal =  float3(0.0,0.0,1) ;

    float3 worldTangent = normalize(interpolants.m_WorldTangent.xyz);
    float3 worldBinormal = cross(worldNormalIn, worldTangent) * interpolants.m_WorldTangent.w;
    float3x3 tangentBasis = float3x3(worldTangent, worldBinormal, worldNormalIn);

    worldNormalIn = mul(tangentSpaceNormal, tangentBasis);

#endif
    
    float3 worldNormal =  worldNormalIn;



#ifndef LOW_QUALITY_MODE
    float3 viewDirection = normalize(vCamera - worldPosition);
#endif

    float4 var0 = tex2D(Diffuse_Texture, defaultUVs); // Diffuse_Texture
    float4 var1 = tex2D(Diffuse_Texture, defaultUVs); // Diffuse_Texture
    float2 var2 = interpolants.interp_0.xy; // EvaluateInVertexShader
    float4 var3 = tex2D(Decal_Texture, var2); // Decal_Texture
    float4 var4 = float4(0.45098,0.670588,0.670588,0.439216); // ColorLiteral
    float4 var5 = var3.z * var4; // Multiply
    float4 var6 = var1 + var5; // Add
    float4 var7 = tex2D(Diffuse_Texture, defaultUVs); // Diffuse_Texture
    float3 var8 = var7.xyz; // Mask
    float4 var9 = Parameter0.xyzw; // RGB_Difffuse_Add
    float4 var10 = var7 + var9; // Add
    float4 var11;
    { // (TerrainBlendMap)
    float2 uvs = worldPosition.xz * TERRAIN_XFORM.xy + TERRAIN_XFORM.zw;
    float4 result = tex2D(TERRAIN_BLEND, uvs);
    
    var11 = result;
    }
    float var12 = var11.w; // Mask
    float var13 = 6.283185482; // 2pi
    float var14 = 6; // FloatLiteral
    float var15 = var13 * var14; // Multiply
    float2 var16;
    { // (simpleRemapFloat2)
    float2 input = var2;
    float2 result = float2(input.x*2-1, input.y*2-1);
    var16 = result;
    }
    float var17 = var16.x; // Mask
    float var18 = var16.y; // Mask
    float var19 = atan2(var17,var18); // atan2
    float var20 = var19 / var13; // Divide
    float var21 = 0.15; // FloatLiteral
    float4 var22 = TIME; // Time
    float var23 = var21 * var22.x; // Multiply
    float var24 = var20 + var23; // Add
    float var25 = var15 * var24; // Multiply
    float var26 = sin(var25); // sin
    float var27;
    { // (simpleRemap)
    float input = var26;
    float result = ( input + 1 ) * 0.5;
    var27 = result;
    }
    float4 var28 = tex2D(Decal_Texture, var2); // Decal_Texture
    float var29 = var27 * var28.z; // Multiply
    float4 var30 = tex2D(Decal_Texture, var2); // Decal_Texture
    float var31 = max(var30.x,var30.y); // max
    float2 var32 = interpolants.interp_0.zw; // EvaluateInVertexShader
    float4 var33 = tex2D(Decal_Texture, var32); // Decal_Texture
    float2 var34 = interpolants.interp_1.xy; // EvaluateInVertexShader
    float4 var35 = tex2D(Decal_Texture, var34); // Decal_Texture
    float var36 = max(var33.x,var35.y); // max
    float2 var37 = float2(0.25,1.5); // Float2Literal
    float var38 = 40; // FloatLiteral
    float2 var39;
    { // (simpleRemapFloat2)
    float2 input = var2;
    float2 result = float2(input.x*2-1, input.y*2-1);
    var39 = result;
    }
    float var40 = length(var39); // length
    float var41 = 0.15; // FloatLiteral
    float4 var42 = TIME; // Time
    float var43 = var41 * var42.x; // Multiply
    float var44 = var40 + var43; // Add
    float var45 = var38 * var44; // Multiply
    float var46 = sin(var45); // sin
    float var47;
    { // (simpleRemap)
    float input = var46;
    float result = ( input + 1 ) * 0.5;
    var47 = result;
    }
    float var48 = lerp(var37.x, var37.y, var47); // Lerp
    float var49 = var36 * var48; // Multiply
    float var50 = var31 + var49; // Add
    float var51 = var29 + var50; // Add
    float var52 = var12 * var51; // Multiply
    float4 var53 = lerp(float4(var8, 1.0f), var10, var52); // Lerp
    
    #ifdef LOW_QUALITY_MODE
        float4 var54 =  var6;
    #else
        float4 var54 =  var53;
    #endif
    
    float2 var55;
    { // (TransitionFactorAndDirection)
    #ifdef ENV_TRANSITION
    float2 result = TransitionFactorAndDirection;
    #else
    float2 result = float2(0.0f, 0.0f);
    #endif
    
    var55 = result;
    }
    float var56 = var55.x; // Mask
    float4 var57 = lerp(var0, var54, var56); // Lerp
    float4 var58 = float4(0.85098,0.952941,1,1); // ColorLiteral
    float4 var59;
    { // (TerrainBlendMap)
    float2 uvs = worldPosition.xz * TERRAIN_XFORM.xy + TERRAIN_XFORM.zw;
    float4 result = tex2D(TERRAIN_BLEND, uvs);
    
    var59 = result;
    }
    float var60 = var59.x; // Mask
    float2 var61 = float2(0,1); // Float2Literal
    float var62 = 2; // FloatLiteral
    float2 var63 = float2(-400,150); // Float2Literal
    float3 var64;
    { // (WorldPosition)
    float3 result = worldPosition;
    var64 = result;
    }
    float3 var65 = float3(7500,0,7500); // Float3Literal
    float3 var66 = var64 - var65; // Subtract
    float var67 = length(var66); // length
    float var68 = smoothstep(var63.x, var67, var63.y); // smoothstep
    float var69 = var62 * var68; // Multiply
    float var70 = saturate(var69); // saturate
    float var71;
    { // (OneMinus)
    float input =var70;
    float result = 1.0f - input;
    var71 = result;
    }
    float var72 = 0.75; // FloatLiteral
    float2 var73 = float2(0.45,0.6); // Float2Literal
    float var74 = 0; // FloatLiteral
    float2 var75 = float2(5,25); // Float2Literal
    float2 var76;
    { // (TransitionFactorAndDirection)
    #ifdef ENV_TRANSITION
    float2 result = TransitionFactorAndDirection;
    #else
    float2 result = float2(0.0f, 0.0f);
    #endif
    
    var76 = result;
    }
    float var77 = var76.x; // Mask
    float var78 = lerp(var75.x, var75.y, var77); // Lerp
    float3 var79;
    { // (WorldPosition)
    float3 result = worldPosition;
    var79 = result;
    }
    float var80 = var79.x; // Mask
    float var81 = var79.z; // Mask
    float var82 = var80 + var81; // Add
    float var83 = 0.01; // FloatLiteral
    float var84 = var82 * var83; // Multiply
    float var85 = sin(var84); // sin
    float var86 = var78 * var85; // Multiply
    
    #ifdef LOW_QUALITY_MODE
        float var87 =  var74;
    #else
        float var87 =  var86;
    #endif
    
    float3 var88;
    { // (WorldPosition)
    float3 result = worldPosition;
    var88 = result;
    }
    float3 var89 = float3(7666,0,3936); // Float3Literal
    float3 var90 = var88 - var89; // Subtract
    float var91 = length(var90); // length
    float var92 = var87 + var91; // Add
    float var93 = 8500; // FloatLiteral
    float2 var94;
    { // (TransitionFactorAndDirection)
    #ifdef ENV_TRANSITION
    float2 result = TransitionFactorAndDirection;
    #else
    float2 result = float2(0.0f, 0.0f);
    #endif
    
    var94 = result;
    }
    float var95 = var94.x; // Mask
    float var96 = var93 * var95; // Multiply
    float var97 = step(var92,var96); // step
    float var98;
    { // (OneMinus)
    float input =var97;
    float result = 1.0f - input;
    var98 = result;
    }
    float var99 = -800; // FloatLiteral
    float var100 = var99 + var96; // Add
    float var101 = -400; // FloatLiteral
    float var102 = var92 + var101; // Add
    float var103 = smoothstep(var100, var96, var102); // smoothstep
    float var104 = var103 * var97; // Multiply
    float var105 = var98 + var104; // Add
    float var106;
    { // (OneMinus)
    float input =var105;
    float result = 1.0f - input;
    var106 = result;
    }
    float3 var107 = float3(3886,0,8009); // Float3Literal
    float3 var108 = var88 - var107; // Subtract
    float var109 = length(var108); // length
    float var110 = var109 + var87; // Add
    float var111 = step(var110,var96); // step
    float var112;
    { // (OneMinus)
    float input =var111;
    float result = 1.0f - input;
    var112 = result;
    }
    float var113 = var110 + var101; // Add
    float var114 = smoothstep(var100, var96, var113); // smoothstep
    float var115 = var111 * var114; // Multiply
    float var116 = var112 + var115; // Add
    float var117;
    { // (OneMinus)
    float input =var116;
    float result = 1.0f - input;
    var117 = result;
    }
    float var118 = max(var106,var117); // max
    float3 var119 = float3(7020,0,10820); // Float3Literal
    float3 var120 = var88 - var119; // Subtract
    float var121 = length(var120); // length
    float var122 = var121 + var87; // Add
    float var123 = step(var122,var96); // step
    float var124;
    { // (OneMinus)
    float input =var123;
    float result = 1.0f - input;
    var124 = result;
    }
    float var125 = var122 + var101; // Add
    float var126 = smoothstep(var100, var96, var125); // smoothstep
    float var127 = var126 * var123; // Multiply
    float var128 = var124 + var127; // Add
    float var129;
    { // (OneMinus)
    float input =var128;
    float result = 1.0f - input;
    var129 = result;
    }
    float var130 = max(var118,var129); // max
    float3 var131;
    { // (WorldPosition)
    float3 result = worldPosition;
    var131 = result;
    }
    float3 var132 = float3(10967,0,6956); // Float3Literal
    float3 var133 = var131 - var132; // Subtract
    float var134 = length(var133); // length
    float var135 = var134 + var87; // Add
    float var136 = step(var135,var96); // step
    float var137;
    { // (OneMinus)
    float input =var136;
    float result = 1.0f - input;
    var137 = result;
    }
    float var138 = var135 + var101; // Add
    float var139 = smoothstep(var100, var96, var138); // smoothstep
    float var140 = var139 * var136; // Multiply
    float var141 = var137 + var140; // Add
    float var142;
    { // (OneMinus)
    float input =var141;
    float result = 1.0f - input;
    var142 = result;
    }
    float var143 = max(var130,var142); // max
    float3 var144 = float3(9827,-82,4401); // Float3Literal
    float3 var145 = var131 - var144; // Subtract
    float var146 = length(var145); // length
    float var147 = var146 + var87; // Add
    float var148 = step(var147,var96); // step
    float var149;
    { // (OneMinus)
    float input =var148;
    float result = 1.0f - input;
    var149 = result;
    }
    float var150 = var147 + var101; // Add
    float var151 = smoothstep(var100, var96, var150); // smoothstep
    float var152 = var151 * var148; // Multiply
    float var153 = var149 + var152; // Add
    float var154;
    { // (OneMinus)
    float input =var153;
    float result = 1.0f - input;
    var154 = result;
    }
    float var155 = max(var143,var154); // max
    float var156 = smoothstep(var73.x, var73.y, var155); // smoothstep
    float var157;
    { // (OneMinus)
    float input =var156;
    float result = 1.0f - input;
    var157 = result;
    }
    float var158 = var72 * var157; // Multiply
    float2 var159 = float2(0.45,1); // Float2Literal
    float var160 = smoothstep(var159.x, var159.y, var155); // smoothstep
    float var161;
    { // (OneMinus)
    float input =var160;
    float result = 1.0f - input;
    var161 = result;
    }
    float var162 = var161 * var160; // Multiply
    float2 var163 = float2(0,2); // Float2Literal
    float2 var164 = interpolants.interp_1.zw; // EvaluateInVertexShader
    float4 var165 = tex2D(Noise_Texture, var164); // Noise_Texture
    float var166 = 0.001; // FloatLiteral
    float3 var167;
    { // (WorldPosition)
    float3 result = worldPosition;
    var167 = result;
    }
    float2 var168 = var167.xz; // Mask
    float2 var169 = var166 * var168; // Multiply
    float2 var170 = float2(2,2); // Float2Literal
    float2 var171 = var169 * var170; // Multiply
    float4 var172 = tex2D(Noise_Texture, var171); // Noise_Texture
    float var173 = var165.y * var172.z; // Multiply
    float var174 = var173 * var165.x; // Multiply
    float var175 = 2; // FloatLiteral
    float var176 = var174 * var175; // Multiply
    float var177 = saturate(var176); // saturate
    float var178 = lerp(var163.x, var163.y, var177); // Lerp
    float var179 = var162 * var178; // Multiply
    float var180 = 7; // FloatLiteral
    float var181 = var56 * var180; // Multiply
    float var182 = saturate(var181); // saturate
    float var183 = lerp(var158, var179, var182); // Lerp
    float var184 = var71 * var183; // Multiply
    
    #if MASK_FX_IN_MAP_CENTER // STATIC_SWITCH: MASK_FX_IN_MAP_CENTER
        float var185 =  var184;
    #else
        float var185 =  var183;
    #endif
    
    float var186 = saturate(var185); // saturate
    float var187 = smoothstep(var61.x, var61.y, var186); // smoothstep
    float var188 = var60 * var187; // Multiply
    float var189 = 3; // FloatLiteral
    float var190 = var56 * var189; // Multiply
    float var191 = saturate(var190); // saturate
    float var192;
    { // (OneMinus)
    float input =var191;
    float result = 1.0f - input;
    var192 = result;
    }
    float var193 = var188 * var192; // Multiply
    float4 var194 = lerp(var57, var58, var193); // Lerp
    float var195 = 1; // FloatLiteral
    float4 var196 = float4(var194.xyz,var195); // Combine
    
    #ifdef LOW_QUALITY_MODE
        float4 var197 =  var57;
    #else
        float4 var197 =  var196;
    #endif
    
    float4 var198 = tex2D(Diffuse_Texture, defaultUVs); // Diffuse_Texture
    float var199 = 15000; // FloatLiteral
    float var200 = var199 * var95; // Multiply
    float var201 = step(var147,var200); // step
    float var202 = max(var97,var111); // max
    float var203 = max(var202,var123); // max
    float var204 = max(var203,var136); // max
    float var205 = max(var204,var148); // max
    
    #ifdef LOW_QUALITY_MODE
        float var206 =  var201;
    #else
        float var206 =  var205;
    #endif
    
    float4 var207;
    { // (TerrainTransition_Step)
    float4 diffuseColorBlendingIn = var197;
    float4 diffuseColorBlendingOut = var198;
    
    
    float distanceToSpot = var206;
    
    
    float4 diffuseColor = diffuseColorBlendingIn;
    
    #if ENV_TRANSITION
    // if transitioning in, then if we're outside the circle, discard
    if (TransitionFactorAndDirection.y == 0)
    {
        if( distanceToSpot == 0)
        {
            discard;
        }
    }
    else
    {
        // if we're transitioning out, if we're inside the circle, discard
        if( distanceToSpot == 1)
        {
            discard;
        }
        // use the blending out color
        diffuseColor = diffuseColorBlendingOut;
    }
    #endif
    
    float4 result = diffuseColor;
    
    var207 = result;
    }
    
    #if ENV_TRANSITION // STATIC_SWITCH: ENV_TRANSITION
        float4 var208 =  var207;
    #else
        float4 var208 =  var54;
    #endif
    
    
    float4 color = var208;    
    
    color.a =  color.a ;
    float4 baseColor = color;

#ifdef FEATURE_MASKED
#ifdef DISCARD_ALPHA_TEXELS
    if (color.a < 1.0f)
    {
        discard;
    }
#else
    float var209 = 0.3; // FloatLiteral
    
    float alphaMaskValue = var209;
    if (color.a < alphaMaskValue)
    {
        discard;
    }
#endif
#endif

    
    float3 specularColor =  float3(0,0,0) ;
    
    float gloss =  0.0 ;
    float specPower = exp2(10 * gloss + 1);

    // Dynamic shadow
#ifndef DISABLE_SHADOWS
    float sunShadowMask = SampleShadowMap(SHADOW_MAP, interpolants.m_ShadowTC);
#ifdef ENABLE_BAKED_SHADOW
    float2 shdowMapUVs = interpolants.m_Texcoord.zw * BAKED_SHADOW_SCALE_AND_BIAS.xy;
    shdowMapUVs += BAKED_SHADOW_SCALE_AND_BIAS.zw;
    float4 bakedShadow = tex2D(BAKED_SHADOW, shdowMapUVs);
#else
    float4 bakedShadow = float4(1,1,1,1);
#endif

    sunShadowMask = min(sunShadowMask, bakedShadow.a);

    // the baked diffuse lighting from all point lights
    float3 pointLightInfo = bakedShadow.rgb;

#else   
#ifdef ENABLE_BAKED_SHADOW
    float2 shdowMapUVs = interpolants.m_Texcoord.zw * BAKED_SHADOW_SCALE_AND_BIAS.xy;
    shdowMapUVs += BAKED_SHADOW_SCALE_AND_BIAS.zw;
    float4 bakedShadow = tex2D(BAKED_SHADOW, shdowMapUVs);
    float sunShadowMask = bakedShadow.a;
    float3 pointLightInfo = bakedShadow.rgb;
#else
    float sunShadowMask = 1.0f;
    float3 pointLightInfo = float3(1,1,1);
#endif

#endif

    float3 diffuseReflection = float3(0,0,0);
    float3 specularReflection = float3(0,0,0);
    float3 sunLightCol = SUN_LIGHT_COLOR;
#ifdef CLOUD_SHADOWS
    #ifdef CLOUDS_NEED_UV
        float2 tc = interpolants.m_Clouds_TC.xy;
    #else
        float2 tc = interpolants.m_FoW_TC.xy;
    #endif

    float cloudStrengthR = tex2D(CLOUDS_TEXTURE, tc * CloudsScaleBias[0].xy + CloudsScaleBias[0].zw).r;
    float cloudStrengthG = tex2D(CLOUDS_TEXTURE, tc * CloudsScaleBias[1].xy + CloudsScaleBias[1].zw).g;
    float cloudStrengthB = tex2D(CLOUDS_TEXTURE, tc * CloudsScaleBias[2].xy + CloudsScaleBias[2].zw).b;
	float cloudStrength = saturate(cloudStrengthR + cloudStrengthG + cloudStrengthB);
	    sunLightCol = lerp(sunLightCol, CloudsSunColor, cloudStrength);
#endif
    float3 sunColor = sunLightCol * sunShadowMask;
    float sunDot = dot(worldNormal, SUN_LIGHT_DIRECTION);
    diffuseReflection += max(sunDot, 0.0f) * sunColor;

    // low quality mode gets no sun spec
#ifndef LOW_QUALITY_MODE
    // half vector
    float3 sunHalfAngle = normalize(SUN_LIGHT_DIRECTION_FOR_SPEC + viewDirection);
    float sunSpecularTerm = pow(abs(dot(worldNormal, sunHalfAngle)), specPower);
    sunSpecularTerm *= step(0.0f, sunDot);

    specularReflection += specularColor * sunColor * sunSpecularTerm;
#endif

    // add the diffuse contribution we baked    
    diffuseReflection += pointLightInfo * LIGHT_MAP_COLOR_SCALE;

    
    float3 emissiveColor =  float3(0,0,0) ;

#ifdef NO_BAKED_LIGHTING

    // Dynamic shadow, no baked lighting
    // using the shadow color complement
#ifndef DISABLE_SHADOWS
    float3 shadowMask = SampleShadowMap(SHADOW_MAP, interpolants.m_ShadowTC)*SHADOW_COLOR_COMPLEMENT + SHADOW_COLOR; // i.e. lerp(SHADOW_COLOR, white, sampledValue)
    color.rgb *= shadowMask;
#endif

#else // NO_BAKED_LIGHTING
    color.rgb *= diffuseReflection;
    color.rgb += specularReflection;
#endif


#ifdef DISABLE_DEPTH_FOG
    // normally we have the fog modulate the emissive somewhat.
    // But if we turn off fog, we still want the emissive contribution
    color.rgb += emissiveColor;
#else
#ifndef LOW_QUALITY_MODE    
    float fStart = ENV_FOG_START_END_SCALE_EMISSIVE_REMAP.x;
    float fEnd = ENV_FOG_START_END_SCALE_EMISSIVE_REMAP.y;
    float fDist = smoothstep(fEnd, fStart, worldHeight);
    // these constants correct for the fact that the exponentional fog calcs don't actually get completely fogged or unfogged
    float fogFactor = saturate(((1.0f / exp(fDist * 2.0f)) - 0.13533528323) * 1.15651764274);
    float RMfogFactor = saturate(ENV_FOG_START_END_SCALE_EMISSIVE_REMAP.w * fogFactor - 1.0f);
    
    float3 fogColor = lerp(ENV_FOG_COLOR, ENV_FOG_ALT_COLOR, fogFactor);
    color.rgb = lerp(color.rgb, fogColor.rgb, fogFactor);
    color.rgb += emissiveColor * (1 - RMfogFactor);
#else
    float fStart = ENV_FOG_START_END_SCALE_EMISSIVE_REMAP.x;
    float fEnd = ENV_FOG_START_END_SCALE_EMISSIVE_REMAP.y;
    float fDist = smoothstep(fEnd, fStart, worldHeight);
    float RMfogFactor = saturate(fDist*fDist + ENV_FOG_START_END_SCALE_EMISSIVE_REMAP.z);

    float3 fogColor = lerp(ENV_FOG_ALT_COLOR, ENV_FOG_COLOR, fDist);
    color.rgb = lerp( fogColor.rgb,color.rgb, fDist);
    color.rgb += emissiveColor * RMfogFactor;
    //color.rgb += emissiveColor;
#endif   
#endif

    // Fog of war
#ifndef DISABLE_FOW
    #ifdef FOW_FADE_TO_FOGGED
        float4 fowFactors = GetFogOfWarFactorsWithFadeTowardFogged(interpolants.m_FoW_TC.xy, interpolants.m_FoW_TC.z);
    #else
        float4 fowFactors = GetFogOfWarFactorsWithFadeTowardClear(interpolants.m_FoW_TC.xy, interpolants.m_FoW_TC.z);
    #endif

    #ifdef PREMULTIPLIED_ALPHA
        // to deal with cases where we are using premultiplied alpha
        // we need to also multiply the fowFactors by alpha so we don't get
        // strange brightening on the edges
        fowFactors.rgb *= color.a;
    #endif
        // Blend between the computed color of this point on the map and the fog color.
        color.rgb = lerp(fowFactors.rgb, color.rgb, fowFactors.a);
#endif
    color.rgb = ApplyMipColorsVisualization(color.rgb, interpolants.m_Texcoord.xy);



    FRAGMENT fragment;
    fragment.m_Color0 = color;
   

#ifdef MRT_SUPPORTED
    
    float bloomAlphaOverride =  1.0f;

    #if defined(FEATURE_BLOOM) && !defined(LOW_QUALITY_MODE)
        
        float3 bloomColor =  float3(0,0,0) ;
        #ifndef DISABLE_DEPTH_FOG
            bloomColor *=  (1 - RMfogFactor);
        #endif
        fragment.m_BloomColor = float4(bloomColor, bloomAlphaOverride);
    #else
        fragment.m_BloomColor = float4(0,0,0, bloomAlphaOverride);
    #endif
#endif

#ifdef SHOW_LIGHTING
    fragment.m_Color0.rgb = diffuseReflection + specularReflection + emissiveColor;
#endif

#ifdef CAPTURE_DIFFUSE
    fragment.m_Color0 = baseColor;
#endif

#ifdef MRT_SUPPORTED
#ifdef IS_DX9
    fragment.m_DummyColorOutput = float4(0,0,0,0);
#endif
#endif

    

    return fragment;
}
