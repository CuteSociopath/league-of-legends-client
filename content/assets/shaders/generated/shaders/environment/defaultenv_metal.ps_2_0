#include "DATA/Shaders/HLSL/FogOfWar/FogOfWar_PS.hls"
#include "DATA/Shaders/HLSL/ShadowMap/pcf1.hls"
#include "DATA/Shaders/HLSL/MipLevels.hls"

// Texture for dynamic shadows
sampler2D BAKED_SHADOW;
float4 BAKED_SHADOW_SCALE_AND_BIAS;
float3 MESH_CENTER;

#ifdef FEATURE_BAKED_PAINT
float4 BAKED_PAINT_UV_SCALE_BIAS;
#endif


#ifdef LOW_QUALITY_MODE
#undef CLOUD_SHADOWS
#endif

#if defined(CLOUD_SHADOWS) && defined(DISABLE_FOW)
#define CLOUDS_NEED_UV 1
#endif

#if !defined(NO_BAKED_LIGHTING)
#define ENABLE_BAKED_SHADOW
#endif

#if !defined(NO_BAKED_LIGHTING) || defined(FEATURE_BAKED_PAINT)
#define NEED_ATLAS_UVS 1
#endif


float4 Parameter0; // (Environment_Reflection = Parameter0.x,Spec_Global = Parameter0.y,Spec_Minimum = Parameter0.z,Spec_Maximum = Parameter0.w) 
float4 Parameter1; // (Specular Color = Parameter1.xyzw) 
float4 Parameter2; // (Secondary_Blend = Parameter2.x,Occlusion Power = Parameter2.y,ENV_BlurAmount = Parameter2.z,Reflectivity = Parameter2.w) 
float4 Parameter3; // (Occlusion Color = Parameter3.xyzw) 
float4 Parameter4; // (Tint = Parameter4.xyzw) 
float4 Parameter5; // (Energy_Conservation = Parameter5.xyzw) 
float4 Parameter6; // (ENV_TotalMips = Parameter6.x,Roughness = Parameter6.y,Film_Depth = Parameter6.z,Specular_Power = Parameter6.w) 
float4 Parameter7; // (Highlight_Direction = Parameter7.xyz,Anodization = Parameter7.w) 
float Parameter8; // (Opacity = Parameter8.x) 
sampler2D Diffuse_Texture;
sampler2D Mask_Texture;
sampler2D Secondary_Texture;
sampler2D Gradient_Texture;



/////////////////////////////////////////////////////////////////////////////////////
// Constants & Structures
/////////////////////////////////////////////////////////////////////////////////////
struct INTERPOLANTS
{
    float4 m_Position      : POSITION;
    // we only need the interpolant if the vertex color is used in the pixel shader
#ifdef FEATURE_VERTEX_COLOR
    float4 m_VertexColor : COLOR0;
#endif
    float4 m_WorldNormalAndHeight : TEXCOORD_INTERP;
#ifdef FEATURE_TANGENT
    float4 m_WorldTangent  : TEXCOORD_INTERP;
#endif
#ifdef NEED_ATLAS_UVS
    float4 m_Texcoord      : TEXCOORD_INTERP; // regular UVs in xy, atlas UVs in ZW
#else
    float2 m_Texcoord      : TEXCOORD_INTERP; // regular UVs in xy
#endif

#ifdef CLOUDS_NEED_UV
    float2 m_Clouds_TC     : TEXCOORD_INTERP;
#endif
#if !defined(LOW_QUALITY_MODE) || defined(FEATURE_WORLD_POSITION)
    float2 m_WorldPositionXZ : TEXCOORD_INTERP;
#endif
#ifndef DISABLE_SHADOWS
    float3 m_ShadowTC      : TEXCOORD_INTERP; //Dynamic shadow map texture coordinates.
#endif
#ifndef DISABLE_FOW
    float3 m_FoW_TC        : TEXCOORD_INTERP; //Fog of War texture coordinates.
#endif
#ifdef FEATURE_SCREENSPACE_UV
    float4 vScreenSpaceUV : TEXCOORD_INTERP;
#endif
    
};

struct FRAGMENT
{
    float4  m_Color0 : COLOR0;
#ifdef MRT_SUPPORTED
#ifdef IS_DX9
    // Dummy slot for unused "CharacterInking". DX9 doesn't like have gaps in the MRT output
    float4 m_DummyColorOutput: COLOR1;
#endif
    float4 m_BloomColor : COLOR2; // the bloom color is always in slot 2 of the MRT. We don't write to slot 1
#endif
};

/////////////////////////////////////////////////////////////////////////////////////
// Shader
/////////////////////////////////////////////////////////////////////////////////////
FRAGMENT main(INTERPOLANTS interpolants)
{


#if defined(FEATURE_SCREENSPACE_UV)
    float3 screenSpacePerspDivide = interpolants.vScreenSpaceUV.xyz / interpolants.vScreenSpaceUV.w;
    float2 screenSpaceUV = screenSpacePerspDivide.xy;
    float screenSpaceDepth = screenSpacePerspDivide.z;
    screenSpaceUV *= 0.5f;
    screenSpaceUV += 0.5f;
#ifndef IS_OPENGL
    screenSpaceUV.y = 1.0f - screenSpaceUV.y;
#else
    // OpenGL clip space is -1 to 1 on Z but we want Z in in the 0-1 range to be
    // able to sample the depth texture if necessasry
    screenSpaceDepth = (screenSpaceDepth * 0.5f) + 0.5f;
#endif

#endif

#ifdef FEATURE_BAKED_PAINT
    // we set up this variable so node graphs can use the snippet for it
    float2 bakedTerrainPaintUVs = interpolants.m_Texcoord.zw * BAKED_PAINT_UV_SCALE_BIAS.xy;
    bakedTerrainPaintUVs += BAKED_PAINT_UV_SCALE_BIAS.zw;
#endif

    float2 defaultUVs = interpolants.m_Texcoord.xy;

    float3 worldNormalIn = normalize(interpolants.m_WorldNormalAndHeight.xyz);
    float worldHeight = interpolants.m_WorldNormalAndHeight.w;
#if !defined(LOW_QUALITY_MODE) || defined(FEATURE_WORLD_POSITION)
    float3 worldPosition = float3(interpolants.m_WorldPositionXZ.x, worldHeight, interpolants.m_WorldPositionXZ.y);
#endif
#ifdef FEATURE_VERTEX_COLOR
     float4 vColorIn0 = interpolants.m_VertexColor;
#endif

#ifdef FEATURE_TANGENT
    // plugging something into TANGENT_SPACE_NORMAL defines FEATURE_TANGENT
    
    float3 tangentSpaceNormal =  float3(0.0,0.0,1) ;

    float3 worldTangent = normalize(interpolants.m_WorldTangent.xyz);
    float3 worldBinormal = cross(worldNormalIn, worldTangent) * interpolants.m_WorldTangent.w;
    float3x3 tangentBasis = float3x3(worldTangent, worldBinormal, worldNormalIn);

    worldNormalIn = mul(tangentSpaceNormal, tangentBasis);

#endif
    
    float3 worldNormal =  worldNormalIn;



#ifndef LOW_QUALITY_MODE
    float3 viewDirection = normalize(vCamera - worldPosition);
#endif

    float4 var0 = tex2D(Diffuse_Texture, defaultUVs); // Diffuse_Texture
    float3 var1;
    { // (EnvMap)
    float3 eyeRay = normalize( worldPosition.xyz - vCamera.xyz );
    float3 rVector = reflect(eyeRay, worldNormal);
    float3 lookup = texCUBE(ENV_CUBE, rVector).rgb;
    float3 result = lookup;
    var1 = result;
    }
    float var2 = Parameter0.x; // Environment_Reflection
    float4 var3 = float4(var1.xyz,var2); // Combine
    float4 var4 = Parameter1.xyzw; // Specular Color
    float var5 = Parameter0.y; // Spec_Global
    float var6 = 0; // FloatLiteral
    float4 var7 = tex2D(Mask_Texture, defaultUVs); // Mask_Texture
    float var8;
    { // (OneMinus)
    float input =var7.y;
    float result = 1.0f - input;
    var8 = result;
    }
    float var9 = lerp(var5, var6, var8); // Lerp
    float3 var10;
    { // (EyeVector)
    float3 result = normalize( vCamera - worldPosition );
    var10 = result;
    }
    float3 var11;
    { // (WorldNormal)
    float3 result = worldNormal;
    var11 = result;
    }
    float var12 = dot(var10,var11); // Dot
    float var13 = Parameter0.z; // Spec_Minimum
    float var14 = Parameter0.w; // Spec_Maximum
    float var15 = lerp(var13, var14, var7.y); // Lerp
    float var16 = pow(var12,var15); // Pow
    float var17 = var9 * var16; // Multiply
    float4 var18 = var4 * var17; // Multiply
    float4 var19 = tex2D(Diffuse_Texture, defaultUVs); // Diffuse_Texture
    float var20;
    { // (OneMinus)
    float input =var7.x;
    float result = 1.0f - input;
    var20 = result;
    }
    float4 var21 = tex2D(Secondary_Texture, defaultUVs); // Secondary_Texture
    float4 var22 = var20 * var21; // Multiply
    float var23 = Parameter2.x; // Secondary_Blend
    float var24 = var7.w * var23; // Multiply
    float4 var25 = lerp(var19, var22, var24); // Lerp
    float4 var26 = Parameter3.xyzw; // Occlusion Color
    float var27 = Parameter2.y; // Occlusion Power
    float var28 = var27 * var7.z; // Multiply
    float4 var29 = float4(var28,var28,var28,var28); // Splat
    float4 var30 = lerp(var25, var26, var29); // Lerp
    float4 var31 = var18 + var30; // Add
    float4 var32 = lerp(var3, var31, var2); // Lerp
    float4 var33 = tex2D(Diffuse_Texture, defaultUVs); // Diffuse_Texture
    float3 var34;
    { // (PixelLuminance)
    float3 input = var33.xyz;
    float3 lumTable = float3( 0.3, 0.59, 0.11 );
    float Lum = dot( input, lumTable );
    float3 result = float3(Lum,Lum,Lum);
    var34 = result;
    }
    float4 var35 = Parameter4.xyzw; // Tint
    float3 var36;
    { // (Overlay)
    float3 base = var34;
    float3 blend = var35.xyz;
    float3 result = (base < 0.5 ? (2.0 * base * blend) : (1.0 - 2.0 * (1.0 - base) * (1.0 - blend)));
    var36 = result;
    }
    float4 var37 = tex2D(Diffuse_Texture, defaultUVs); // Diffuse_Texture
    float3 var38;
    { // (WorldNormal)
    float3 result = worldNormal;
    var38 = result;
    }
    float3 var39;
    { // (EyeVector)
    float3 result = normalize( vCamera - worldPosition );
    var39 = result;
    }
    float var40 = dot(var38,var39); // Dot
    float var41 = saturate(var40); // saturate
    float3 var42 = float3(var41,var41,var41); // Splat
    float var43 = Parameter2.z; // ENV_BlurAmount
    float3 var44;
    { // (EnvMapBias)
    float bias = var43;
    float3 eyeRay = normalize( worldPosition.xyz - vCamera.xyz );
    float3 rVector = reflect(eyeRay, worldNormal);
    float4 rVectorBias = float4( rVector.x, rVector.y, rVector.z, bias );
    float4 lookup = texCUBEbias(ENV_CUBE, rVectorBias);
    float3 result = lookup.rgb;
    var44 = result;
    }
    float3 var45 = var42 + var44; // Add
    float4 var46 = Parameter5.xyzw; // Energy_Conservation
    float4 var47 = tex2D(Diffuse_Texture, defaultUVs); // Diffuse_Texture
    float var48 = Parameter2.w; // Reflectivity
    float var49;
    { // (OneMinus)
    float input =var48;
    float result = 1.0f - input;
    var49 = result;
    }
    float4 var50 = float4(var49,var49,var49,var49); // Splat
    float4 var51 = lerp(var46, var47, var50); // Lerp
    float3 var52 = var51.xyz; // Mask
    float3 var53 = var45 * var52; // Multiply
    float var54 = Parameter6.x; // ENV_TotalMips
    float var55 = Parameter6.y; // Roughness
    float var56 = var54 * var55; // Multiply
    float3 var57;
    { // (EnvMapBias)
    float bias = var56;
    float3 eyeRay = normalize( worldPosition.xyz - vCamera.xyz );
    float3 rVector = reflect(eyeRay, worldNormal);
    float4 rVectorBias = float4( rVector.x, rVector.y, rVector.z, bias );
    float4 lookup = texCUBEbias(ENV_CUBE, rVectorBias);
    float3 result = lookup.rgb;
    var57 = result;
    }
    float3 var58 = var48 * var57; // Multiply
    float3 var59 = var53 + var58; // Add
    float var60 = 1; // FloatLiteral
    float3 var61;
    { // (WorldNormal)
    float3 result = worldNormal;
    var61 = result;
    }
    float3 var62;
    { // (EyeVector)
    float3 result = normalize( vCamera - worldPosition );
    var62 = result;
    }
    float var63 = dot(var61,var62); // Dot
    float var64 = var60 / var63; // Divide
    float var65 = Parameter6.z; // Film_Depth
    float var66 = var64 * var65; // Multiply
    float var67 = 0.5; // FloatLiteral
    float2 var68 = float2(var66,var67); // Combine
    float4 var69 = tex2D(Gradient_Texture, var68); // Gradient_Texture
    float3 var70 = Parameter7.xyz; // Highlight_Direction
    float3 var71 = var62 + var70; // Add
    float3 var72 = var67 * var71; // Multiply
    
    #if LOCK_HIGHLIGHT // STATIC_SWITCH: LOCK_HIGHLIGHT
        float3 var73 =  var72;
    #else
        float3 var73 =  var62;
    #endif
    
    float3 var74;
    { // (WorldNormal)
    float3 result = worldNormal;
    var74 = result;
    }
    float var75 = dot(var73,var74); // Dot
    float var76 = saturate(var75); // saturate
    float var77 = Parameter6.w; // Specular_Power
    float var78 = pow(var76,var77); // Pow
    float4 var79 = var69 * var78; // Multiply
    float3 var80 = var79.xyz; // Mask
    float3 var81 = var59 + var80; // Add
    float var82 = 1; // FloatLiteral
    float4 var83 = float4(var81.xyz,var82); // Combine
    
    #ifdef LOW_QUALITY_MODE
        float4 var84 =  var37;
    #else
        float4 var84 =  var83;
    #endif
    
    float var85 = Parameter7.w; // Anodization
    float4 var86 = lerp(float4(var36, 1.0f), var84, var85); // Lerp
    float4 var87 = tex2D(Mask_Texture, defaultUVs); // Mask_Texture
    float var88 = var87.x; // Mask
    float4 var89 = lerp(var32, var86, var88); // Lerp
    float4 var90 = Parameter3.xyzw; // Occlusion Color
    float var91 = Parameter8; // Opacity
    float4 var92 = lerp(var89, var90, var91); // Lerp
    
    #ifdef LOW_QUALITY_MODE
        float4 var93 =  var0;
    #else
        float4 var93 =  var92;
    #endif
    
    
    float4 color = var93;    
    
    color.a =  color.a ;
    float4 baseColor = color;

#ifdef FEATURE_MASKED
#ifdef DISCARD_ALPHA_TEXELS
    if (color.a < 1.0f)
    {
        discard;
    }
#else
    
    float alphaMaskValue =  0.5 ;
    if (color.a < alphaMaskValue)
    {
        discard;
    }
#endif
#endif

    
    float3 specularColor =  float3(0,0,0) ;
    
    float gloss =  0.0 ;
    float specPower = exp2(10 * gloss + 1);

    // Dynamic shadow
#ifndef DISABLE_SHADOWS
    float sunShadowMask = SampleShadowMap(SHADOW_MAP, interpolants.m_ShadowTC);
#ifdef ENABLE_BAKED_SHADOW
    float2 shdowMapUVs = interpolants.m_Texcoord.zw * BAKED_SHADOW_SCALE_AND_BIAS.xy;
    shdowMapUVs += BAKED_SHADOW_SCALE_AND_BIAS.zw;
    float4 bakedShadow = tex2D(BAKED_SHADOW, shdowMapUVs);
#else
    float4 bakedShadow = float4(1,1,1,1);
#endif

    sunShadowMask = min(sunShadowMask, bakedShadow.a);

    // the baked diffuse lighting from all point lights
    float3 pointLightInfo = bakedShadow.rgb;

#else   
#ifdef ENABLE_BAKED_SHADOW
    float2 shdowMapUVs = interpolants.m_Texcoord.zw * BAKED_SHADOW_SCALE_AND_BIAS.xy;
    shdowMapUVs += BAKED_SHADOW_SCALE_AND_BIAS.zw;
    float4 bakedShadow = tex2D(BAKED_SHADOW, shdowMapUVs);
    float sunShadowMask = bakedShadow.a;
    float3 pointLightInfo = bakedShadow.rgb;
#else
    float sunShadowMask = 1.0f;
    float3 pointLightInfo = float3(1,1,1);
#endif

#endif

    float3 diffuseReflection = float3(0,0,0);
    float3 specularReflection = float3(0,0,0);
    float3 sunLightCol = SUN_LIGHT_COLOR;
#ifdef CLOUD_SHADOWS
    #ifdef CLOUDS_NEED_UV
        float2 tc = interpolants.m_Clouds_TC.xy;
    #else
        float2 tc = interpolants.m_FoW_TC.xy;
    #endif

    float cloudStrengthR = tex2D(CLOUDS_TEXTURE, tc * CloudsScaleBias[0].xy + CloudsScaleBias[0].zw).r;
    float cloudStrengthG = tex2D(CLOUDS_TEXTURE, tc * CloudsScaleBias[1].xy + CloudsScaleBias[1].zw).g;
    float cloudStrengthB = tex2D(CLOUDS_TEXTURE, tc * CloudsScaleBias[2].xy + CloudsScaleBias[2].zw).b;
	float cloudStrength = saturate(cloudStrengthR + cloudStrengthG + cloudStrengthB);
	    sunLightCol = lerp(sunLightCol, CloudsSunColor, cloudStrength);
#endif
    float3 sunColor = sunLightCol * sunShadowMask;
    float sunDot = dot(worldNormal, SUN_LIGHT_DIRECTION);
    diffuseReflection += max(sunDot, 0.0f) * sunColor;

    // low quality mode gets no sun spec
#ifndef LOW_QUALITY_MODE
    // half vector
    float3 sunHalfAngle = normalize(SUN_LIGHT_DIRECTION_FOR_SPEC + viewDirection);
    float sunSpecularTerm = pow(abs(dot(worldNormal, sunHalfAngle)), specPower);
    sunSpecularTerm *= step(0.0f, sunDot);

    specularReflection += specularColor * sunColor * sunSpecularTerm;
#endif

    // add the diffuse contribution we baked    
    diffuseReflection += pointLightInfo * LIGHT_MAP_COLOR_SCALE;

    
    float3 emissiveColor =  float3(0,0,0) ;

#ifdef NO_BAKED_LIGHTING

    // Dynamic shadow, no baked lighting
    // using the shadow color complement
#ifndef DISABLE_SHADOWS
    float3 shadowMask = SampleShadowMap(SHADOW_MAP, interpolants.m_ShadowTC)*SHADOW_COLOR_COMPLEMENT + SHADOW_COLOR; // i.e. lerp(SHADOW_COLOR, white, sampledValue)
    color.rgb *= shadowMask;
#endif

#else // NO_BAKED_LIGHTING
    color.rgb *= diffuseReflection;
    color.rgb += specularReflection;
#endif


#ifdef DISABLE_DEPTH_FOG
    // normally we have the fog modulate the emissive somewhat.
    // But if we turn off fog, we still want the emissive contribution
    color.rgb += emissiveColor;
#else
#ifndef LOW_QUALITY_MODE    
    float fStart = ENV_FOG_START_END_SCALE_EMISSIVE_REMAP.x;
    float fEnd = ENV_FOG_START_END_SCALE_EMISSIVE_REMAP.y;
    float fDist = smoothstep(fEnd, fStart, worldHeight);
    // these constants correct for the fact that the exponentional fog calcs don't actually get completely fogged or unfogged
    float fogFactor = saturate(((1.0f / exp(fDist * 2.0f)) - 0.13533528323) * 1.15651764274);
    float RMfogFactor = saturate(ENV_FOG_START_END_SCALE_EMISSIVE_REMAP.w * fogFactor - 1.0f);
    
    float3 fogColor = lerp(ENV_FOG_COLOR, ENV_FOG_ALT_COLOR, fogFactor);
    color.rgb = lerp(color.rgb, fogColor.rgb, fogFactor);
    color.rgb += emissiveColor * (1 - RMfogFactor);
#else
    float fStart = ENV_FOG_START_END_SCALE_EMISSIVE_REMAP.x;
    float fEnd = ENV_FOG_START_END_SCALE_EMISSIVE_REMAP.y;
    float fDist = smoothstep(fEnd, fStart, worldHeight);
    float RMfogFactor = saturate(fDist*fDist + ENV_FOG_START_END_SCALE_EMISSIVE_REMAP.z);

    float3 fogColor = lerp(ENV_FOG_ALT_COLOR, ENV_FOG_COLOR, fDist);
    color.rgb = lerp( fogColor.rgb,color.rgb, fDist);
    color.rgb += emissiveColor * RMfogFactor;
    //color.rgb += emissiveColor;
#endif   
#endif

    // Fog of war
#ifndef DISABLE_FOW
    #ifdef FOW_FADE_TO_FOGGED
        float4 fowFactors = GetFogOfWarFactorsWithFadeTowardFogged(interpolants.m_FoW_TC.xy, interpolants.m_FoW_TC.z);
    #else
        float4 fowFactors = GetFogOfWarFactorsWithFadeTowardClear(interpolants.m_FoW_TC.xy, interpolants.m_FoW_TC.z);
    #endif

    #ifdef PREMULTIPLIED_ALPHA
        // to deal with cases where we are using premultiplied alpha
        // we need to also multiply the fowFactors by alpha so we don't get
        // strange brightening on the edges
        fowFactors.rgb *= color.a;
    #endif
        // Blend between the computed color of this point on the map and the fog color.
        color.rgb = lerp(fowFactors.rgb, color.rgb, fowFactors.a);
#endif
    color.rgb = ApplyMipColorsVisualization(color.rgb, interpolants.m_Texcoord.xy);



    FRAGMENT fragment;
    fragment.m_Color0 = color;
   

#ifdef MRT_SUPPORTED
    
    float bloomAlphaOverride =  1.0f;

    #if defined(FEATURE_BLOOM) && !defined(LOW_QUALITY_MODE)
        
        float3 bloomColor =  float3(0,0,0) ;
        #ifndef DISABLE_DEPTH_FOG
            bloomColor *=  (1 - RMfogFactor);
        #endif
        fragment.m_BloomColor = float4(bloomColor, bloomAlphaOverride);
    #else
        fragment.m_BloomColor = float4(0,0,0, bloomAlphaOverride);
    #endif
#endif

#ifdef SHOW_LIGHTING
    fragment.m_Color0.rgb = diffuseReflection + specularReflection + emissiveColor;
#endif

#ifdef CAPTURE_DIFFUSE
    fragment.m_Color0 = baseColor;
#endif

#ifdef MRT_SUPPORTED
#ifdef IS_DX9
    fragment.m_DummyColorOutput = float4(0,0,0,0);
#endif
#endif

    

    return fragment;
}
