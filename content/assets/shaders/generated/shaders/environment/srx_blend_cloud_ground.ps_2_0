#include "DATA/Shaders/HLSL/FogOfWar/FogOfWar_PS.hls"
#include "DATA/Shaders/HLSL/ShadowMap/pcf1.hls"
#include "DATA/Shaders/HLSL/MipLevels.hls"

// Texture for dynamic shadows
sampler2D BAKED_SHADOW;
float4 BAKED_SHADOW_SCALE_AND_BIAS;
float3 MESH_CENTER;

#ifdef FEATURE_BAKED_PAINT
float4 BAKED_PAINT_UV_SCALE_BIAS;
#endif


#ifdef LOW_QUALITY_MODE
#undef CLOUD_SHADOWS
#endif

#if defined(CLOUD_SHADOWS) && defined(DISABLE_FOW)
#define CLOUDS_NEED_UV 1
#endif

#if !defined(NO_BAKED_LIGHTING)
#define ENABLE_BAKED_SHADOW
#endif

#if !defined(NO_BAKED_LIGHTING) || defined(FEATURE_BAKED_PAINT)
#define NEED_ATLAS_UVS 1
#endif


sampler2D Diffuse_Texture;
sampler2D Decal_Texture;
sampler2D Noise_Texture;



/////////////////////////////////////////////////////////////////////////////////////
// Constants & Structures
/////////////////////////////////////////////////////////////////////////////////////
struct INTERPOLANTS
{
    float4 m_Position      : POSITION;
    // we only need the interpolant if the vertex color is used in the pixel shader
#ifdef FEATURE_VERTEX_COLOR
    float4 m_VertexColor : COLOR0;
#endif
    float4 m_WorldNormalAndHeight : TEXCOORD_INTERP;
#ifdef FEATURE_TANGENT
    float4 m_WorldTangent  : TEXCOORD_INTERP;
#endif
#ifdef NEED_ATLAS_UVS
    float4 m_Texcoord      : TEXCOORD_INTERP; // regular UVs in xy, atlas UVs in ZW
#else
    float2 m_Texcoord      : TEXCOORD_INTERP; // regular UVs in xy
#endif

#ifdef CLOUDS_NEED_UV
    float2 m_Clouds_TC     : TEXCOORD_INTERP;
#endif
#if !defined(LOW_QUALITY_MODE) || defined(FEATURE_WORLD_POSITION)
    float2 m_WorldPositionXZ : TEXCOORD_INTERP;
#endif
#ifndef DISABLE_SHADOWS
    float3 m_ShadowTC      : TEXCOORD_INTERP; //Dynamic shadow map texture coordinates.
#endif
#ifndef DISABLE_FOW
    float3 m_FoW_TC        : TEXCOORD_INTERP; //Fog of War texture coordinates.
#endif
#ifdef FEATURE_SCREENSPACE_UV
    float4 vScreenSpaceUV : TEXCOORD_INTERP;
#endif
    float4 interp_0 : TEXCOORD_INTERP;
};

struct FRAGMENT
{
    float4  m_Color0 : COLOR0;
#ifdef MRT_SUPPORTED
#ifdef IS_DX9
    // Dummy slot for unused "CharacterInking". DX9 doesn't like have gaps in the MRT output
    float4 m_DummyColorOutput: COLOR1;
#endif
    float4 m_BloomColor : COLOR2; // the bloom color is always in slot 2 of the MRT. We don't write to slot 1
#endif
};

/////////////////////////////////////////////////////////////////////////////////////
// Shader
/////////////////////////////////////////////////////////////////////////////////////
FRAGMENT main(INTERPOLANTS interpolants)
{


#if defined(FEATURE_SCREENSPACE_UV)
    float3 screenSpacePerspDivide = interpolants.vScreenSpaceUV.xyz / interpolants.vScreenSpaceUV.w;
    float2 screenSpaceUV = screenSpacePerspDivide.xy;
    float screenSpaceDepth = screenSpacePerspDivide.z;
    screenSpaceUV *= 0.5f;
    screenSpaceUV += 0.5f;
#ifndef IS_OPENGL
    screenSpaceUV.y = 1.0f - screenSpaceUV.y;
#else
    // OpenGL clip space is -1 to 1 on Z but we want Z in in the 0-1 range to be
    // able to sample the depth texture if necessasry
    screenSpaceDepth = (screenSpaceDepth * 0.5f) + 0.5f;
#endif

#endif

#ifdef FEATURE_BAKED_PAINT
    // we set up this variable so node graphs can use the snippet for it
    float2 bakedTerrainPaintUVs = interpolants.m_Texcoord.zw * BAKED_PAINT_UV_SCALE_BIAS.xy;
    bakedTerrainPaintUVs += BAKED_PAINT_UV_SCALE_BIAS.zw;
#endif

    float2 defaultUVs = interpolants.m_Texcoord.xy;

    float3 worldNormalIn = normalize(interpolants.m_WorldNormalAndHeight.xyz);
    float worldHeight = interpolants.m_WorldNormalAndHeight.w;
#if !defined(LOW_QUALITY_MODE) || defined(FEATURE_WORLD_POSITION)
    float3 worldPosition = float3(interpolants.m_WorldPositionXZ.x, worldHeight, interpolants.m_WorldPositionXZ.y);
#endif
#ifdef FEATURE_VERTEX_COLOR
     float4 vColorIn0 = interpolants.m_VertexColor;
#endif

#ifdef FEATURE_TANGENT
    // plugging something into TANGENT_SPACE_NORMAL defines FEATURE_TANGENT
    
    float3 tangentSpaceNormal =  float3(0.0,0.0,1) ;

    float3 worldTangent = normalize(interpolants.m_WorldTangent.xyz);
    float3 worldBinormal = cross(worldNormalIn, worldTangent) * interpolants.m_WorldTangent.w;
    float3x3 tangentBasis = float3x3(worldTangent, worldBinormal, worldNormalIn);

    worldNormalIn = mul(tangentSpaceNormal, tangentBasis);

#endif
    
    float3 worldNormal =  worldNormalIn;



#ifndef LOW_QUALITY_MODE
    float3 viewDirection = normalize(vCamera - worldPosition);
#endif

    float4 var0 = tex2D(Diffuse_Texture, defaultUVs); // Diffuse_Texture
    float4 var1 = tex2D(Diffuse_Texture, defaultUVs); // Diffuse_Texture
    float4 var2 = float4(0.670588,0.72549,0.741176,1); // ColorLiteral
    float var3 = 0.7; // FloatLiteral
    float4 var4 = tex2D(Decal_Texture, defaultUVs); // Decal_Texture
    float var5 = var3 * var4.y; // Multiply
    float4 var6 = var2 * var5; // Multiply
    float4 var7 = var1 + var6; // Add
    float var8 = 0.5; // FloatLiteral
    float var9 = 1.25; // FloatLiteral
    float2 var10 = float2(0,0.1); // Float2Literal
    float2 var11;
    { // (UVCoord)
    float2 result = defaultUVs;
    var11 = result;
    }
    float2 var12 = float2(325,525); // Float2Literal
    float var13 = 0.001; // FloatLiteral
    float2 var14 = var12 * var13; // Multiply
    float var15 = distance(var11,var14); // Distance
    float var16 = smoothstep(var10.x, var10.y, var15); // smoothstep
    float var17;
    { // (OneMinus)
    float input =var16;
    float result = 1.0f - input;
    var17 = result;
    }
    float var18 = -0.1; // FloatLiteral
    float4 var19 = TIME; // Time
    float var20 = var18 * var19.x; // Multiply
    float var21 = var20 + var15; // Add
    float var22 = 40; // FloatLiteral
    float var23 = var21 * var22; // Multiply
    float var24 = sin(var23); // sin
    float var25;
    { // (simpleRemap)
    float input = var24;
    float result = ( input + 1 ) * 0.5;
    var25 = result;
    }
    float var26 = max(var17,var25); // max
    float var27 = lerp(var8, var9, var26); // Lerp
    float var28 = 1.5; // FloatLiteral
    float var29 = var17 * var28; // Multiply
    float2 var30 = float2(0.17,-0.03); // Float2Literal
    float2 var31 = var11 + var30; // Add
    float2 var32;
    { // (simpleRemapFloat2)
    float2 input = var31;
    float2 result = float2(input.x*2-1, input.y*2-1);
    var32 = result;
    }
    float var33 = var32.x; // Mask
    float var34 = var32.y; // Mask
    float var35 = atan2(var33,var34); // atan2
    float var36 = 6.283185482; // 2pi
    float var37 = var35 / var36; // Divide
    float var38 = var37 + var20; // Add
    float var39 = 3; // FloatLiteral
    float var40 = var36 * var39; // Multiply
    float var41 = var38 * var40; // Multiply
    float var42 = sin(var41); // sin
    float var43;
    { // (simpleRemap)
    float input = var42;
    float result = ( input + 1 ) * 0.5;
    var43 = result;
    }
    float var44 = max(var29,var43); // max
    float var45 = var27 * var44; // Multiply
    float4 var46 = tex2D(Decal_Texture, defaultUVs); // Decal_Texture
    float var47 = var45 * var46.y; // Multiply
    float4 var48 = var47 * var2; // Multiply
    float4 var49 = var1 + var48; // Add
    
    #ifdef LOW_QUALITY_MODE
        float4 var50 =  var7;
    #else
        float4 var50 =  var49;
    #endif
    
    float2 var51;
    { // (TransitionFactorAndDirection)
    #ifdef ENV_TRANSITION
    float2 result = TransitionFactorAndDirection;
    #else
    float2 result = float2(0.0f, 0.0f);
    #endif
    
    var51 = result;
    }
    float var52 = var51.x; // Mask
    float4 var53 = lerp(var0, var50, var52); // Lerp
    
    #if DISABLE_CLOUD_FX // STATIC_SWITCH: DISABLE_CLOUD_FX
        float4 var54 =  var0;
    #else
        float4 var54 =  var53;
    #endif
    
    float4 var55 = float4(0.85098,0.952941,1,1); // ColorLiteral
    float4 var56;
    { // (TerrainBlendMap)
    float2 uvs = worldPosition.xz * TERRAIN_XFORM.xy + TERRAIN_XFORM.zw;
    float4 result = tex2D(TERRAIN_BLEND, uvs);
    
    var56 = result;
    }
    float var57 = var56.x; // Mask
    float2 var58 = float2(0,1); // Float2Literal
    float var59 = 2; // FloatLiteral
    float2 var60 = float2(-400,150); // Float2Literal
    float3 var61;
    { // (WorldPosition)
    float3 result = worldPosition;
    var61 = result;
    }
    float3 var62 = float3(7500,0,7500); // Float3Literal
    float3 var63 = var61 - var62; // Subtract
    float var64 = length(var63); // length
    float var65 = smoothstep(var60.x, var64, var60.y); // smoothstep
    float var66 = var59 * var65; // Multiply
    float var67 = saturate(var66); // saturate
    float var68;
    { // (OneMinus)
    float input =var67;
    float result = 1.0f - input;
    var68 = result;
    }
    float2 var69 = float2(0.45,0.6); // Float2Literal
    float var70 = 0; // FloatLiteral
    float2 var71 = float2(5,25); // Float2Literal
    float2 var72;
    { // (TransitionFactorAndDirection)
    #ifdef ENV_TRANSITION
    float2 result = TransitionFactorAndDirection;
    #else
    float2 result = float2(0.0f, 0.0f);
    #endif
    
    var72 = result;
    }
    float var73 = var72.x; // Mask
    float var74 = lerp(var71.x, var71.y, var73); // Lerp
    float3 var75;
    { // (WorldPosition)
    float3 result = worldPosition;
    var75 = result;
    }
    float var76 = var75.x; // Mask
    float var77 = var75.z; // Mask
    float var78 = var76 + var77; // Add
    float var79 = 0.01; // FloatLiteral
    float var80 = var78 * var79; // Multiply
    float var81 = sin(var80); // sin
    float var82 = var74 * var81; // Multiply
    
    #ifdef LOW_QUALITY_MODE
        float var83 =  var70;
    #else
        float var83 =  var82;
    #endif
    
    float3 var84;
    { // (WorldPosition)
    float3 result = worldPosition;
    var84 = result;
    }
    float3 var85 = float3(7666,0,3936); // Float3Literal
    float3 var86 = var84 - var85; // Subtract
    float var87 = length(var86); // length
    float var88 = var83 + var87; // Add
    float var89 = 8500; // FloatLiteral
    float2 var90;
    { // (TransitionFactorAndDirection)
    #ifdef ENV_TRANSITION
    float2 result = TransitionFactorAndDirection;
    #else
    float2 result = float2(0.0f, 0.0f);
    #endif
    
    var90 = result;
    }
    float var91 = var90.x; // Mask
    float var92 = var89 * var91; // Multiply
    float var93 = step(var88,var92); // step
    float var94;
    { // (OneMinus)
    float input =var93;
    float result = 1.0f - input;
    var94 = result;
    }
    float var95 = -800; // FloatLiteral
    float var96 = var95 + var92; // Add
    float var97 = -400; // FloatLiteral
    float var98 = var88 + var97; // Add
    float var99 = smoothstep(var96, var92, var98); // smoothstep
    float var100 = var99 * var93; // Multiply
    float var101 = var94 + var100; // Add
    float var102;
    { // (OneMinus)
    float input =var101;
    float result = 1.0f - input;
    var102 = result;
    }
    float3 var103 = float3(3886,0,8009); // Float3Literal
    float3 var104 = var84 - var103; // Subtract
    float var105 = length(var104); // length
    float var106 = var105 + var83; // Add
    float var107 = step(var106,var92); // step
    float var108;
    { // (OneMinus)
    float input =var107;
    float result = 1.0f - input;
    var108 = result;
    }
    float var109 = var106 + var97; // Add
    float var110 = smoothstep(var96, var92, var109); // smoothstep
    float var111 = var107 * var110; // Multiply
    float var112 = var108 + var111; // Add
    float var113;
    { // (OneMinus)
    float input =var112;
    float result = 1.0f - input;
    var113 = result;
    }
    float var114 = max(var102,var113); // max
    float3 var115 = float3(7020,0,10820); // Float3Literal
    float3 var116 = var84 - var115; // Subtract
    float var117 = length(var116); // length
    float var118 = var117 + var83; // Add
    float var119 = step(var118,var92); // step
    float var120;
    { // (OneMinus)
    float input =var119;
    float result = 1.0f - input;
    var120 = result;
    }
    float var121 = var118 + var97; // Add
    float var122 = smoothstep(var96, var92, var121); // smoothstep
    float var123 = var122 * var119; // Multiply
    float var124 = var120 + var123; // Add
    float var125;
    { // (OneMinus)
    float input =var124;
    float result = 1.0f - input;
    var125 = result;
    }
    float var126 = max(var114,var125); // max
    float3 var127;
    { // (WorldPosition)
    float3 result = worldPosition;
    var127 = result;
    }
    float3 var128 = float3(10967,0,6956); // Float3Literal
    float3 var129 = var127 - var128; // Subtract
    float var130 = length(var129); // length
    float var131 = var130 + var83; // Add
    float var132 = step(var131,var92); // step
    float var133;
    { // (OneMinus)
    float input =var132;
    float result = 1.0f - input;
    var133 = result;
    }
    float var134 = var131 + var97; // Add
    float var135 = smoothstep(var96, var92, var134); // smoothstep
    float var136 = var135 * var132; // Multiply
    float var137 = var133 + var136; // Add
    float var138;
    { // (OneMinus)
    float input =var137;
    float result = 1.0f - input;
    var138 = result;
    }
    float var139 = max(var126,var138); // max
    float3 var140 = float3(9827,-82,4401); // Float3Literal
    float3 var141 = var127 - var140; // Subtract
    float var142 = length(var141); // length
    float var143 = var142 + var83; // Add
    float var144 = step(var143,var92); // step
    float var145;
    { // (OneMinus)
    float input =var144;
    float result = 1.0f - input;
    var145 = result;
    }
    float var146 = var143 + var97; // Add
    float var147 = smoothstep(var96, var92, var146); // smoothstep
    float var148 = var147 * var144; // Multiply
    float var149 = var145 + var148; // Add
    float var150;
    { // (OneMinus)
    float input =var149;
    float result = 1.0f - input;
    var150 = result;
    }
    float var151 = max(var139,var150); // max
    float var152 = smoothstep(var69.x, var69.y, var151); // smoothstep
    float var153;
    { // (OneMinus)
    float input =var152;
    float result = 1.0f - input;
    var153 = result;
    }
    float var154 = 0.75; // FloatLiteral
    float var155 = var153 * var154; // Multiply
    float2 var156 = float2(0,2); // Float2Literal
    float2 var157 = interpolants.interp_0.xy; // EvaluateInVertexShader
    float4 var158 = tex2D(Noise_Texture, var157); // Noise_Texture
    float2 var159 = interpolants.interp_0.zw; // EvaluateInVertexShader
    float4 var160 = tex2D(Noise_Texture, var159); // Noise_Texture
    float var161 = var158.y * var160.z; // Multiply
    float var162 = var161 * var158.x; // Multiply
    float var163 = 2; // FloatLiteral
    float var164 = var162 * var163; // Multiply
    float var165 = saturate(var164); // saturate
    float var166 = lerp(var156.x, var156.y, var165); // Lerp
    float2 var167 = float2(0.45,1); // Float2Literal
    float var168 = smoothstep(var167.x, var167.y, var151); // smoothstep
    float var169;
    { // (OneMinus)
    float input =var168;
    float result = 1.0f - input;
    var169 = result;
    }
    float var170 = var169 * var168; // Multiply
    float var171 = var166 * var170; // Multiply
    float2 var172;
    { // (TransitionFactorAndDirection)
    #ifdef ENV_TRANSITION
    float2 result = TransitionFactorAndDirection;
    #else
    float2 result = float2(0.0f, 0.0f);
    #endif
    
    var172 = result;
    }
    float var173 = var172.x; // Mask
    float var174 = 7; // FloatLiteral
    float var175 = var173 * var174; // Multiply
    float var176 = saturate(var175); // saturate
    float var177 = lerp(var155, var171, var176); // Lerp
    float var178 = var68 * var177; // Multiply
    
    #if MASK_FX_IN_MAP_CENTER // STATIC_SWITCH: MASK_FX_IN_MAP_CENTER
        float var179 =  var178;
    #else
        float var179 =  var177;
    #endif
    
    float var180 = saturate(var179); // saturate
    float var181 = smoothstep(var58.x, var58.y, var180); // smoothstep
    float var182 = var57 * var181; // Multiply
    float var183 = 3; // FloatLiteral
    float var184 = var173 * var183; // Multiply
    float var185 = saturate(var184); // saturate
    float var186;
    { // (OneMinus)
    float input =var185;
    float result = 1.0f - input;
    var186 = result;
    }
    float var187 = var182 * var186; // Multiply
    float4 var188 = lerp(var54, var55, var187); // Lerp
    float var189 = 1; // FloatLiteral
    float4 var190 = float4(var188.xyz,var189); // Combine
    
    #ifdef LOW_QUALITY_MODE
        float4 var191 =  var54;
    #else
        float4 var191 =  var190;
    #endif
    
    float4 var192 = tex2D(Diffuse_Texture, defaultUVs); // Diffuse_Texture
    float var193 = 15000; // FloatLiteral
    float var194 = var193 * var91; // Multiply
    float var195 = step(var143,var194); // step
    float var196 = max(var93,var107); // max
    float var197 = max(var196,var119); // max
    float var198 = max(var197,var132); // max
    float var199 = max(var198,var144); // max
    
    #ifdef LOW_QUALITY_MODE
        float var200 =  var195;
    #else
        float var200 =  var199;
    #endif
    
    float4 var201;
    { // (TerrainTransition_Step)
    float4 diffuseColorBlendingIn = var191;
    float4 diffuseColorBlendingOut = var192;
    
    
    float distanceToSpot = var200;
    
    
    float4 diffuseColor = diffuseColorBlendingIn;
    
    #if ENV_TRANSITION
    // if transitioning in, then if we're outside the circle, discard
    if (TransitionFactorAndDirection.y == 0)
    {
        if( distanceToSpot == 0)
        {
            discard;
        }
    }
    else
    {
        // if we're transitioning out, if we're inside the circle, discard
        if( distanceToSpot == 1)
        {
            discard;
        }
        // use the blending out color
        diffuseColor = diffuseColorBlendingOut;
    }
    #endif
    
    float4 result = diffuseColor;
    
    var201 = result;
    }
    float4 var202 = tex2D(Diffuse_Texture, defaultUVs); // Diffuse_Texture
    
    #if DISABLE_CLOUD_FX // STATIC_SWITCH: DISABLE_CLOUD_FX
        float4 var203 =  var202;
    #else
        float4 var203 =  var50;
    #endif
    
    
    #if ENV_TRANSITION // STATIC_SWITCH: ENV_TRANSITION
        float4 var204 =  var201;
    #else
        float4 var204 =  var203;
    #endif
    
    
    float4 color = var204;    
    
    color.a =  color.a ;
    float4 baseColor = color;

#ifdef FEATURE_MASKED
#ifdef DISCARD_ALPHA_TEXELS
    if (color.a < 1.0f)
    {
        discard;
    }
#else
    float var205 = 0.3; // FloatLiteral
    
    float alphaMaskValue = var205;
    if (color.a < alphaMaskValue)
    {
        discard;
    }
#endif
#endif

    
    float3 specularColor =  float3(0,0,0) ;
    
    float gloss =  0.0 ;
    float specPower = exp2(10 * gloss + 1);

    // Dynamic shadow
#ifndef DISABLE_SHADOWS
    float sunShadowMask = SampleShadowMap(SHADOW_MAP, interpolants.m_ShadowTC);
#ifdef ENABLE_BAKED_SHADOW
    float2 shdowMapUVs = interpolants.m_Texcoord.zw * BAKED_SHADOW_SCALE_AND_BIAS.xy;
    shdowMapUVs += BAKED_SHADOW_SCALE_AND_BIAS.zw;
    float4 bakedShadow = tex2D(BAKED_SHADOW, shdowMapUVs);
#else
    float4 bakedShadow = float4(1,1,1,1);
#endif

    sunShadowMask = min(sunShadowMask, bakedShadow.a);

    // the baked diffuse lighting from all point lights
    float3 pointLightInfo = bakedShadow.rgb;

#else   
#ifdef ENABLE_BAKED_SHADOW
    float2 shdowMapUVs = interpolants.m_Texcoord.zw * BAKED_SHADOW_SCALE_AND_BIAS.xy;
    shdowMapUVs += BAKED_SHADOW_SCALE_AND_BIAS.zw;
    float4 bakedShadow = tex2D(BAKED_SHADOW, shdowMapUVs);
    float sunShadowMask = bakedShadow.a;
    float3 pointLightInfo = bakedShadow.rgb;
#else
    float sunShadowMask = 1.0f;
    float3 pointLightInfo = float3(1,1,1);
#endif

#endif

    float3 diffuseReflection = float3(0,0,0);
    float3 specularReflection = float3(0,0,0);
    float3 sunLightCol = SUN_LIGHT_COLOR;
#ifdef CLOUD_SHADOWS
    #ifdef CLOUDS_NEED_UV
        float2 tc = interpolants.m_Clouds_TC.xy;
    #else
        float2 tc = interpolants.m_FoW_TC.xy;
    #endif

    float cloudStrengthR = tex2D(CLOUDS_TEXTURE, tc * CloudsScaleBias[0].xy + CloudsScaleBias[0].zw).r;
    float cloudStrengthG = tex2D(CLOUDS_TEXTURE, tc * CloudsScaleBias[1].xy + CloudsScaleBias[1].zw).g;
    float cloudStrengthB = tex2D(CLOUDS_TEXTURE, tc * CloudsScaleBias[2].xy + CloudsScaleBias[2].zw).b;
	float cloudStrength = saturate(cloudStrengthR + cloudStrengthG + cloudStrengthB);
	    sunLightCol = lerp(sunLightCol, CloudsSunColor, cloudStrength);
#endif
    float3 sunColor = sunLightCol * sunShadowMask;
    float sunDot = dot(worldNormal, SUN_LIGHT_DIRECTION);
    diffuseReflection += max(sunDot, 0.0f) * sunColor;

    // low quality mode gets no sun spec
#ifndef LOW_QUALITY_MODE
    // half vector
    float3 sunHalfAngle = normalize(SUN_LIGHT_DIRECTION_FOR_SPEC + viewDirection);
    float sunSpecularTerm = pow(abs(dot(worldNormal, sunHalfAngle)), specPower);
    sunSpecularTerm *= step(0.0f, sunDot);

    specularReflection += specularColor * sunColor * sunSpecularTerm;
#endif

    // add the diffuse contribution we baked    
    diffuseReflection += pointLightInfo * LIGHT_MAP_COLOR_SCALE;

    
    float3 emissiveColor =  float3(0,0,0) ;

#ifdef NO_BAKED_LIGHTING

    // Dynamic shadow, no baked lighting
    // using the shadow color complement
#ifndef DISABLE_SHADOWS
    float3 shadowMask = SampleShadowMap(SHADOW_MAP, interpolants.m_ShadowTC)*SHADOW_COLOR_COMPLEMENT + SHADOW_COLOR; // i.e. lerp(SHADOW_COLOR, white, sampledValue)
    color.rgb *= shadowMask;
#endif

#else // NO_BAKED_LIGHTING
    color.rgb *= diffuseReflection;
    color.rgb += specularReflection;
#endif


#ifdef DISABLE_DEPTH_FOG
    // normally we have the fog modulate the emissive somewhat.
    // But if we turn off fog, we still want the emissive contribution
    color.rgb += emissiveColor;
#else
#ifndef LOW_QUALITY_MODE    
    float fStart = ENV_FOG_START_END_SCALE_EMISSIVE_REMAP.x;
    float fEnd = ENV_FOG_START_END_SCALE_EMISSIVE_REMAP.y;
    float fDist = smoothstep(fEnd, fStart, worldHeight);
    // these constants correct for the fact that the exponentional fog calcs don't actually get completely fogged or unfogged
    float fogFactor = saturate(((1.0f / exp(fDist * 2.0f)) - 0.13533528323) * 1.15651764274);
    float RMfogFactor = saturate(ENV_FOG_START_END_SCALE_EMISSIVE_REMAP.w * fogFactor - 1.0f);
    
    float3 fogColor = lerp(ENV_FOG_COLOR, ENV_FOG_ALT_COLOR, fogFactor);
    color.rgb = lerp(color.rgb, fogColor.rgb, fogFactor);
    color.rgb += emissiveColor * (1 - RMfogFactor);
#else
    float fStart = ENV_FOG_START_END_SCALE_EMISSIVE_REMAP.x;
    float fEnd = ENV_FOG_START_END_SCALE_EMISSIVE_REMAP.y;
    float fDist = smoothstep(fEnd, fStart, worldHeight);
    float RMfogFactor = saturate(fDist*fDist + ENV_FOG_START_END_SCALE_EMISSIVE_REMAP.z);

    float3 fogColor = lerp(ENV_FOG_ALT_COLOR, ENV_FOG_COLOR, fDist);
    color.rgb = lerp( fogColor.rgb,color.rgb, fDist);
    color.rgb += emissiveColor * RMfogFactor;
    //color.rgb += emissiveColor;
#endif   
#endif

    // Fog of war
#ifndef DISABLE_FOW
    #ifdef FOW_FADE_TO_FOGGED
        float4 fowFactors = GetFogOfWarFactorsWithFadeTowardFogged(interpolants.m_FoW_TC.xy, interpolants.m_FoW_TC.z);
    #else
        float4 fowFactors = GetFogOfWarFactorsWithFadeTowardClear(interpolants.m_FoW_TC.xy, interpolants.m_FoW_TC.z);
    #endif

    #ifdef PREMULTIPLIED_ALPHA
        // to deal with cases where we are using premultiplied alpha
        // we need to also multiply the fowFactors by alpha so we don't get
        // strange brightening on the edges
        fowFactors.rgb *= color.a;
    #endif
        // Blend between the computed color of this point on the map and the fog color.
        color.rgb = lerp(fowFactors.rgb, color.rgb, fowFactors.a);
#endif
    color.rgb = ApplyMipColorsVisualization(color.rgb, interpolants.m_Texcoord.xy);



    FRAGMENT fragment;
    fragment.m_Color0 = color;
   

#ifdef MRT_SUPPORTED
    
    float bloomAlphaOverride =  1.0f;

    #if defined(FEATURE_BLOOM) && !defined(LOW_QUALITY_MODE)
        
        float3 bloomColor =  float3(0,0,0) ;
        #ifndef DISABLE_DEPTH_FOG
            bloomColor *=  (1 - RMfogFactor);
        #endif
        fragment.m_BloomColor = float4(bloomColor, bloomAlphaOverride);
    #else
        fragment.m_BloomColor = float4(0,0,0, bloomAlphaOverride);
    #endif
#endif

#ifdef SHOW_LIGHTING
    fragment.m_Color0.rgb = diffuseReflection + specularReflection + emissiveColor;
#endif

#ifdef CAPTURE_DIFFUSE
    fragment.m_Color0 = baseColor;
#endif

#ifdef MRT_SUPPORTED
#ifdef IS_DX9
    fragment.m_DummyColorOutput = float4(0,0,0,0);
#endif
#endif

    

    return fragment;
}
