#include "DATA/Shaders/HLSL/FogOfWar/FogOfWar_PS.hls"
#include "DATA/Shaders/HLSL/ShadowMap/pcf1.hls"
#include "DATA/Shaders/HLSL/MipLevels.hls"

// Texture for dynamic shadows
sampler2D BAKED_SHADOW;
float4 BAKED_SHADOW_SCALE_AND_BIAS;
float3 MESH_CENTER;

#ifdef FEATURE_BAKED_PAINT
float4 BAKED_PAINT_UV_SCALE_BIAS;
#endif


#ifdef LOW_QUALITY_MODE
#undef CLOUD_SHADOWS
#endif

#if defined(CLOUD_SHADOWS) && defined(DISABLE_FOW)
#define CLOUDS_NEED_UV 1
#endif

#if !defined(NO_BAKED_LIGHTING)
#define ENABLE_BAKED_SHADOW
#endif

#if !defined(NO_BAKED_LIGHTING) || defined(FEATURE_BAKED_PAINT)
#define NEED_ATLAS_UVS 1
#endif


float4 Parameter0; // (Tint_Color = Parameter0.xyzw) 
sampler2D Diffuse_Texture;
sampler2D Noise_Texture;



/////////////////////////////////////////////////////////////////////////////////////
// Constants & Structures
/////////////////////////////////////////////////////////////////////////////////////
struct INTERPOLANTS
{
    float4 m_Position      : POSITION;
    // we only need the interpolant if the vertex color is used in the pixel shader
#ifdef FEATURE_VERTEX_COLOR
    float4 m_VertexColor : COLOR0;
#endif
    float4 m_WorldNormalAndHeight : TEXCOORD_INTERP;
#ifdef FEATURE_TANGENT
    float4 m_WorldTangent  : TEXCOORD_INTERP;
#endif
#ifdef NEED_ATLAS_UVS
    float4 m_Texcoord      : TEXCOORD_INTERP; // regular UVs in xy, atlas UVs in ZW
#else
    float2 m_Texcoord      : TEXCOORD_INTERP; // regular UVs in xy
#endif

#ifdef CLOUDS_NEED_UV
    float2 m_Clouds_TC     : TEXCOORD_INTERP;
#endif
#if !defined(LOW_QUALITY_MODE) || defined(FEATURE_WORLD_POSITION)
    float2 m_WorldPositionXZ : TEXCOORD_INTERP;
#endif
#ifndef DISABLE_SHADOWS
    float3 m_ShadowTC      : TEXCOORD_INTERP; //Dynamic shadow map texture coordinates.
#endif
#ifndef DISABLE_FOW
    float3 m_FoW_TC        : TEXCOORD_INTERP; //Fog of War texture coordinates.
#endif
#ifdef FEATURE_SCREENSPACE_UV
    float4 vScreenSpaceUV : TEXCOORD_INTERP;
#endif
    float2 interp_0 : TEXCOORD_INTERP;
};

struct FRAGMENT
{
    float4  m_Color0 : COLOR0;
#ifdef MRT_SUPPORTED
#ifdef IS_DX9
    // Dummy slot for unused "CharacterInking". DX9 doesn't like have gaps in the MRT output
    float4 m_DummyColorOutput: COLOR1;
#endif
    float4 m_BloomColor : COLOR2; // the bloom color is always in slot 2 of the MRT. We don't write to slot 1
#endif
};

/////////////////////////////////////////////////////////////////////////////////////
// Shader
/////////////////////////////////////////////////////////////////////////////////////
FRAGMENT main(INTERPOLANTS interpolants)
{


#if defined(FEATURE_SCREENSPACE_UV)
    float3 screenSpacePerspDivide = interpolants.vScreenSpaceUV.xyz / interpolants.vScreenSpaceUV.w;
    float2 screenSpaceUV = screenSpacePerspDivide.xy;
    float screenSpaceDepth = screenSpacePerspDivide.z;
    screenSpaceUV *= 0.5f;
    screenSpaceUV += 0.5f;
#ifndef IS_OPENGL
    screenSpaceUV.y = 1.0f - screenSpaceUV.y;
#else
    // OpenGL clip space is -1 to 1 on Z but we want Z in in the 0-1 range to be
    // able to sample the depth texture if necessasry
    screenSpaceDepth = (screenSpaceDepth * 0.5f) + 0.5f;
#endif

#endif

#ifdef FEATURE_BAKED_PAINT
    // we set up this variable so node graphs can use the snippet for it
    float2 bakedTerrainPaintUVs = interpolants.m_Texcoord.zw * BAKED_PAINT_UV_SCALE_BIAS.xy;
    bakedTerrainPaintUVs += BAKED_PAINT_UV_SCALE_BIAS.zw;
#endif

    float2 defaultUVs = interpolants.m_Texcoord.xy;

    float3 worldNormalIn = normalize(interpolants.m_WorldNormalAndHeight.xyz);
    float worldHeight = interpolants.m_WorldNormalAndHeight.w;
#if !defined(LOW_QUALITY_MODE) || defined(FEATURE_WORLD_POSITION)
    float3 worldPosition = float3(interpolants.m_WorldPositionXZ.x, worldHeight, interpolants.m_WorldPositionXZ.y);
#endif
#ifdef FEATURE_VERTEX_COLOR
     float4 vColorIn0 = interpolants.m_VertexColor;
#endif

#ifdef FEATURE_TANGENT
    // plugging something into TANGENT_SPACE_NORMAL defines FEATURE_TANGENT
    
    float3 tangentSpaceNormal =  float3(0.0,0.0,1) ;

    float3 worldTangent = normalize(interpolants.m_WorldTangent.xyz);
    float3 worldBinormal = cross(worldNormalIn, worldTangent) * interpolants.m_WorldTangent.w;
    float3x3 tangentBasis = float3x3(worldTangent, worldBinormal, worldNormalIn);

    worldNormalIn = mul(tangentSpaceNormal, tangentBasis);

#endif
    
    float3 worldNormal =  worldNormalIn;



#ifndef LOW_QUALITY_MODE
    float3 viewDirection = normalize(vCamera - worldPosition);
#endif

    float4 var0 = tex2D(Diffuse_Texture, defaultUVs); // Diffuse_Texture
    float4 var1 = tex2D(Diffuse_Texture, defaultUVs); // Diffuse_Texture
    float4 var2 = float4(var1.xyz,var1.w); // Combine
    float4 var3 = tex2D(Diffuse_Texture, defaultUVs); // Diffuse_Texture
    float4 var4 = Parameter0.xyzw; // Tint_Color
    float4 var5 = var1 + var4; // Add
    float4 var6;
    { // (TerrainBlendMap)
    float2 uvs = worldPosition.xz * TERRAIN_XFORM.xy + TERRAIN_XFORM.zw;
    float4 result = tex2D(TERRAIN_BLEND, uvs);
    
    var6 = result;
    }
    float var7 = var6.z; // Mask
    float var8 = var4.w * var7; // Multiply
    float4 var9 = lerp(var1, var5, var8); // Lerp
    float4 var10 = float4(var9.xyz,var1.w); // Combine
    float var11 = 2; // FloatLiteral
    float2 var12;
    { // (TransitionFactorAndDirection)
    #ifdef ENV_TRANSITION
    float2 result = TransitionFactorAndDirection;
    #else
    float2 result = float2(0.0f, 0.0f);
    #endif
    
    var12 = result;
    }
    float var13 = var12.x; // Mask
    float var14 = var11 * var13; // Multiply
    float var15 = saturate(var14); // saturate
    float4 var16 = lerp(var3, var10, var15); // Lerp
    float4 var17 = tex2D(Diffuse_Texture, defaultUVs); // Diffuse_Texture
    float2 var18 = float2(0.9,0.6); // Float2Literal
    float2 var19 = interpolants.interp_0.xy; // EvaluateInVertexShader
    float4 var20 = tex2D(Noise_Texture, var19); // Noise_Texture
    float var21 = 5; // FloatLiteral
    float4 var22 = tex2D(Noise_Texture, var19); // Noise_Texture
    float4 var23 = TIME; // Time
    float var24 = -0.2; // FloatLiteral
    float var25 = var23.x * var24; // Multiply
    float var26 = var22.x + var25; // Add
    float var27 = var21 * var26; // Multiply
    float var28 = sin(var27); // sin
    float var29;
    { // (simpleRemap)
    float input = var28;
    float result = ( input + 1 ) * 0.5;
    var29 = result;
    }
    float var30 = max(var20.y,var29); // max
    float var31 = saturate(var30); // saturate
    float var32 = lerp(var18.x, var18.y, var31); // Lerp
    float4 var33 = var17 * var32; // Multiply
    float4 var34 = tex2D(Diffuse_Texture, defaultUVs); // Diffuse_Texture
    float2 var35 = float2(0.25,6); // Float2Literal
    float var36 = lerp(var35.x, var35.y, var31); // Lerp
    float4 var37 = float4(1,0.392157,0.0901961,1); // ColorLiteral
    float4 var38 = var36 * var37; // Multiply
    float4 var39 = var34 + var38; // Add
    float2 var40 = float2(0.75,1); // Float2Literal
    float var41 = 0; // FloatLiteral
    float2 var42 = float2(5,25); // Float2Literal
    float2 var43;
    { // (TransitionFactorAndDirection)
    #ifdef ENV_TRANSITION
    float2 result = TransitionFactorAndDirection;
    #else
    float2 result = float2(0.0f, 0.0f);
    #endif
    
    var43 = result;
    }
    float var44 = var43.x; // Mask
    float var45 = lerp(var42.x, var42.y, var44); // Lerp
    float3 var46;
    { // (WorldPosition)
    float3 result = worldPosition;
    var46 = result;
    }
    float var47 = var46.x; // Mask
    float var48 = var46.z; // Mask
    float var49 = var47 + var48; // Add
    float var50 = 0.01; // FloatLiteral
    float var51 = var49 * var50; // Multiply
    float var52 = sin(var51); // sin
    float var53 = var45 * var52; // Multiply
    
    #ifdef LOW_QUALITY_MODE
        float var54 =  var41;
    #else
        float var54 =  var53;
    #endif
    
    float3 var55;
    { // (WorldPosition)
    float3 result = worldPosition;
    var55 = result;
    }
    float3 var56 = float3(7666,0,3936); // Float3Literal
    float3 var57 = var55 - var56; // Subtract
    float var58 = length(var57); // length
    float var59 = var54 + var58; // Add
    float var60 = 8500; // FloatLiteral
    float2 var61;
    { // (TransitionFactorAndDirection)
    #ifdef ENV_TRANSITION
    float2 result = TransitionFactorAndDirection;
    #else
    float2 result = float2(0.0f, 0.0f);
    #endif
    
    var61 = result;
    }
    float var62 = var61.x; // Mask
    float var63 = var60 * var62; // Multiply
    float var64 = step(var59,var63); // step
    float var65;
    { // (OneMinus)
    float input =var64;
    float result = 1.0f - input;
    var65 = result;
    }
    float var66 = -700; // FloatLiteral
    float2 var67 = float2(-250,0); // Float2Literal
    float var68 = lerp(var67.x, var67.y, var31); // Lerp
    float var69 = var66 + var68; // Add
    float var70 = var69 + var63; // Add
    float var71 = -200; // FloatLiteral
    float var72 = var59 + var71; // Add
    float var73 = smoothstep(var70, var63, var72); // smoothstep
    float var74 = var73 * var64; // Multiply
    float var75 = var65 + var74; // Add
    float var76;
    { // (OneMinus)
    float input =var75;
    float result = 1.0f - input;
    var76 = result;
    }
    float3 var77 = float3(3886,0,8009); // Float3Literal
    float3 var78 = var55 - var77; // Subtract
    float var79 = length(var78); // length
    float var80 = var79 + var54; // Add
    float var81 = step(var80,var63); // step
    float var82;
    { // (OneMinus)
    float input =var81;
    float result = 1.0f - input;
    var82 = result;
    }
    float var83 = var80 + var71; // Add
    float var84 = smoothstep(var70, var63, var83); // smoothstep
    float var85 = var81 * var84; // Multiply
    float var86 = var82 + var85; // Add
    float var87;
    { // (OneMinus)
    float input =var86;
    float result = 1.0f - input;
    var87 = result;
    }
    float var88 = max(var76,var87); // max
    float3 var89 = float3(7020,0,10820); // Float3Literal
    float3 var90 = var55 - var89; // Subtract
    float var91 = length(var90); // length
    float var92 = var91 + var54; // Add
    float var93 = step(var92,var63); // step
    float var94;
    { // (OneMinus)
    float input =var93;
    float result = 1.0f - input;
    var94 = result;
    }
    float var95 = var92 + var71; // Add
    float var96 = smoothstep(var70, var63, var95); // smoothstep
    float var97 = var96 * var93; // Multiply
    float var98 = var94 + var97; // Add
    float var99;
    { // (OneMinus)
    float input =var98;
    float result = 1.0f - input;
    var99 = result;
    }
    float var100 = max(var88,var99); // max
    float3 var101;
    { // (WorldPosition)
    float3 result = worldPosition;
    var101 = result;
    }
    float3 var102 = float3(10967,0,6956); // Float3Literal
    float3 var103 = var101 - var102; // Subtract
    float var104 = length(var103); // length
    float var105 = var104 + var54; // Add
    float var106 = step(var105,var63); // step
    float var107;
    { // (OneMinus)
    float input =var106;
    float result = 1.0f - input;
    var107 = result;
    }
    float var108 = var105 + var71; // Add
    float var109 = smoothstep(var70, var63, var108); // smoothstep
    float var110 = var109 * var106; // Multiply
    float var111 = var107 + var110; // Add
    float var112;
    { // (OneMinus)
    float input =var111;
    float result = 1.0f - input;
    var112 = result;
    }
    float var113 = max(var100,var112); // max
    float3 var114 = float3(9827,-82,4401); // Float3Literal
    float3 var115 = var101 - var114; // Subtract
    float var116 = length(var115); // length
    float var117 = var116 + var54; // Add
    float var118 = step(var117,var63); // step
    float var119;
    { // (OneMinus)
    float input =var118;
    float result = 1.0f - input;
    var119 = result;
    }
    float var120 = var117 + var71; // Add
    float var121 = smoothstep(var70, var63, var120); // smoothstep
    float var122 = var121 * var118; // Multiply
    float var123 = var119 + var122; // Add
    float var124;
    { // (OneMinus)
    float input =var123;
    float result = 1.0f - input;
    var124 = result;
    }
    float var125 = max(var113,var124); // max
    float var126;
    { // (OneMinus)
    float input =var125;
    float result = 1.0f - input;
    var126 = result;
    }
    float var127 = smoothstep(var40.x, var40.y, var126); // smoothstep
    float var128 = 2; // FloatLiteral
    float var129 = var127 * var128; // Multiply
    float4 var130 = lerp(var33, var39, var129); // Lerp
    float2 var131 = float2(0.25,1); // Float2Literal
    float4 var132;
    { // (TerrainBlendMap)
    float2 uvs = worldPosition.xz * TERRAIN_XFORM.xy + TERRAIN_XFORM.zw;
    float4 result = tex2D(TERRAIN_BLEND, uvs);
    
    var132 = result;
    }
    float var133 = var132.x; // Mask
    float var134 = lerp(var131.x, var131.y, var133); // Lerp
    float var135 = 1; // FloatLiteral
    float2 var136 = float2(-400,150); // Float2Literal
    float3 var137;
    { // (WorldPosition)
    float3 result = worldPosition;
    var137 = result;
    }
    float3 var138 = float3(7500,0,7500); // Float3Literal
    float3 var139 = var137 - var138; // Subtract
    float var140 = length(var139); // length
    float var141 = smoothstep(var136.x, var140, var136.y); // smoothstep
    float var142 = var135 * var141; // Multiply
    float var143 = saturate(var142); // saturate
    float var144;
    { // (OneMinus)
    float input =var143;
    float result = 1.0f - input;
    var144 = result;
    }
    float2 var145 = float2(0.3,0.8); // Float2Literal
    float var146 = smoothstep(var145.x, var145.y, var126); // smoothstep
    float var147 = var144 * var146; // Multiply
    
    #if MASK_FX_IN_MAP_CENTER // STATIC_SWITCH: MASK_FX_IN_MAP_CENTER
        float var148 =  var147;
    #else
        float var148 =  var146;
    #endif
    
    float var149 = saturate(var148); // saturate
    float var150 = var134 * var149; // Multiply
    float var151;
    { // (OneMinus)
    float input =var13;
    float result = 1.0f - input;
    var151 = result;
    }
    float var152 = var150 * var151; // Multiply
    float4 var153 = lerp(var16, var130, var152); // Lerp
    float4 var154 = float4(var153.xyz,var0.w); // Combine
    
    #ifdef LOW_QUALITY_MODE
        float4 var155 =  var2;
    #else
        float4 var155 =  var154;
    #endif
    
    
    #if DISABLE_FIRE_FX // STATIC_SWITCH: DISABLE_FIRE_FX
        float4 var156 =  var0;
    #else
        float4 var156 =  var155;
    #endif
    
    float4 var157 = tex2D(Diffuse_Texture, defaultUVs); // Diffuse_Texture
    float var158 = 15000; // FloatLiteral
    float var159 = var158 * var62; // Multiply
    float var160 = step(var117,var159); // step
    float var161 = max(var64,var81); // max
    float var162 = max(var161,var93); // max
    float var163 = max(var162,var106); // max
    float var164 = max(var163,var118); // max
    
    #ifdef LOW_QUALITY_MODE
        float var165 =  var160;
    #else
        float var165 =  var164;
    #endif
    
    float4 var166;
    { // (TerrainTransition_Step)
    float4 diffuseColorBlendingIn = var156;
    float4 diffuseColorBlendingOut = var157;
    
    
    float distanceToSpot = var165;
    
    
    float4 diffuseColor = diffuseColorBlendingIn;
    
    #if ENV_TRANSITION
    // if transitioning in, then if we're outside the circle, discard
    if (TransitionFactorAndDirection.y == 0)
    {
        if( distanceToSpot == 0)
        {
            discard;
        }
    }
    else
    {
        // if we're transitioning out, if we're inside the circle, discard
        if( distanceToSpot == 1)
        {
            discard;
        }
        // use the blending out color
        diffuseColor = diffuseColorBlendingOut;
    }
    #endif
    
    float4 result = diffuseColor;
    
    var166 = result;
    }
    float4 var167 = tex2D(Diffuse_Texture, defaultUVs); // Diffuse_Texture
    
    #if DISABLE_FIRE_FX // STATIC_SWITCH: DISABLE_FIRE_FX
        float4 var168 =  var167;
    #else
        float4 var168 =  var10;
    #endif
    
    
    #ifdef LOW_QUALITY_MODE
        float4 var169 =  var2;
    #else
        float4 var169 =  var168;
    #endif
    
    
    #if ENV_TRANSITION // STATIC_SWITCH: ENV_TRANSITION
        float4 var170 =  var166;
    #else
        float4 var170 =  var169;
    #endif
    
    
    float4 color = var170;    
    
    color.a =  color.a ;
    float4 baseColor = color;

#ifdef FEATURE_MASKED
#ifdef DISCARD_ALPHA_TEXELS
    if (color.a < 1.0f)
    {
        discard;
    }
#else
    float var171 = 0.3; // FloatLiteral
    
    float alphaMaskValue = var171;
    if (color.a < alphaMaskValue)
    {
        discard;
    }
#endif
#endif

    
    float3 specularColor =  float3(0,0,0) ;
    
    float gloss =  0.0 ;
    float specPower = exp2(10 * gloss + 1);

    // Dynamic shadow
#ifndef DISABLE_SHADOWS
    float sunShadowMask = SampleShadowMap(SHADOW_MAP, interpolants.m_ShadowTC);
#ifdef ENABLE_BAKED_SHADOW
    float2 shdowMapUVs = interpolants.m_Texcoord.zw * BAKED_SHADOW_SCALE_AND_BIAS.xy;
    shdowMapUVs += BAKED_SHADOW_SCALE_AND_BIAS.zw;
    float4 bakedShadow = tex2D(BAKED_SHADOW, shdowMapUVs);
#else
    float4 bakedShadow = float4(1,1,1,1);
#endif

    sunShadowMask = min(sunShadowMask, bakedShadow.a);

    // the baked diffuse lighting from all point lights
    float3 pointLightInfo = bakedShadow.rgb;

#else   
#ifdef ENABLE_BAKED_SHADOW
    float2 shdowMapUVs = interpolants.m_Texcoord.zw * BAKED_SHADOW_SCALE_AND_BIAS.xy;
    shdowMapUVs += BAKED_SHADOW_SCALE_AND_BIAS.zw;
    float4 bakedShadow = tex2D(BAKED_SHADOW, shdowMapUVs);
    float sunShadowMask = bakedShadow.a;
    float3 pointLightInfo = bakedShadow.rgb;
#else
    float sunShadowMask = 1.0f;
    float3 pointLightInfo = float3(1,1,1);
#endif

#endif

    float3 diffuseReflection = float3(0,0,0);
    float3 specularReflection = float3(0,0,0);
    float3 sunLightCol = SUN_LIGHT_COLOR;
#ifdef CLOUD_SHADOWS
    #ifdef CLOUDS_NEED_UV
        float2 tc = interpolants.m_Clouds_TC.xy;
    #else
        float2 tc = interpolants.m_FoW_TC.xy;
    #endif

    float cloudStrengthR = tex2D(CLOUDS_TEXTURE, tc * CloudsScaleBias[0].xy + CloudsScaleBias[0].zw).r;
    float cloudStrengthG = tex2D(CLOUDS_TEXTURE, tc * CloudsScaleBias[1].xy + CloudsScaleBias[1].zw).g;
    float cloudStrengthB = tex2D(CLOUDS_TEXTURE, tc * CloudsScaleBias[2].xy + CloudsScaleBias[2].zw).b;
	float cloudStrength = saturate(cloudStrengthR + cloudStrengthG + cloudStrengthB);
	    sunLightCol = lerp(sunLightCol, CloudsSunColor, cloudStrength);
#endif
    float3 sunColor = sunLightCol * sunShadowMask;
    float sunDot = dot(worldNormal, SUN_LIGHT_DIRECTION);
    diffuseReflection += max(sunDot, 0.0f) * sunColor;

    // low quality mode gets no sun spec
#ifndef LOW_QUALITY_MODE
    // half vector
    float3 sunHalfAngle = normalize(SUN_LIGHT_DIRECTION_FOR_SPEC + viewDirection);
    float sunSpecularTerm = pow(abs(dot(worldNormal, sunHalfAngle)), specPower);
    sunSpecularTerm *= step(0.0f, sunDot);

    specularReflection += specularColor * sunColor * sunSpecularTerm;
#endif

    // add the diffuse contribution we baked    
    diffuseReflection += pointLightInfo * LIGHT_MAP_COLOR_SCALE;

    
    float3 emissiveColor =  float3(0,0,0) ;

#ifdef NO_BAKED_LIGHTING

    // Dynamic shadow, no baked lighting
    // using the shadow color complement
#ifndef DISABLE_SHADOWS
    float3 shadowMask = SampleShadowMap(SHADOW_MAP, interpolants.m_ShadowTC)*SHADOW_COLOR_COMPLEMENT + SHADOW_COLOR; // i.e. lerp(SHADOW_COLOR, white, sampledValue)
    color.rgb *= shadowMask;
#endif

#else // NO_BAKED_LIGHTING
    color.rgb *= diffuseReflection;
    color.rgb += specularReflection;
#endif


#ifdef DISABLE_DEPTH_FOG
    // normally we have the fog modulate the emissive somewhat.
    // But if we turn off fog, we still want the emissive contribution
    color.rgb += emissiveColor;
#else
#ifndef LOW_QUALITY_MODE    
    float fStart = ENV_FOG_START_END_SCALE_EMISSIVE_REMAP.x;
    float fEnd = ENV_FOG_START_END_SCALE_EMISSIVE_REMAP.y;
    float fDist = smoothstep(fEnd, fStart, worldHeight);
    // these constants correct for the fact that the exponentional fog calcs don't actually get completely fogged or unfogged
    float fogFactor = saturate(((1.0f / exp(fDist * 2.0f)) - 0.13533528323) * 1.15651764274);
    float RMfogFactor = saturate(ENV_FOG_START_END_SCALE_EMISSIVE_REMAP.w * fogFactor - 1.0f);
    
    float3 fogColor = lerp(ENV_FOG_COLOR, ENV_FOG_ALT_COLOR, fogFactor);
    color.rgb = lerp(color.rgb, fogColor.rgb, fogFactor);
    color.rgb += emissiveColor * (1 - RMfogFactor);
#else
    float fStart = ENV_FOG_START_END_SCALE_EMISSIVE_REMAP.x;
    float fEnd = ENV_FOG_START_END_SCALE_EMISSIVE_REMAP.y;
    float fDist = smoothstep(fEnd, fStart, worldHeight);
    float RMfogFactor = saturate(fDist*fDist + ENV_FOG_START_END_SCALE_EMISSIVE_REMAP.z);

    float3 fogColor = lerp(ENV_FOG_ALT_COLOR, ENV_FOG_COLOR, fDist);
    color.rgb = lerp( fogColor.rgb,color.rgb, fDist);
    color.rgb += emissiveColor * RMfogFactor;
    //color.rgb += emissiveColor;
#endif   
#endif

    // Fog of war
#ifndef DISABLE_FOW
    #ifdef FOW_FADE_TO_FOGGED
        float4 fowFactors = GetFogOfWarFactorsWithFadeTowardFogged(interpolants.m_FoW_TC.xy, interpolants.m_FoW_TC.z);
    #else
        float4 fowFactors = GetFogOfWarFactorsWithFadeTowardClear(interpolants.m_FoW_TC.xy, interpolants.m_FoW_TC.z);
    #endif

    #ifdef PREMULTIPLIED_ALPHA
        // to deal with cases where we are using premultiplied alpha
        // we need to also multiply the fowFactors by alpha so we don't get
        // strange brightening on the edges
        fowFactors.rgb *= color.a;
    #endif
        // Blend between the computed color of this point on the map and the fog color.
        color.rgb = lerp(fowFactors.rgb, color.rgb, fowFactors.a);
#endif
    color.rgb = ApplyMipColorsVisualization(color.rgb, interpolants.m_Texcoord.xy);



    FRAGMENT fragment;
    fragment.m_Color0 = color;
   

#ifdef MRT_SUPPORTED
    
    float bloomAlphaOverride =  1.0f;

    #if defined(FEATURE_BLOOM) && !defined(LOW_QUALITY_MODE)
        
        float3 bloomColor =  float3(0,0,0) ;
        #ifndef DISABLE_DEPTH_FOG
            bloomColor *=  (1 - RMfogFactor);
        #endif
        fragment.m_BloomColor = float4(bloomColor, bloomAlphaOverride);
    #else
        fragment.m_BloomColor = float4(0,0,0, bloomAlphaOverride);
    #endif
#endif

#ifdef SHOW_LIGHTING
    fragment.m_Color0.rgb = diffuseReflection + specularReflection + emissiveColor;
#endif

#ifdef CAPTURE_DIFFUSE
    fragment.m_Color0 = baseColor;
#endif

#ifdef MRT_SUPPORTED
#ifdef IS_DX9
    fragment.m_DummyColorOutput = float4(0,0,0,0);
#endif
#endif

    

    return fragment;
}
