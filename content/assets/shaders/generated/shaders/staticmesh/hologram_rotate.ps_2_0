#include "DATA/Shaders/HLSL/FogOfWar/FogOfWar_PS.hls"
#include "DATA/Shaders/HLSL/ShadowMap/pcf1.hls"
#include "DATA/Shaders/HLSL/MipLevels.hls"

// Texture for dynamic shadows
sampler2D BAKED_SHADOW;
float4 BAKED_SHADOW_SCALE_AND_BIAS;
float3 MESH_CENTER;

#ifdef FEATURE_BAKED_PAINT
float4 BAKED_PAINT_UV_SCALE_BIAS;
#endif


#ifdef LOW_QUALITY_MODE
#undef CLOUD_SHADOWS
#endif

#if defined(CLOUD_SHADOWS) && defined(DISABLE_FOW)
#define CLOUDS_NEED_UV 1
#endif

#if !defined(NO_BAKED_LIGHTING)
#define ENABLE_BAKED_SHADOW
#endif

#if !defined(NO_BAKED_LIGHTING) || defined(FEATURE_BAKED_PAINT)
#define NEED_ATLAS_UVS 1
#endif


float4 Parameter0; // (Final_Alpha = Parameter0.x,Distortion_TimeSpeed = Parameter0.y,Distortion_ScrollSpeed = Parameter0.zw) 
float4 Parameter1; // (Distortion_Amount = Parameter1.x,Rotation_Speed = Parameter1.y,ScanLine_ScrollSpeed = Parameter1.z,Emissive_Intensity = Parameter1.w) 
float4 Parameter2; // (ScanLines1 = Parameter2.xyz,Bloom_Intensity = Parameter2.w) 
float4 Parameter3; // (Base_Color = Parameter3.xyzw) 
float4 Parameter4; // (Bloom_Color = Parameter4.xyzw) 
sampler2D Mask_Texture;
sampler2D Noise;
sampler2D Diffuse_Texture;



/////////////////////////////////////////////////////////////////////////////////////
// Constants & Structures
/////////////////////////////////////////////////////////////////////////////////////
struct INTERPOLANTS
{
    float4 m_Position      : POSITION;
    // we only need the interpolant if the vertex color is used in the pixel shader
#ifdef FEATURE_VERTEX_COLOR
    float4 m_VertexColor : COLOR0;
#endif
    float4 m_WorldNormalAndHeight : TEXCOORD_INTERP;
#ifdef FEATURE_TANGENT
    float4 m_WorldTangent  : TEXCOORD_INTERP;
#endif
#ifdef NEED_ATLAS_UVS
    float4 m_Texcoord      : TEXCOORD_INTERP; // regular UVs in xy, atlas UVs in ZW
#else
    float2 m_Texcoord      : TEXCOORD_INTERP; // regular UVs in xy
#endif

#ifdef CLOUDS_NEED_UV
    float2 m_Clouds_TC     : TEXCOORD_INTERP;
#endif
#if !defined(LOW_QUALITY_MODE) || defined(FEATURE_WORLD_POSITION)
    float2 m_WorldPositionXZ : TEXCOORD_INTERP;
#endif
#ifndef DISABLE_SHADOWS
    float3 m_ShadowTC      : TEXCOORD_INTERP; //Dynamic shadow map texture coordinates.
#endif
#ifndef DISABLE_FOW
    float3 m_FoW_TC        : TEXCOORD_INTERP; //Fog of War texture coordinates.
#endif
#ifdef FEATURE_SCREENSPACE_UV
    float4 vScreenSpaceUV : TEXCOORD_INTERP;
#endif
    float4 interp_0 : TEXCOORD_INTERP;
};

struct FRAGMENT
{
    float4  m_Color0 : COLOR0;
#ifdef MRT_SUPPORTED
#ifdef IS_DX9
    // Dummy slot for unused "CharacterInking". DX9 doesn't like have gaps in the MRT output
    float4 m_DummyColorOutput: COLOR1;
#endif
    float4 m_BloomColor : COLOR2; // the bloom color is always in slot 2 of the MRT. We don't write to slot 1
#endif
};

/////////////////////////////////////////////////////////////////////////////////////
// Shader
/////////////////////////////////////////////////////////////////////////////////////
FRAGMENT main(INTERPOLANTS interpolants)
{


#if defined(FEATURE_SCREENSPACE_UV)
    float3 screenSpacePerspDivide = interpolants.vScreenSpaceUV.xyz / interpolants.vScreenSpaceUV.w;
    float2 screenSpaceUV = screenSpacePerspDivide.xy;
    float screenSpaceDepth = screenSpacePerspDivide.z;
    screenSpaceUV *= 0.5f;
    screenSpaceUV += 0.5f;
#ifndef IS_OPENGL
    screenSpaceUV.y = 1.0f - screenSpaceUV.y;
#else
    // OpenGL clip space is -1 to 1 on Z but we want Z in in the 0-1 range to be
    // able to sample the depth texture if necessasry
    screenSpaceDepth = (screenSpaceDepth * 0.5f) + 0.5f;
#endif

#endif

#ifdef FEATURE_BAKED_PAINT
    // we set up this variable so node graphs can use the snippet for it
    float2 bakedTerrainPaintUVs = interpolants.m_Texcoord.zw * BAKED_PAINT_UV_SCALE_BIAS.xy;
    bakedTerrainPaintUVs += BAKED_PAINT_UV_SCALE_BIAS.zw;
#endif

    float2 defaultUVs = interpolants.m_Texcoord.xy;

    float3 worldNormalIn = normalize(interpolants.m_WorldNormalAndHeight.xyz);
    float worldHeight = interpolants.m_WorldNormalAndHeight.w;
#if !defined(LOW_QUALITY_MODE) || defined(FEATURE_WORLD_POSITION)
    float3 worldPosition = float3(interpolants.m_WorldPositionXZ.x, worldHeight, interpolants.m_WorldPositionXZ.y);
#endif
#ifdef FEATURE_VERTEX_COLOR
     float4 vColorIn0 = interpolants.m_VertexColor;
#endif

#ifdef FEATURE_TANGENT
    // plugging something into TANGENT_SPACE_NORMAL defines FEATURE_TANGENT
    
    float3 tangentSpaceNormal =  float3(0.0,0.0,1) ;

    float3 worldTangent = normalize(interpolants.m_WorldTangent.xyz);
    float3 worldBinormal = cross(worldNormalIn, worldTangent) * interpolants.m_WorldTangent.w;
    float3x3 tangentBasis = float3x3(worldTangent, worldBinormal, worldNormalIn);

    worldNormalIn = mul(tangentSpaceNormal, tangentBasis);

#endif
    
    float3 worldNormal =  worldNormalIn;



#ifndef LOW_QUALITY_MODE
    float3 viewDirection = normalize(vCamera - worldPosition);
#endif

    
    float4 color =  float4(0,0,0,1) ;    
    float2 var0 = interpolants.interp_0.xy; // EvaluateInVertexShader
    float4 var1 = tex2D(Mask_Texture, var0); // Mask_Texture
    float var2 = Parameter0.x; // Final_Alpha
    float var3 = var1.z * var2; // Multiply
    float2 var4;
    { // (UVCoord)
    float2 result = defaultUVs;
    var4 = result;
    }
    float4 var5 = TIME; // Time
    float var6 = Parameter0.y; // Distortion_TimeSpeed
    float var7 = var5.x * var6; // Multiply
    float var8 = sin(var7); // sin
    float var9 = saturate(var8); // saturate
    float var10 = sin(var7); // sin
    float var11 = var8 + var10; // Add
    float var12 = sin(var7); // sin
    float var13 = var11 - var12; // Subtract
    float var14;
    { // (simpleRemap)
    float input = var13;
    float result = ( input + 1 ) * 0.5;
    var14 = result;
    }
    float var15 = sin(var7); // sin
    float var16 = saturate(var15); // saturate
    float var17 = var14 - var16; // Subtract
    float var18 = var9 * var17; // Multiply
    float2 var19 = interpolants.interp_0.zw; // EvaluateInVertexShader
    float4 var20 = tex2D(Noise, var19); // Noise
    float4 var21 = var18 * var20; // Multiply
    float2 var22 = var21.xy; // Mask
    float2 var23 = float2(-1,0); // Float2Literal
    float2 var24;
    { // (UVCoord)
    float2 result = defaultUVs;
    var24 = result;
    }
    float2 var25 = float2(-0.5,-0.5); // Float2Literal
    float2 var26 = var24 + var25; // Add
    float2 var27 = float2(2,2); // Float2Literal
    float2 var28 = var26 * var27; // Multiply
    float2 var29 = var23 * var28; // Multiply
    float2 var30 = var22 * var29; // Multiply
    float2 var31 = var4 + var30; // Add
    float2 var32 = float2(0.2,10); // Float2Literal
    float4 var33 = float4(-1,1,0.01,2); // Float4Literal
    float var34;
    { // (ComplexRemap)
    float OldValue = var18;
    float OldMin = var33.x;
    float OldMax = var33.y;
    float NewMin = var33.z;
    float NewMax = var33.w;
    float OldRange = ( OldMax - OldMin );
    float NewRange = ( NewMax - NewMin );
    float result  = (((OldValue - OldMin) * NewRange) / OldRange) + NewMin;
    var34 = result;
    }
    float var35 = lerp(var32.x, var32.y, var34); // Lerp
    float4 var36 = TIME; // Time
    float var37 = var35 * var36.x; // Multiply
    float2 var38 = Parameter0.zw; // Distortion_ScrollSpeed
    float2 var39;
    { // (Panner)
    float2 uvInput = var31;
    float time = var37;
    float2 speed = var38;
    float2 scroll = float2( ( time * speed.x + uvInput.x ), ( time * speed.y + uvInput.y ));
    float2 result = scroll;
    var39 = result;
    }
    float4 var40 = tex2D(Mask_Texture, var39); // Mask_Texture
    float var41 = Parameter1.x; // Distortion_Amount
    float var42 = var40.x * var41; // Multiply
    float2 var43 = float2(var42,var42); // Combine
    float2 var44;
    { // (UVCoord)
    float2 result = defaultUVs;
    var44 = result;
    }
    float4 var45 = TIME; // Time
    float var46 = Parameter1.y; // Rotation_Speed
    float var47 = var45.x * var46; // Multiply
    float2 var48;
    { // (UVRotation)
    float2 uvInput = var44;
    float2 uvPivot =  float2(0.5, 0.5) ;
    float RotAngle = var47 * -1.0;
    float SinRot = sin(RotAngle);
    float CosRot = cos(RotAngle);
    float2 UVCenter = ( uvPivot * -1) + uvInput;
    float xDot = dot( UVCenter, float2( CosRot, ( SinRot * -1.0 ) ) );
    float yDot = dot( UVCenter, float2( SinRot, CosRot ) );
    float2 UVRot = float2( xDot, yDot );
    float2 result =  uvPivot + UVRot;
    var48 = result;
    }
    float2 var49 = var43 + var48; // Add
    float4 var50 = tex2D(Mask_Texture, var49); // Mask_Texture
    float3 var51 = Parameter2.xyz; // ScanLines1
    float2 var52;
    { // (UVCoord)
    float2 result = defaultUVs;
    var52 = result;
    }
    float var53 = var52.y; // Mask
    float4 var54 = TIME; // Time
    float var55 = Parameter1.z; // ScanLine_ScrollSpeed
    float var56 = var54.x * var55; // Multiply
    float var57 = var53 + var56; // Add
    float var58 = var57 * var51.x; // Multiply
    float var59 = sin(var58); // sin
    float var60 = smoothstep(var51.y, var51.z, var59); // smoothstep
    float var61 = saturate(var60); // saturate
    float var62 = var50.z * var61; // Multiply
    float var63 = var50.y * var62; // Multiply
    float var64 = var2 * var63; // Multiply
    
    #ifdef LOW_QUALITY_MODE
        float var65 =  var3;
    #else
        float var65 =  var64;
    #endif
    
    
    color.a = var65;
    float4 baseColor = color;

#ifdef FEATURE_MASKED
#ifdef DISCARD_ALPHA_TEXELS
    if (color.a < 1.0f)
    {
        discard;
    }
#else
    
    float alphaMaskValue =  0.5 ;
    if (color.a < alphaMaskValue)
    {
        discard;
    }
#endif
#endif

    
    float3 specularColor =  float3(0,0,0) ;
    
    float gloss =  0.0 ;
    float specPower = exp2(10 * gloss + 1);

    // Dynamic shadow
#ifndef DISABLE_SHADOWS
    float sunShadowMask = SampleShadowMap(SHADOW_MAP, interpolants.m_ShadowTC);
#ifdef ENABLE_BAKED_SHADOW
    float2 shdowMapUVs = interpolants.m_Texcoord.zw * BAKED_SHADOW_SCALE_AND_BIAS.xy;
    shdowMapUVs += BAKED_SHADOW_SCALE_AND_BIAS.zw;
    float4 bakedShadow = tex2D(BAKED_SHADOW, shdowMapUVs);
#else
    float4 bakedShadow = float4(1,1,1,1);
#endif

    sunShadowMask = min(sunShadowMask, bakedShadow.a);

    // the baked diffuse lighting from all point lights
    float3 pointLightInfo = bakedShadow.rgb;

#else   
#ifdef ENABLE_BAKED_SHADOW
    float2 shdowMapUVs = interpolants.m_Texcoord.zw * BAKED_SHADOW_SCALE_AND_BIAS.xy;
    shdowMapUVs += BAKED_SHADOW_SCALE_AND_BIAS.zw;
    float4 bakedShadow = tex2D(BAKED_SHADOW, shdowMapUVs);
    float sunShadowMask = bakedShadow.a;
    float3 pointLightInfo = bakedShadow.rgb;
#else
    float sunShadowMask = 1.0f;
    float3 pointLightInfo = float3(1,1,1);
#endif

#endif

    float3 diffuseReflection = float3(0,0,0);
    float3 specularReflection = float3(0,0,0);
    float3 sunLightCol = SUN_LIGHT_COLOR;
#ifdef CLOUD_SHADOWS
    #ifdef CLOUDS_NEED_UV
        float2 tc = interpolants.m_Clouds_TC.xy;
    #else
        float2 tc = interpolants.m_FoW_TC.xy;
    #endif

    float cloudStrengthR = tex2D(CLOUDS_TEXTURE, tc * CloudsScaleBias[0].xy + CloudsScaleBias[0].zw).r;
    float cloudStrengthG = tex2D(CLOUDS_TEXTURE, tc * CloudsScaleBias[1].xy + CloudsScaleBias[1].zw).g;
    float cloudStrengthB = tex2D(CLOUDS_TEXTURE, tc * CloudsScaleBias[2].xy + CloudsScaleBias[2].zw).b;
	float cloudStrength = saturate(cloudStrengthR + cloudStrengthG + cloudStrengthB);
	    sunLightCol = lerp(sunLightCol, CloudsSunColor, cloudStrength);
#endif
    float3 sunColor = sunLightCol * sunShadowMask;
    float sunDot = dot(worldNormal, SUN_LIGHT_DIRECTION);
    diffuseReflection += max(sunDot, 0.0f) * sunColor;

    // low quality mode gets no sun spec
#ifndef LOW_QUALITY_MODE
    // half vector
    float3 sunHalfAngle = normalize(SUN_LIGHT_DIRECTION_FOR_SPEC + viewDirection);
    float sunSpecularTerm = pow(abs(dot(worldNormal, sunHalfAngle)), specPower);
    sunSpecularTerm *= step(0.0f, sunDot);

    specularReflection += specularColor * sunColor * sunSpecularTerm;
#endif

    // add the diffuse contribution we baked    
    diffuseReflection += pointLightInfo * LIGHT_MAP_COLOR_SCALE;

    float4 var66 = Parameter3.xyzw; // Base_Color
    float3 var67 = var66.xyz; // Mask
    float4 var68 = tex2D(Diffuse_Texture, var0); // Diffuse_Texture
    float3 var69 = var67 * var68.x; // Multiply
    float var70 = Parameter1.w; // Emissive_Intensity
    float3 var71 = var69 * var70; // Multiply
    float4 var72 = tex2D(Diffuse_Texture, var49); // Diffuse_Texture
    float3 var73 = var67 * var72.x; // Multiply
    float3 var74 = var73 * var70; // Multiply
    
    #ifdef LOW_QUALITY_MODE
        float3 var75 =  var71;
    #else
        float3 var75 =  var74;
    #endif
    
    
    float3 emissiveColor = var75;

#ifdef NO_BAKED_LIGHTING

    // Dynamic shadow, no baked lighting
    // using the shadow color complement
#ifndef DISABLE_SHADOWS
    float3 shadowMask = SampleShadowMap(SHADOW_MAP, interpolants.m_ShadowTC)*SHADOW_COLOR_COMPLEMENT + SHADOW_COLOR; // i.e. lerp(SHADOW_COLOR, white, sampledValue)
    color.rgb *= shadowMask;
#endif

#else // NO_BAKED_LIGHTING
    color.rgb *= diffuseReflection;
    color.rgb += specularReflection;
#endif


#ifdef DISABLE_DEPTH_FOG
    // normally we have the fog modulate the emissive somewhat.
    // But if we turn off fog, we still want the emissive contribution
    color.rgb += emissiveColor;
#else
#ifndef LOW_QUALITY_MODE    
    float fStart = ENV_FOG_START_END_SCALE_EMISSIVE_REMAP.x;
    float fEnd = ENV_FOG_START_END_SCALE_EMISSIVE_REMAP.y;
    float fDist = smoothstep(fEnd, fStart, worldHeight);
    // these constants correct for the fact that the exponentional fog calcs don't actually get completely fogged or unfogged
    float fogFactor = saturate(((1.0f / exp(fDist * 2.0f)) - 0.13533528323) * 1.15651764274);
    float RMfogFactor = saturate(ENV_FOG_START_END_SCALE_EMISSIVE_REMAP.w * fogFactor - 1.0f);
    
    float3 fogColor = lerp(ENV_FOG_COLOR, ENV_FOG_ALT_COLOR, fogFactor);
    color.rgb = lerp(color.rgb, fogColor.rgb, fogFactor);
    color.rgb += emissiveColor * (1 - RMfogFactor);
#else
    float fStart = ENV_FOG_START_END_SCALE_EMISSIVE_REMAP.x;
    float fEnd = ENV_FOG_START_END_SCALE_EMISSIVE_REMAP.y;
    float fDist = smoothstep(fEnd, fStart, worldHeight);
    float RMfogFactor = saturate(fDist*fDist + ENV_FOG_START_END_SCALE_EMISSIVE_REMAP.z);

    float3 fogColor = lerp(ENV_FOG_ALT_COLOR, ENV_FOG_COLOR, fDist);
    color.rgb = lerp( fogColor.rgb,color.rgb, fDist);
    color.rgb += emissiveColor * RMfogFactor;
    //color.rgb += emissiveColor;
#endif   
#endif

    // Fog of war
#ifndef DISABLE_FOW
    #ifdef FOW_FADE_TO_FOGGED
        float4 fowFactors = GetFogOfWarFactorsWithFadeTowardFogged(interpolants.m_FoW_TC.xy, interpolants.m_FoW_TC.z);
    #else
        float4 fowFactors = GetFogOfWarFactorsWithFadeTowardClear(interpolants.m_FoW_TC.xy, interpolants.m_FoW_TC.z);
    #endif

    #ifdef PREMULTIPLIED_ALPHA
        // to deal with cases where we are using premultiplied alpha
        // we need to also multiply the fowFactors by alpha so we don't get
        // strange brightening on the edges
        fowFactors.rgb *= color.a;
    #endif
        // Blend between the computed color of this point on the map and the fog color.
        color.rgb = lerp(fowFactors.rgb, color.rgb, fowFactors.a);
#endif
    color.rgb = ApplyMipColorsVisualization(color.rgb, interpolants.m_Texcoord.xy);



    FRAGMENT fragment;
    fragment.m_Color0 = color;
   

#ifdef MRT_SUPPORTED
    
    float bloomAlphaOverride =  1.0f;

    #if defined(FEATURE_BLOOM) && !defined(LOW_QUALITY_MODE)
        float3 var76 = float3(0,0,0); // Float3Literal
        float4 var77 = Parameter4.xyzw; // Bloom_Color
        float3 var78 = var77.xyz; // Mask
        float var79 = Parameter2.w; // Bloom_Intensity
        float3 var80 = var78 * var79; // Multiply
        float3 var81 = var63 * var80; // Multiply
        
        #ifdef LOW_QUALITY_MODE
            float3 var82 =  var76;
        #else
            float3 var82 =  var81;
        #endif
        
        
        float3 bloomColor = var82;
        #ifndef DISABLE_DEPTH_FOG
            bloomColor *=  (1 - RMfogFactor);
        #endif
        fragment.m_BloomColor = float4(bloomColor, bloomAlphaOverride);
    #else
        fragment.m_BloomColor = float4(0,0,0, bloomAlphaOverride);
    #endif
#endif

#ifdef SHOW_LIGHTING
    fragment.m_Color0.rgb = diffuseReflection + specularReflection + emissiveColor;
#endif

#ifdef CAPTURE_DIFFUSE
    fragment.m_Color0 = baseColor;
#endif

#ifdef MRT_SUPPORTED
#ifdef IS_DX9
    fragment.m_DummyColorOutput = float4(0,0,0,0);
#endif
#endif

    

    return fragment;
}
