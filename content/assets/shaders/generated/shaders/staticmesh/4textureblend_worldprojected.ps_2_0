#include "DATA/Shaders/HLSL/FogOfWar/FogOfWar_PS.hls"
#include "DATA/Shaders/HLSL/ShadowMap/pcf1.hls"
#include "DATA/Shaders/HLSL/MipLevels.hls"

// Texture for dynamic shadows
sampler2D BAKED_SHADOW;
float4 BAKED_SHADOW_SCALE_AND_BIAS;
float3 MESH_CENTER;

#ifdef FEATURE_BAKED_PAINT
float4 BAKED_PAINT_UV_SCALE_BIAS;
#endif


#ifdef LOW_QUALITY_MODE
#undef CLOUD_SHADOWS
#endif

#if defined(CLOUD_SHADOWS) && defined(DISABLE_FOW)
#define CLOUDS_NEED_UV 1
#endif

#if !defined(NO_BAKED_LIGHTING)
#define ENABLE_BAKED_SHADOW
#endif

#if !defined(NO_BAKED_LIGHTING) || defined(FEATURE_BAKED_PAINT)
#define NEED_ATLAS_UVS 1
#endif


float4 Parameter0; // (Red_Blend_Power = Parameter0.x,Green_Blend_Power = Parameter0.y,Blue_Blend_Power = Parameter0.z,OV_Low = Parameter0.w) 
float4 Parameter1; // (OV_High = Parameter1.x,WS_Multiplier = Parameter1.y,Mid_Tiling = Parameter1.zw) 
sampler2D Middle_Texture;
sampler2D Top_Texture;
sampler2D Extras_Texture;
sampler2D Bottom_Texture;



/////////////////////////////////////////////////////////////////////////////////////
// Constants & Structures
/////////////////////////////////////////////////////////////////////////////////////
struct INTERPOLANTS
{
    float4 m_Position      : POSITION;
    // we only need the interpolant if the vertex color is used in the pixel shader
#ifdef FEATURE_VERTEX_COLOR
    float4 m_VertexColor : COLOR0;
#endif
    float4 m_WorldNormalAndHeight : TEXCOORD_INTERP;
#ifdef FEATURE_TANGENT
    float4 m_WorldTangent  : TEXCOORD_INTERP;
#endif
#ifdef NEED_ATLAS_UVS
    float4 m_Texcoord      : TEXCOORD_INTERP; // regular UVs in xy, atlas UVs in ZW
#else
    float2 m_Texcoord      : TEXCOORD_INTERP; // regular UVs in xy
#endif

#ifdef CLOUDS_NEED_UV
    float2 m_Clouds_TC     : TEXCOORD_INTERP;
#endif
#if !defined(LOW_QUALITY_MODE) || defined(FEATURE_WORLD_POSITION)
    float2 m_WorldPositionXZ : TEXCOORD_INTERP;
#endif
#ifndef DISABLE_SHADOWS
    float3 m_ShadowTC      : TEXCOORD_INTERP; //Dynamic shadow map texture coordinates.
#endif
#ifndef DISABLE_FOW
    float3 m_FoW_TC        : TEXCOORD_INTERP; //Fog of War texture coordinates.
#endif
#ifdef FEATURE_SCREENSPACE_UV
    float4 vScreenSpaceUV : TEXCOORD_INTERP;
#endif
    float4 interp_0 : TEXCOORD_INTERP;
float4 interp_1 : TEXCOORD_INTERP;
};

struct FRAGMENT
{
    float4  m_Color0 : COLOR0;
#ifdef MRT_SUPPORTED
#ifdef IS_DX9
    // Dummy slot for unused "CharacterInking". DX9 doesn't like have gaps in the MRT output
    float4 m_DummyColorOutput: COLOR1;
#endif
    float4 m_BloomColor : COLOR2; // the bloom color is always in slot 2 of the MRT. We don't write to slot 1
#endif
};

/////////////////////////////////////////////////////////////////////////////////////
// Shader
/////////////////////////////////////////////////////////////////////////////////////
FRAGMENT main(INTERPOLANTS interpolants)
{


#if defined(FEATURE_SCREENSPACE_UV)
    float3 screenSpacePerspDivide = interpolants.vScreenSpaceUV.xyz / interpolants.vScreenSpaceUV.w;
    float2 screenSpaceUV = screenSpacePerspDivide.xy;
    float screenSpaceDepth = screenSpacePerspDivide.z;
    screenSpaceUV *= 0.5f;
    screenSpaceUV += 0.5f;
#ifndef IS_OPENGL
    screenSpaceUV.y = 1.0f - screenSpaceUV.y;
#else
    // OpenGL clip space is -1 to 1 on Z but we want Z in in the 0-1 range to be
    // able to sample the depth texture if necessasry
    screenSpaceDepth = (screenSpaceDepth * 0.5f) + 0.5f;
#endif

#endif

#ifdef FEATURE_BAKED_PAINT
    // we set up this variable so node graphs can use the snippet for it
    float2 bakedTerrainPaintUVs = interpolants.m_Texcoord.zw * BAKED_PAINT_UV_SCALE_BIAS.xy;
    bakedTerrainPaintUVs += BAKED_PAINT_UV_SCALE_BIAS.zw;
#endif

    float2 defaultUVs = interpolants.m_Texcoord.xy;

    float3 worldNormalIn = normalize(interpolants.m_WorldNormalAndHeight.xyz);
    float worldHeight = interpolants.m_WorldNormalAndHeight.w;
#if !defined(LOW_QUALITY_MODE) || defined(FEATURE_WORLD_POSITION)
    float3 worldPosition = float3(interpolants.m_WorldPositionXZ.x, worldHeight, interpolants.m_WorldPositionXZ.y);
#endif
#ifdef FEATURE_VERTEX_COLOR
     float4 vColorIn0 = interpolants.m_VertexColor;
#endif

#ifdef FEATURE_TANGENT
    // plugging something into TANGENT_SPACE_NORMAL defines FEATURE_TANGENT
    
    float3 tangentSpaceNormal =  float3(0.0,0.0,1) ;

    float3 worldTangent = normalize(interpolants.m_WorldTangent.xyz);
    float3 worldBinormal = cross(worldNormalIn, worldTangent) * interpolants.m_WorldTangent.w;
    float3x3 tangentBasis = float3x3(worldTangent, worldBinormal, worldNormalIn);

    worldNormalIn = mul(tangentSpaceNormal, tangentBasis);

#endif
    
    float3 worldNormal =  worldNormalIn;



#ifndef LOW_QUALITY_MODE
    float3 viewDirection = normalize(vCamera - worldPosition);
#endif

    float4 var0;
    { // (TerrainBlendMap)
    float2 uvs = worldPosition.xz * TERRAIN_XFORM.xy + TERRAIN_XFORM.zw;
    float4 result = tex2D(TERRAIN_BLEND, uvs);
    
    var0 = result;
    }
    float var1 = var0.w; // Mask
    float4 var2 = float4(var1,var1,var1,var1); // Splat
    float2 var3 = interpolants.interp_0.xy; // EvaluateInVertexShader
    float4 var4 = tex2D(Middle_Texture, var3); // Middle_Texture
    float2 var5 = interpolants.interp_0.zw; // EvaluateInVertexShader
    float4 var6 = tex2D(Top_Texture, var5); // Top_Texture
    float2 var7 = float2(var4.w,var6.w); // Combine
    float2 var8 = interpolants.interp_1.xy; // EvaluateInVertexShader
    float4 var9 = tex2D(Extras_Texture, var8); // Extras_Texture
    float3 var10 = float3(var7.xy,var9.w); // Combine
    float4 var11;
    { // (TerrainBlendMap)
    float2 uvs = worldPosition.xz * TERRAIN_XFORM.xy + TERRAIN_XFORM.zw;
    float4 result = tex2D(TERRAIN_BLEND, uvs);
    
    var11 = result;
    }
    float var12 = 1; // FloatLiteral
    float4 var13 = var11 * var12; // Multiply
    float3 var14 = var13.xyz; // Mask
    float3 var15 = var10 * var14; // Multiply
    float var16 = 4; // FloatLiteral
    float3 var17 = var15 * var16; // Multiply
    float3 var18 = var17 + var14; // Add
    float3 var19 = float3(0.01,0.01,0.01); // Float3Literal
    float3 var20 = max(var18,var19); // max
    float3 var21 = float3(4,4,4); // Float3Literal
    float var22 = Parameter0.x; // Red_Blend_Power
    float var23 = Parameter0.y; // Green_Blend_Power
    float2 var24 = float2(var22,var23); // Combine
    float var25 = Parameter0.z; // Blue_Blend_Power
    float3 var26 = float3(var24.xy,var25); // Combine
    
    #ifdef LOW_QUALITY_MODE
        float3 var27 =  var21;
    #else
        float3 var27 =  var26;
    #endif
    
    float3 var28 = pow(var20,var27); // Pow
    float3 var29 = saturate(var28); // saturate
    float var30 = var29.z; // Mask
    float4 var31 = float4(var30,var30,var30,var30); // Splat
    float var32 = var29.y; // Mask
    float4 var33 = float4(var32,var32,var32,var32); // Splat
    float var34 = var29.x; // Mask
    float4 var35 = float4(var34,var34,var34,var34); // Splat
    float2 var36 = interpolants.interp_1.zw; // EvaluateInVertexShader
    float4 var37 = tex2D(Bottom_Texture, var36); // Bottom_Texture
    float4 var38 = lerp(var37, var4, var34); // Lerp
    float4 var39 = lerp(var38, var6, var32); // Lerp
    
    #if USE_TOP // STATIC_SWITCH: USE_TOP
        float4 var40 =  var39;
    #else
        float4 var40 =  var38;
    #endif
    
    float4 var41 = lerp(var40, var9, var30); // Lerp
    
    #if USE_EXTRAS // STATIC_SWITCH: USE_EXTRAS
        float4 var42 =  var41;
    #else
        float4 var42 =  var40;
    #endif
    
    
    #if SHOW_RED_MASK // STATIC_SWITCH: SHOW_RED_MASK
        float4 var43 =  var35;
    #else
        float4 var43 =  var42;
    #endif
    
    
    #if SHOW_GREEN_MASK // STATIC_SWITCH: SHOW_GREEN_MASK
        float4 var44 =  var33;
    #else
        float4 var44 =  var43;
    #endif
    
    
    #if SHOW_BLUE_MASK // STATIC_SWITCH: SHOW_BLUE_MASK
        float4 var45 =  var31;
    #else
        float4 var45 =  var44;
    #endif
    
    
    #if SHOW_PAINTED_A // STATIC_SWITCH: SHOW_PAINTED_A
        float4 var46 =  var2;
    #else
        float4 var46 =  var45;
    #endif
    
    float var47 = Parameter0.w; // OV_Low
    float3 var48 = float3(var47,var47,var47); // Splat
    float var49 = Parameter1.x; // OV_High
    float3 var50 = float3(var49,var49,var49); // Splat
    float3 var51 = float3(var1,var1,var1); // Splat
    float3 var52 = lerp(var48, var50, var51); // Lerp
    float3 var53;
    { // (Overlay)
    float3 base = var46.xyz;
    float3 blend = var52;
    float3 result = (base < 0.5 ? (2.0 * base * blend) : (1.0 - 2.0 * (1.0 - base) * (1.0 - blend)));
    var53 = result;
    }
    float var54 = 1; // FloatLiteral
    float4 var55 = float4(var53.xyz,var54); // Combine
    
    #if USE_A_AS_OVERLAY // STATIC_SWITCH: USE_A_AS_OVERLAY
        float4 var56 =  var55;
    #else
        float4 var56 =  var46;
    #endif
    
    
    #ifdef LOW_QUALITY_MODE
        float4 var57 =  var46;
    #else
        float4 var57 =  var56;
    #endif
    
    
    float4 color = var57;    
    
    color.a =  color.a ;
    float4 baseColor = color;

#ifdef FEATURE_MASKED
#ifdef DISCARD_ALPHA_TEXELS
    if (color.a < 1.0f)
    {
        discard;
    }
#else
    
    float alphaMaskValue =  0.5 ;
    if (color.a < alphaMaskValue)
    {
        discard;
    }
#endif
#endif

    
    float3 specularColor =  float3(0,0,0) ;
    
    float gloss =  0.0 ;
    float specPower = exp2(10 * gloss + 1);

    // Dynamic shadow
#ifndef DISABLE_SHADOWS
    float sunShadowMask = SampleShadowMap(SHADOW_MAP, interpolants.m_ShadowTC);
#ifdef ENABLE_BAKED_SHADOW
    float2 shdowMapUVs = interpolants.m_Texcoord.zw * BAKED_SHADOW_SCALE_AND_BIAS.xy;
    shdowMapUVs += BAKED_SHADOW_SCALE_AND_BIAS.zw;
    float4 bakedShadow = tex2D(BAKED_SHADOW, shdowMapUVs);
#else
    float4 bakedShadow = float4(1,1,1,1);
#endif

    sunShadowMask = min(sunShadowMask, bakedShadow.a);

    // the baked diffuse lighting from all point lights
    float3 pointLightInfo = bakedShadow.rgb;

#else   
#ifdef ENABLE_BAKED_SHADOW
    float2 shdowMapUVs = interpolants.m_Texcoord.zw * BAKED_SHADOW_SCALE_AND_BIAS.xy;
    shdowMapUVs += BAKED_SHADOW_SCALE_AND_BIAS.zw;
    float4 bakedShadow = tex2D(BAKED_SHADOW, shdowMapUVs);
    float sunShadowMask = bakedShadow.a;
    float3 pointLightInfo = bakedShadow.rgb;
#else
    float sunShadowMask = 1.0f;
    float3 pointLightInfo = float3(1,1,1);
#endif

#endif

    float3 diffuseReflection = float3(0,0,0);
    float3 specularReflection = float3(0,0,0);
    float3 sunLightCol = SUN_LIGHT_COLOR;
#ifdef CLOUD_SHADOWS
    #ifdef CLOUDS_NEED_UV
        float2 tc = interpolants.m_Clouds_TC.xy;
    #else
        float2 tc = interpolants.m_FoW_TC.xy;
    #endif

    float cloudStrengthR = tex2D(CLOUDS_TEXTURE, tc * CloudsScaleBias[0].xy + CloudsScaleBias[0].zw).r;
    float cloudStrengthG = tex2D(CLOUDS_TEXTURE, tc * CloudsScaleBias[1].xy + CloudsScaleBias[1].zw).g;
    float cloudStrengthB = tex2D(CLOUDS_TEXTURE, tc * CloudsScaleBias[2].xy + CloudsScaleBias[2].zw).b;
	float cloudStrength = saturate(cloudStrengthR + cloudStrengthG + cloudStrengthB);
	    sunLightCol = lerp(sunLightCol, CloudsSunColor, cloudStrength);
#endif
    float3 sunColor = sunLightCol * sunShadowMask;
    float sunDot = dot(worldNormal, SUN_LIGHT_DIRECTION);
    diffuseReflection += max(sunDot, 0.0f) * sunColor;

    // low quality mode gets no sun spec
#ifndef LOW_QUALITY_MODE
    // half vector
    float3 sunHalfAngle = normalize(SUN_LIGHT_DIRECTION_FOR_SPEC + viewDirection);
    float sunSpecularTerm = pow(abs(dot(worldNormal, sunHalfAngle)), specPower);
    sunSpecularTerm *= step(0.0f, sunDot);

    specularReflection += specularColor * sunColor * sunSpecularTerm;
#endif

    // add the diffuse contribution we baked    
    diffuseReflection += pointLightInfo * LIGHT_MAP_COLOR_SCALE;

    
    float3 emissiveColor =  float3(0,0,0) ;

#ifdef NO_BAKED_LIGHTING

    // Dynamic shadow, no baked lighting
    // using the shadow color complement
#ifndef DISABLE_SHADOWS
    float3 shadowMask = SampleShadowMap(SHADOW_MAP, interpolants.m_ShadowTC)*SHADOW_COLOR_COMPLEMENT + SHADOW_COLOR; // i.e. lerp(SHADOW_COLOR, white, sampledValue)
    color.rgb *= shadowMask;
#endif

#else // NO_BAKED_LIGHTING
    color.rgb *= diffuseReflection;
    color.rgb += specularReflection;
#endif


#ifdef DISABLE_DEPTH_FOG
    // normally we have the fog modulate the emissive somewhat.
    // But if we turn off fog, we still want the emissive contribution
    color.rgb += emissiveColor;
#else
#ifndef LOW_QUALITY_MODE    
    float fStart = ENV_FOG_START_END_SCALE_EMISSIVE_REMAP.x;
    float fEnd = ENV_FOG_START_END_SCALE_EMISSIVE_REMAP.y;
    float fDist = smoothstep(fEnd, fStart, worldHeight);
    // these constants correct for the fact that the exponentional fog calcs don't actually get completely fogged or unfogged
    float fogFactor = saturate(((1.0f / exp(fDist * 2.0f)) - 0.13533528323) * 1.15651764274);
    float RMfogFactor = saturate(ENV_FOG_START_END_SCALE_EMISSIVE_REMAP.w * fogFactor - 1.0f);
    
    float3 fogColor = lerp(ENV_FOG_COLOR, ENV_FOG_ALT_COLOR, fogFactor);
    color.rgb = lerp(color.rgb, fogColor.rgb, fogFactor);
    color.rgb += emissiveColor * (1 - RMfogFactor);
#else
    float fStart = ENV_FOG_START_END_SCALE_EMISSIVE_REMAP.x;
    float fEnd = ENV_FOG_START_END_SCALE_EMISSIVE_REMAP.y;
    float fDist = smoothstep(fEnd, fStart, worldHeight);
    float RMfogFactor = saturate(fDist*fDist + ENV_FOG_START_END_SCALE_EMISSIVE_REMAP.z);

    float3 fogColor = lerp(ENV_FOG_ALT_COLOR, ENV_FOG_COLOR, fDist);
    color.rgb = lerp( fogColor.rgb,color.rgb, fDist);
    color.rgb += emissiveColor * RMfogFactor;
    //color.rgb += emissiveColor;
#endif   
#endif

    // Fog of war
#ifndef DISABLE_FOW
    #ifdef FOW_FADE_TO_FOGGED
        float4 fowFactors = GetFogOfWarFactorsWithFadeTowardFogged(interpolants.m_FoW_TC.xy, interpolants.m_FoW_TC.z);
    #else
        float4 fowFactors = GetFogOfWarFactorsWithFadeTowardClear(interpolants.m_FoW_TC.xy, interpolants.m_FoW_TC.z);
    #endif

    #ifdef PREMULTIPLIED_ALPHA
        // to deal with cases where we are using premultiplied alpha
        // we need to also multiply the fowFactors by alpha so we don't get
        // strange brightening on the edges
        fowFactors.rgb *= color.a;
    #endif
        // Blend between the computed color of this point on the map and the fog color.
        color.rgb = lerp(fowFactors.rgb, color.rgb, fowFactors.a);
#endif
    color.rgb = ApplyMipColorsVisualization(color.rgb, interpolants.m_Texcoord.xy);



    FRAGMENT fragment;
    fragment.m_Color0 = color;
   

#ifdef MRT_SUPPORTED
    
    float bloomAlphaOverride =  1.0f;

    #if defined(FEATURE_BLOOM) && !defined(LOW_QUALITY_MODE)
        
        float3 bloomColor =  float3(0,0,0) ;
        #ifndef DISABLE_DEPTH_FOG
            bloomColor *=  (1 - RMfogFactor);
        #endif
        fragment.m_BloomColor = float4(bloomColor, bloomAlphaOverride);
    #else
        fragment.m_BloomColor = float4(0,0,0, bloomAlphaOverride);
    #endif
#endif

#ifdef SHOW_LIGHTING
    fragment.m_Color0.rgb = diffuseReflection + specularReflection + emissiveColor;
#endif

#ifdef CAPTURE_DIFFUSE
    fragment.m_Color0 = baseColor;
#endif

#ifdef MRT_SUPPORTED
#ifdef IS_DX9
    fragment.m_DummyColorOutput = float4(0,0,0,0);
#endif
#endif

    

    return fragment;
}
