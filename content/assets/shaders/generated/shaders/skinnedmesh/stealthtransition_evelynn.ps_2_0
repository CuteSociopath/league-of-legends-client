#ifndef GENERATE_SHADOW_MAP
#include "DATA/Shaders/HLSL/DeathScreen.hls"
#include "DATA/Shaders/HLSL/FogOfWar/FogOfWar_PS.hls"
#include "DATA/Shaders/HLSL/Lighting/LightGrid.hls"
#include "DATA/Shaders/HLSL/MipLevels.hls"
#include "DATA/Shaders/HLSL/Transition/Transition.hls"
#endif
#ifdef LOW_QUALITY_MODE
    #define NO_LIGHTING
    #define DISABLE_SHADOWS
    #ifndef FORCE_FOW
        #define DISABLE_FOW
    #endif
    #undef FOG_PIXELSHADER_BLEND
#endif

float4 Parameter0; // (maskAlphaIntensity = Parameter0.x,ShadowFresnel = Parameter0.y,Overlay_Value = Parameter0.z,Brightness = Parameter0.w) 
float4 Parameter1; // (DesaturationAmount = Parameter1.x,Hair_Fresnel_Min = Parameter1.y,Hair_Fresnel_Max = Parameter1.z,Bloom_Intensity = Parameter1.w) 
float4 Parameter2; // (Hair_Fresnel_Color = Parameter2.xyzw) 
sampler2D ShadowTexture;
sampler2D MaskTexture;
sampler2D DiffuseTexture;


#include "DATA/Shaders/HLSL/ShadowMap/pcf1.hls"

#if defined(MRT_SUPPORTED) && !defined(GENERATE_SHADOW_MAP)
#define WRITE_MRT 1
#endif

struct FRAGMENT
{
    float4  m_Color0 : COLOR0;
#ifdef WRITE_MRT
    float4  m_Color1 : COLOR1;

#ifndef LOW_QUALITY_MODE
    float4  m_BloomColor : COLOR2;
#endif

#endif
};

struct INTERPOLANTS
{
    float4  position        : POSITION;
#ifndef NO_LIGHTING
    float4  lightingColor        : COLOR0;
#endif
#if defined(FEATURE_VERTEX_COLOR)
   float4  vertexColor       : TEXCOORD_INTERP;
#elif defined(FEATURE_TANGENT)
   float4  worldTanget  : TEXCOORD_INTERP;
#elif defined(FEATURE_SCREENSPACE_UV)
   float4  screenSpaceUV : TEXCOORD_INTERP;
#endif
#if defined(FOG_PIXELSHADER_BLEND) && !defined(FULLBRIGHT) && !defined(NO_LIGHTING) && defined(MOD2X_COLORMAP) && !defined(GENERATE_SHADOW_MAP)
   float4  uv1             : TEXCOORD_INTERP;
#else
   float2  uv1             : TEXCOORD_INTERP;
#endif
#ifndef GENERATE_SHADOW_MAP
   float2  worldXZ    : TEXCOORD_INTERP;
#else
   float   depth        : TEXCOORD_INTERP;
#endif
#if defined(FEATURE_WORLD_NORMAL)
   float3  worldNormal  : TEXCOORD_INTERP;
#endif
#if defined(WRITE_MRT) || defined(FEATURE_WORLD_POSITION)
   float3  worldPosition   : TEXCOORD_INTERP;
#endif
#ifndef DISABLE_SHADOWS
   float3  shadowMapUV            : TEXCOORD_INTERP;
#endif
  
};

///////////////////////////////////////////////////////////////////////////////////////
///
///
///
///////////////////////////////////////////////////////////////////////////////////////
FRAGMENT main(INTERPOLANTS interpolants)
{
    float2 defaultUVs = interpolants.uv1.xy;


#if defined(FEATURE_SCREENSPACE_UV)
    float2 screenSpaceUV = interpolants.screenSpaceUV.xy / interpolants.screenSpaceUV.w;
    screenSpaceUV *= 0.5f;
    screenSpaceUV += 0.5f;
#endif

#if defined(FEATURE_WORLD_NORMAL)
    float3 worldNormal = normalize(interpolants.worldNormal);
#endif

#if defined(FEATURE_WORLD_POSITION)
    float3 worldPosition = interpolants.worldPosition;
#endif

#if defined(FEATURE_VERTEX_COLOR)
    float4 vColorIn0 = interpolants.vertexColor;
#endif


#ifdef FEATURE_TANGENT
    // plugging something into TANGENT_SPACE_NORMAL defines FEATURE_TANGENT
    
    float3 tangentSpaceNormal =  float3(0.0,0.0,1) ;

    float3 worldTangent = normalize(interpolants.worldTanget.xyz);
    // use the w component orientation factor (+/- 1) to set TBN frame handedness
    float3 worldBinormal = cross(worldNormal, worldTangent) * interpolants.worldTanget.w;
    float3x3 tangentBasis = float3x3(worldTangent, worldBinormal, worldNormal);

    worldNormal = mul(tangentSpaceNormal, tangentBasis);
#endif

    // Calculate Texture Diffuse color
    float2 var0;
    { // (UVCoord)
    float2 result = defaultUVs;
    var0 = result;
    }
    float4 var1 = tex2D(ShadowTexture, var0); // ShadowTexture
    float4 var2 = tex2D(MaskTexture, var0); // MaskTexture
    float var3 = Parameter0.x; // maskAlphaIntensity
    float var4 = var2.x * var3; // Multiply
    float var5 = saturate(var4); // saturate
    float var6 = Parameter0.y; // ShadowFresnel
    float3 var7;
    { // (EyeVector)
    float3 result = normalize( vCamera - worldPosition );
    var7 = result;
    }
    float3 var8;
    { // (WorldNormal)
    float3 result = worldNormal;
    var8 = result;
    }
    float var9 = dot(var7,var8); // Dot
    float var10 = pow(var6,var9); // Pow
    float var11 = saturate(var10); // saturate
    float var12 = var5 + var11; // Add
    float4 var13 = float4(var1.xyz,var12); // Combine
    float4 var14 = tex2D(DiffuseTexture, var0); // DiffuseTexture
    float var15 = 1; // FloatLiteral
    float4 var16 = float4(var14.xyz,var15); // Combine
    float3 var17 = var16.xyz; // Mask
    float var18 = Parameter0.z; // Overlay_Value
    float2 var19 = float2(var18,var18); // Combine
    float3 var20 = float3(var19.xy,var18); // Combine
    float3 var21 = var17 * var20; // Multiply
    float3 var22;
    { // (Overlay)
    float3 base = var16.xyz;
    float3 blend = var20;
    float3 result = (base < 0.5 ? (2.0 * base * blend) : (1.0 - 2.0 * (1.0 - base) * (1.0 - blend)));
    var22 = result;
    }
    
    #ifdef LOW_QUALITY_MODE
        float3 var23 =  var21;
    #else
        float3 var23 =  var22;
    #endif
    
    float var24 = Parameter0.w; // Brightness
    float3 var25 = var23 * var24; // Multiply
    float3 var26 = float3(0.3,0.59,0.11); // Float3Literal
    float var27 = dot(var25,var26); // Dot
    float var28 = Parameter1.x; // DesaturationAmount
    float3 var29 = lerp(float3(var27,var27,var27), var25, var28); // Lerp
    float4 var30 = lerp(var16, float4(var29, 1.0f), var2.y); // Lerp
    float var31 = Parameter1.y; // Hair_Fresnel_Min
    float var32 = Parameter1.z; // Hair_Fresnel_Max
    float3 var33;
    { // (EyeVector)
    float3 result = normalize( vCamera - worldPosition );
    var33 = result;
    }
    float3 var34;
    { // (WorldNormal)
    float3 result = worldNormal;
    var34 = result;
    }
    float var35 = dot(var33,var34); // Dot
    float var36;
    { // (simpleRemap)
    float input = var35;
    float result = ( input + 1 ) * 0.5;
    var36 = result;
    }
    float var37 = smoothstep(var31, var32, var36); // smoothstep
    float var38;
    { // (OneMinus)
    float input =var37;
    float result = 1.0f - input;
    var38 = result;
    }
    float var39 = var2.z * var38; // Multiply
    float4 var40 = Parameter2.xyzw; // Hair_Fresnel_Color
    float4 var41 = var39 * var40; // Multiply
    float4 var42 = float4(var41.xyz,var40.w); // Combine
    float4 var43 = lerp(var30, var42, var39); // Lerp
    
    #if SHADOW_FORM // STATIC_SWITCH: SHADOW_FORM
        float4 var44 =  var13;
    #else
        float4 var44 =  var43;
    #endif
    
    
    float4 texelDiffuse = var44;
    
    texelDiffuse.a =  texelDiffuse.a ;
    if (texelDiffuse.a == 0.0)
    {
        discard;
    }

    // Return fragment
    FRAGMENT fragment;

#ifdef GENERATE_SHADOW_MAP
#ifdef FEATURE_SHADOW
    
    float shadowClip =  1.0f ;
    if (shadowClip <= 0.0)
    {
        discard;
    }
#endif

    fragment.m_Color0 = float4(packDepthToVec3(interpolants.depth), 0.0f);

#else

    
    float emissiveFactor =  0.0f ;

#ifndef NO_LIGHTING
    #ifndef USE_LIGHT_GRID
            float4 incidentSunLight = float4(interpolants.lightingColor.rgb,1);

        #ifndef DISABLE_SHADOWS
            // Modulate the incident sun light by the shadow
            int shadowSamples = 1;

            float shadowMask = saturate(SampleShadowMap(SHADOW_MAP, interpolants.shadowMapUV)+0.4f);
            incidentSunLight *= shadowMask;
        #endif

            // Sum the incident sun light with contributions from environmental and ambient
            float4 incidentLight = incidentSunLight + AMBIENT_COLOR;
    #else
        float4 incidentLight = float4(interpolants.lightingColor.rgb,1);
    #endif

        float diffuseFactor = saturate(1.f - emissiveFactor);   /// Amount of color which is diffuse

    #if defined(FULLBRIGHT) //handle the fullbright debug visualization.
        float4 lighting = 1.0f;
    #elif defined(USE_LIGHT_GRID)
        #if defined(SHOW_LIGHTING)
            float lightScale = 1.0f;
        #else
            float lightScale = LightGridTextureScale();
        #endif
        float4 lighting = saturate(diffuseFactor * incidentLight * lightScale + emissiveFactor + LightGridFullBrightScale() * float4(SELF_ILLUMINATION, 0.f));
    #else
        float4 lighting = saturate(diffuseFactor * incidentLight + emissiveFactor + float4(SELF_ILLUMINATION, 0.f));
    #endif

#else // NO_LIGHTING
    float4 lighting = 1.0f;
#endif // NO_LIGHTING

    // Compute albedo / final color using a combination of diffuse and emissive values
    float4 finalColor = texelDiffuse * lighting;
    finalColor.a = texelDiffuse.a;

    // Add any post lighting inputs including emissive
    
    float3 emissiveColor =  float3(0,0,0) ;

#if !defined(DEPTH_FOG)
    // if not using depth fog, we want to add the emissive term
    // before doing the transition calculations.
    // We use depth fog on level props rather than playable characters
    // and we don't need to support transitions on those.
    finalColor.rgb += emissiveColor;
#endif

    finalColor = ApplyTransition(finalColor, lighting.rgb, interpolants.uv1.xy);
    finalColor.a *= kGrassFade.a; // apply any global alpha factor (e.g., the fading associated with being in the grass)

#if defined(DEPTH_FOG)
    #if !defined(LOW_QUALITY_MODE) && defined(WRITE_MRT)
        float fStart = ENV_FOG_START_END_SCALE_EMISSIVE_REMAP.x;
        float fEnd = ENV_FOG_START_END_SCALE_EMISSIVE_REMAP.y;
        float fDist = smoothstep(fEnd, fStart, interpolants.worldPosition.y);
        // these constants correct for the fact that the exponentional fog calcs don't actually get completely fogged or unfogged
        float fogFactor = saturate(((1.0f / exp(fDist * 2.0f)) - 0.13533528323) * 1.15651764274);
        float RMfogFactor = saturate(ENV_FOG_START_END_SCALE_EMISSIVE_REMAP.w * fogFactor - 1.0f);
        
        float3 fogColor = lerp(ENV_FOG_COLOR, ENV_FOG_ALT_COLOR, fogFactor);
        finalColor.rgb = lerp(finalColor.rgb, fogColor.rgb, fogFactor);
        finalColor.rgb += emissiveColor * (1 - RMfogFactor); 
    #else
        finalColor.rgb += emissiveColor;
    #endif
#endif

    #if !defined(DISABLE_FOW) && !defined(FULLBRIGHT)
        float4 fowFactors = GetFogOfWarFactors(interpolants.worldXZ.xy);
        finalColor.rgb = lerp(fowFactors.rgb, finalColor.rgb, fowFactors.a);
    #endif

    #if defined(FOG_PIXELSHADER_BLEND) && !defined(FULLBRIGHT) && !defined(NO_LIGHTING)

        //modify the fog color based on the fog of war...
        float4 fogColorPSBlend = tex2D(FOGLIGHTING, interpolants.worldXZ.xy);
        #ifndef DISABLE_FOW
            fogColorPSBlend = lerp(fowFactors, fogColorPSBlend, fowFactors.a);
        #endif
        float fogOpacity = interpolants.lightingColor.a;
        #ifdef MOD2X_COLORMAP
            float colorMapOpacity = tex2D(COLORMAP, interpolants.uv1.zw).a;
            fogOpacity = saturate( fogOpacity*colorMapOpacity*2.0f );
        #endif

        finalColor.rgb = lerp( finalColor, fogColorPSBlend, fogOpacity ).rgb;
    #endif


#if SKINNED_MATERIAL_ADDITIVE
    finalColor.rgb *= kGrassFade.a;
#endif

    fragment.m_Color0 = finalColor;

#ifdef WRITE_MRT

    float3 delta = vCamera.xyz - interpolants.worldPosition.xyz;
    float dist = DEPTH_SCALE_OFFSET.x * (length(delta) + DEPTH_SCALE_OFFSET.y); 
    // we scale bloom strength by output alpha
    float4 out_color1 = float4(dist*OUTLINE_MOD.x, OUTLINE_MOD.x, 0.0f, 1.f);
    
    //  This has the effect of thinning and lightening the outline as the fog gets more opaque.
    //However the outline never completely disappears, which is desirable in order to make 
    //characters easier to see even in foggy conditions.
    //  In this way the outline can be affected by the fog (it looks terrible otherwise) but 
    //without effecting the outline pass or drastically effecting performance.
#if defined(FOG_PIXELSHADER_BLEND) && !defined(FULLBRIGHT) && !defined(NO_LIGHTING)
    out_color1.xy = lerp(out_color1.xy, 4.0f, fogOpacity);
#endif

    fragment.m_Color1 = out_color1;

#ifndef LOW_QUALITY_MODE
    #ifdef FEATURE_BLOOM

        float3 var45 = float3(0,0,0); // Float3Literal
        float3 var46 = var29 * var2.y; // Multiply
        float var47 = Parameter1.w; // Bloom_Intensity
        float3 var48 = var46 * var47; // Multiply
        
        #ifdef LOW_QUALITY_MODE
            float3 var49 =  var45;
        #else
            float3 var49 =  var48;
        #endif
        
        
        float3 bloomColor = var49;
        float4 finalBloom = ApplyTransitionToColor(float4(bloomColor * finalColor.a, 1.0f),
                                                   float4(0,0,0,1),
                                                   interpolants.uv1.xy);
        fragment.m_BloomColor = finalBloom;
    #else
        fragment.m_BloomColor = float4(0,0,0,1);
    #endif
#endif

#endif    


    //Editor / Debugging features.    
    #if defined(SHOW_LIGHTING)
        #if defined(USE_LIGHT_GRID)
            fragment.m_Color0.rgb = lighting;
        #else
            fragment.m_Color0.rgb = lighting*0.25f;
        #endif
    #elif defined(GRAYSCALE)
        float3 LUMINANCE_CONVERSION = float3(0.299f, 0.587f, 0.114f);
        fragment.m_Color0.rgb = dot( fragment.m_Color0.rgb, LUMINANCE_CONVERSION );
    #endif

    fragment.m_Color0.rgb = ApplyMipColorsVisualization(fragment.m_Color0.rgb, interpolants.uv1.xy);
#endif

    

    return fragment;
}
