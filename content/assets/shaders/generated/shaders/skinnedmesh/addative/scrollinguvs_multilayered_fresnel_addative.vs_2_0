#include "DATA/Shaders/HLSL/SkinnedMesh/IOParam/IODefine_VS.hls"
#include "DATA/Shaders/HLSL/Fog/Fog.hls"
#include "DATA/Shaders/HLSL/FogOfWar/FogOfWar_VS.hls"
#include "DATA/Shaders/HLSL/Lighting/Lighting.hls"
#include "DATA/Shaders/HLSL/SkinnedMesh/skinning.hls"

#ifdef LOW_QUALITY_MODE
    #define NO_LIGHTING
    #define DISABLE_SHADOWS
    #undef FOG_PIXELSHADER_BLEND
#endif

#if defined(MRT_SUPPORTED) && !defined(GENERATE_SHADOW_MAP)
#define WRITE_MRT 1
#endif


float3 Parameter3; // (Bloom_Intensity = Parameter3.x,Green_Scale = Parameter3.yz) 
float4 Parameter4; // (Green_Scrollrate = Parameter4.xy,Blue_Scale = Parameter4.zw) 
float4 Parameter5; // (Blue_Scrollrate = Parameter5.xy,Red_Scale = Parameter5.zw) 
float2 Parameter6; // (Red_Scrollrate = Parameter6.xy) 


struct VERTEX
{
    float3      vPos                : X3D_VSIN_POSITION;
    float4      vBlendWeight        : X3D_VSIN_BLENDWEIGHT;
    float3      vNormal             : X3D_VSIN_NORMAL;
#if defined(FEATURE_VERTEX_COLOR_VS) || defined(FEATURE_VERTEX_COLOR)
    float4      vColorIn0           : X3D_VSIN_COLOR0;
#endif
    blendindex4 vBlendIndices       : X3D_VSIN_BLENDINDICES;
    float2      vUV1                : X3D_VSIN_TEXCOORD0;
#ifdef FEATURE_TANGENT
   float4      vTangent            : X3D_VSIN_TEXCOORD6;
#endif
};

struct INTERPOLANTS
{
    float4  position        : POSITION;
#ifndef NO_LIGHTING
    float4  lightingColor        : COLOR0;
#endif
#if defined(FEATURE_VERTEX_COLOR)
   float4  vertexColor       : TEXCOORD_INTERP;
#elif defined(FEATURE_TANGENT)
   float4  worldTanget  : TEXCOORD_INTERP;
#elif defined(FEATURE_SCREENSPACE_UV)
   float4  screenSpaceUV : TEXCOORD_INTERP;
#endif
#if defined(FOG_PIXELSHADER_BLEND) && !defined(FULLBRIGHT) && !defined(NO_LIGHTING) && defined(MOD2X_COLORMAP) && !defined(GENERATE_SHADOW_MAP)
   float4  uv1             : TEXCOORD_INTERP;
#else
   float2  uv1             : TEXCOORD_INTERP;
#endif
#ifndef GENERATE_SHADOW_MAP
   float2  worldXZ    : TEXCOORD_INTERP;
#else
   float   depth        : TEXCOORD_INTERP;
#endif
#if defined(FEATURE_WORLD_NORMAL)
   float3  worldNormal  : TEXCOORD_INTERP;
#endif
#if defined(WRITE_MRT) || defined(FEATURE_WORLD_POSITION)
   float3  worldPosition   : TEXCOORD_INTERP;
#endif
#ifndef DISABLE_SHADOWS
   float3  shadowMapUV            : TEXCOORD_INTERP;
#endif
  float4 interp_0 : TEXCOORD_INTERP;
float2 interp_1 : TEXCOORD_INTERP;
};

/////////////////////////////////////////////////////////////////////////////////////
///
///
///
/////////////////////////////////////////////////////////////////////////////////////
INTERPOLANTS main(VERTEX vertex)
{
    INTERPOLANTS interpolants;

    float2 defaultUVs = vertex.vUV1;

#if EXPERIMENTAL_UNPACK_VERTS
    UnpackAttributes(vertex.vBlendWeight, vertex.vNormal, vertex.vUV1);     // unpack fixed point attributes
#endif
#if defined(FEATURE_VERTEX_COLOR_VS) || defined(FEATURE_VERTEX_COLOR)
    float4 vColorIn0 = vertex.vColorIn0;
#endif

    float4 localPosition = float4(vertex.vPos, 1.0f);

    float3 worldPosition;
    float3 worldNormal;
    float3 worldTangent;
#ifndef NO_SKINNING
 #if defined(FEATURE_TANGENT)
    SkinPositionAndTBN(vertex.vPos, vertex.vNormal, vertex.vTangent, vertex.vBlendIndices, vertex.vBlendWeight, worldPosition, worldNormal, worldTangent);
 #else
    SkinPositionAndNormal(vertex.vPos, vertex.vNormal, vertex.vBlendIndices, vertex.vBlendWeight, worldPosition, worldNormal);
 #endif
#else
    worldPosition = mul(float4(vertex.vPos, 1.f), BONES[0]);
    worldNormal = mul(float4(vertex.vNormal, 0.f), BONES[0]);
 #if defined(FEATURE_TANGENT)
    worldTangent = mul(float4(vertex.vTangent, 0.f), BONES[0]);
 #endif
#endif

    
    worldPosition +=  float3(0,0,0) ;

#if defined(FEATURE_WORLD_NORMAL) || defined(FEATURE_TANGENT)
    interpolants.worldNormal = worldNormal;
#endif
#if defined(FEATURE_TANGENT)
    interpolants.worldTangent = float4(worldTangent, vTangent.w);    // propagate the handedness orientation factor in w so we can correctly orient the TBN frame
#endif

#if defined(FEATURE_VERTEX_COLOR)
    interpolants.vertexColor = vertex.vColorIn0;
#endif


#if defined(WRITE_MRT) || defined(FEATURE_WORLD_POSITION)
    // Output world position
    interpolants.worldPosition.xyz = worldPosition.xyz;
#endif

    // Output homogeneous position
    interpolants.position = mul(float4(worldPosition.xyz, 1.0f), mProj);

    // Output texture coordinate using texture transform. Optimizes out
    // if not used
    
    float4 uvScaleAndOffset =  float4(1, 1, 0, 0);
    interpolants.uv1.xy = vertex.vUV1 * uvScaleAndOffset.xy + uvScaleAndOffset.zw;


#ifndef DISABLE_SHADOWS
    // Output shadow position
    interpolants.shadowMapUV = mul(float4(worldPosition.xyz, 1.0f), mShadowProj).xyz;
#endif

#ifndef NO_LIGHTING
    #ifdef USE_LIGHT_GRID
        float3 lighting = LightingLightGrid(worldNormal);
    #else
        float3 lighting = LightingSunLight(worldNormal);
    #endif
    interpolants.lightingColor = float4(lighting,0);
#endif

#ifdef GENERATE_SHADOW_MAP
    interpolants.depth = interpolants.position.z;
#ifdef IS_OPENGL
    // fix the depth into the 0-1 range for OpenGL
    interpolants.depth = (interpolants.depth * 0.5f) + 0.5f;
#endif

#else
    // Fog of war
    interpolants.worldXZ.xy = FogOfWarTextureCoordinates(worldPosition.xyz).xy;
#endif

    //Vertex fog.
#if defined(FOG_PIXELSHADER_BLEND) && !defined(FULLBRIGHT) && !defined(NO_LIGHTING) && defined(MOD2X_COLORMAP) && !defined(GENERATE_SHADOW_MAP)
    interpolants.uv1.zw = interpolants.worldXZ.xy;
    interpolants.uv1.w = 1.0f - interpolants.uv1.w;
    interpolants.lightingColor.a = 1.0f - ComputeFogValue(interpolants.position, worldPosition.xyz);
#endif

#if defined(FEATURE_SCREENSPACE_UV)
    interpolants.screenSpaceUV = interpolants.position;
#endif

    float2 var38;
    { // (UVCoord)
    float2 result = defaultUVs;
    var38 = result;
    }
    float2 var39 = Parameter3.yz; // Green_Scale
    float2 var40 = var38 * var39; // Multiply
    float4 var41 = TIME; // Time
    float2 var42 = Parameter4.xy; // Green_Scrollrate
    float2 var43;
    { // (Panner)
    float2 uvInput = var40;
    float time = var41.x;
    float2 speed = var42;
    float2 scroll = float2( ( time * speed.x + uvInput.x ), ( time * speed.y + uvInput.y ));
    float2 result = scroll;
    var43 = result;
    }
    interpolants.interp_0.xy = var43;
    float2 var44 = Parameter4.zw; // Blue_Scale
    float2 var45 = var38 * var44; // Multiply
    float2 var46 = Parameter5.xy; // Blue_Scrollrate
    float2 var47;
    { // (Panner)
    float2 uvInput = var45;
    float time = var41.x;
    float2 speed = var46;
    float2 scroll = float2( ( time * speed.x + uvInput.x ), ( time * speed.y + uvInput.y ));
    float2 result = scroll;
    var47 = result;
    }
    interpolants.interp_0.zw = var47;
    float2 var48 = Parameter5.zw; // Red_Scale
    float2 var49 = var38 * var48; // Multiply
    float2 var50 = Parameter6.xy; // Red_Scrollrate
    float2 var51;
    { // (Panner)
    float2 uvInput = var49;
    float time = var41.x;
    float2 speed = var50;
    float2 scroll = float2( ( time * speed.x + uvInput.x ), ( time * speed.y + uvInput.y ));
    float2 result = scroll;
    var51 = result;
    }
    interpolants.interp_1.xy = var51;
    
    

    return interpolants;

}
