#include "DATA/Shaders/HLSL/SkinnedMesh/IOParam/IODefine_VS.hls"
#include "DATA/Shaders/HLSL/Fog/Fog.hls"
#include "DATA/Shaders/HLSL/FogOfWar/FogOfWar_VS.hls"
#include "DATA/Shaders/HLSL/Lighting/Lighting.hls"
#include "DATA/Shaders/HLSL/SkinnedMesh/skinning.hls"

#ifdef LOW_QUALITY_MODE
    #define NO_LIGHTING
    #define DISABLE_SHADOWS
    #undef FOG_PIXELSHADER_BLEND
#endif

#if defined(MRT_SUPPORTED) && !defined(GENERATE_SHADOW_MAP)
#define WRITE_MRT 1
#endif


float4 Parameter0; // (WobbleScale = Parameter0.x,WobbleSpeed = Parameter0.y,WobbleSize = Parameter0.z,Vertex_Mult = Parameter0.w) 
float4 Parameter2; // (Green_UVScale = Parameter2.xy,Green_ScrollSpeed = Parameter2.zw) 
float4 Parameter5; // (DistortUVScale = Parameter5.xy,DistortScrollSpeed = Parameter5.zw) 


struct VERTEX
{
    float3      vPos                : X3D_VSIN_POSITION;
    float4      vBlendWeight        : X3D_VSIN_BLENDWEIGHT;
    float3      vNormal             : X3D_VSIN_NORMAL;
#if defined(FEATURE_VERTEX_COLOR_VS) || defined(FEATURE_VERTEX_COLOR)
    float4      vColorIn0           : X3D_VSIN_COLOR0;
#endif
    blendindex4 vBlendIndices       : X3D_VSIN_BLENDINDICES;
    float2      vUV1                : X3D_VSIN_TEXCOORD0;
#ifdef FEATURE_TANGENT
   float4      vTangent            : X3D_VSIN_TEXCOORD6;
#endif
};

struct INTERPOLANTS
{
    float4  position        : POSITION;
#ifndef NO_LIGHTING
    float4  lightingColor        : COLOR0;
#endif
#if defined(FEATURE_VERTEX_COLOR)
   float4  vertexColor       : TEXCOORD_INTERP;
#elif defined(FEATURE_TANGENT)
   float4  worldTanget  : TEXCOORD_INTERP;
#elif defined(FEATURE_SCREENSPACE_UV)
   float4  screenSpaceUV : TEXCOORD_INTERP;
#endif
#if defined(FOG_PIXELSHADER_BLEND) && !defined(FULLBRIGHT) && !defined(NO_LIGHTING) && defined(MOD2X_COLORMAP) && !defined(GENERATE_SHADOW_MAP)
   float4  uv1             : TEXCOORD_INTERP;
#else
   float2  uv1             : TEXCOORD_INTERP;
#endif
#ifndef GENERATE_SHADOW_MAP
   float2  worldXZ    : TEXCOORD_INTERP;
#else
   float   depth        : TEXCOORD_INTERP;
#endif
#if defined(FEATURE_WORLD_NORMAL)
   float3  worldNormal  : TEXCOORD_INTERP;
#endif
#if defined(WRITE_MRT) || defined(FEATURE_WORLD_POSITION)
   float3  worldPosition   : TEXCOORD_INTERP;
#endif
#ifndef DISABLE_SHADOWS
   float3  shadowMapUV            : TEXCOORD_INTERP;
#endif
  float4 interp_0 : TEXCOORD_INTERP;
};

/////////////////////////////////////////////////////////////////////////////////////
///
///
///
/////////////////////////////////////////////////////////////////////////////////////
INTERPOLANTS main(VERTEX vertex)
{
    INTERPOLANTS interpolants;

    float2 defaultUVs = vertex.vUV1;

#if EXPERIMENTAL_UNPACK_VERTS
    UnpackAttributes(vertex.vBlendWeight, vertex.vNormal, vertex.vUV1);     // unpack fixed point attributes
#endif
#if defined(FEATURE_VERTEX_COLOR_VS) || defined(FEATURE_VERTEX_COLOR)
    float4 vColorIn0 = vertex.vColorIn0;
#endif

    float4 localPosition = float4(vertex.vPos, 1.0f);

    float3 worldPosition;
    float3 worldNormal;
    float3 worldTangent;
#ifndef NO_SKINNING
 #if defined(FEATURE_TANGENT)
    SkinPositionAndTBN(vertex.vPos, vertex.vNormal, vertex.vTangent, vertex.vBlendIndices, vertex.vBlendWeight, worldPosition, worldNormal, worldTangent);
 #else
    SkinPositionAndNormal(vertex.vPos, vertex.vNormal, vertex.vBlendIndices, vertex.vBlendWeight, worldPosition, worldNormal);
 #endif
#else
    worldPosition = mul(float4(vertex.vPos, 1.f), BONES[0]);
    worldNormal = mul(float4(vertex.vNormal, 0.f), BONES[0]);
 #if defined(FEATURE_TANGENT)
    worldTangent = mul(float4(vertex.vTangent, 0.f), BONES[0]);
 #endif
#endif

    float4 var0;
    { // (VertexColor)
    float4 result = vColorIn0.VCOLORSWIZZLE;
    var0 = result;
    }
    float var1 = Parameter0.x; // WobbleScale
    float4 var2 = var0 * var1; // Multiply
    float var3 = var2.x; // Mask
    float var4 = saturate(var3); // saturate
    float var5 = Parameter0.y; // WobbleSpeed
    float var6 = var2.y; // Mask
    float4 var7 = TIME; // Time
    float var8 = var6 + var7.x; // Add
    float var9 = var5 * var8; // Multiply
    float var10 = Parameter0.z; // WobbleSize
    float var11;
    { // (SimpleNoise)
    float x = var9;
    float amp = var10;
    float offset =  0 ;
    float noise = cos(2*x+1.7)*cos(3.3*x)*sin(.8*x);
    float result = noise * amp + offset;
    var11 = result;
    }
    float3 var12;
    { // (WorldNormal)
    float3 result = worldNormal;
    var12 = result;
    }
    float3 var13 = var11 * var12; // Multiply
    float3 var14 = var4 * var13; // Multiply
    float3 var15 = float3(0,0,0); // Float3Literal
    
    #if USE_WOBBLE // STATIC_SWITCH: USE_WOBBLE
        float3 var16 =  var14;
    #else
        float3 var16 =  var15;
    #endif
    
    
    worldPosition += var16;

#if defined(FEATURE_WORLD_NORMAL) || defined(FEATURE_TANGENT)
    interpolants.worldNormal = worldNormal;
#endif
#if defined(FEATURE_TANGENT)
    interpolants.worldTangent = float4(worldTangent, vTangent.w);    // propagate the handedness orientation factor in w so we can correctly orient the TBN frame
#endif

#if defined(FEATURE_VERTEX_COLOR)
    interpolants.vertexColor = vertex.vColorIn0;
#endif


#if defined(WRITE_MRT) || defined(FEATURE_WORLD_POSITION)
    // Output world position
    interpolants.worldPosition.xyz = worldPosition.xyz;
#endif

    // Output homogeneous position
    interpolants.position = mul(float4(worldPosition.xyz, 1.0f), mProj);

    // Output texture coordinate using texture transform. Optimizes out
    // if not used
    
    float4 uvScaleAndOffset =  float4(1, 1, 0, 0);
    interpolants.uv1.xy = vertex.vUV1 * uvScaleAndOffset.xy + uvScaleAndOffset.zw;


#ifndef DISABLE_SHADOWS
    // Output shadow position
    interpolants.shadowMapUV = mul(float4(worldPosition.xyz, 1.0f), mShadowProj).xyz;
#endif

#ifndef NO_LIGHTING
    #ifdef USE_LIGHT_GRID
        float3 lighting = LightingLightGrid(worldNormal);
    #else
        float3 lighting = LightingSunLight(worldNormal);
    #endif
    interpolants.lightingColor = float4(lighting,0);
#endif

#ifdef GENERATE_SHADOW_MAP
    interpolants.depth = interpolants.position.z;
#ifdef IS_OPENGL
    // fix the depth into the 0-1 range for OpenGL
    interpolants.depth = (interpolants.depth * 0.5f) + 0.5f;
#endif

#else
    // Fog of war
    interpolants.worldXZ.xy = FogOfWarTextureCoordinates(worldPosition.xyz).xy;
#endif

    //Vertex fog.
#if defined(FOG_PIXELSHADER_BLEND) && !defined(FULLBRIGHT) && !defined(NO_LIGHTING) && defined(MOD2X_COLORMAP) && !defined(GENERATE_SHADOW_MAP)
    interpolants.uv1.zw = interpolants.worldXZ.xy;
    interpolants.uv1.w = 1.0f - interpolants.uv1.w;
    interpolants.lightingColor.a = 1.0f - ComputeFogValue(interpolants.position, worldPosition.xyz);
#endif

#if defined(FEATURE_SCREENSPACE_UV)
    interpolants.screenSpaceUV = interpolants.position;
#endif

    float2 var57;
    { // (UVCoord)
    float2 result = defaultUVs;
    var57 = result;
    }
    float2 var58 = Parameter5.xy; // DistortUVScale
    float2 var59 = var57 * var58; // Multiply
    float4 var60 = TIME; // Time
    float2 var61 = Parameter5.zw; // DistortScrollSpeed
    float2 var62;
    { // (Panner)
    float2 uvInput = var59;
    float time = var60.x;
    float2 speed = var61;
    float2 scroll = float2( ( time * speed.x + uvInput.x ), ( time * speed.y + uvInput.y ));
    float2 result = scroll;
    var62 = result;
    }
    interpolants.interp_0.xy = var62;
    float2 var63;
    { // (UVCoord)
    float2 result = defaultUVs;
    var63 = result;
    }
    float2 var64 = Parameter2.xy; // Green_UVScale
    float2 var65 = var63 * var64; // Multiply
    float2 var66 = Parameter2.zw; // Green_ScrollSpeed
    float2 var67;
    { // (Panner)
    float2 uvInput = var65;
    float time = var60.x;
    float2 speed = var66;
    float2 scroll = float2( ( time * speed.x + uvInput.x ), ( time * speed.y + uvInput.y ));
    float2 result = scroll;
    var67 = result;
    }
    interpolants.interp_0.zw = var67;
    
    

    return interpolants;

}
