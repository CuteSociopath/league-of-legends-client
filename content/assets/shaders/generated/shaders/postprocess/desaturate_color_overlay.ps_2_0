#include "DATA/Shaders/HLSL/DeathScreen.hls"

////////////////////////////////////////////////////////////////
///
/// Samplers
///
////////////////////////////////////////////////////////////////

#include "DATA/Shaders/HLSL/GAMMA/ApplyBloom.hls"
#include "DATA/Shaders/HLSL/GAMMA/ApplyGamma.hls"

////////////////////////////////////////////////////////////////
///
/// Constants
///
////////////////////////////////////////////////////////////////


float4 Parameter0; // (Inner_Color = Parameter0.xyzw) 
float4 Parameter1; // (Outer_Color = Parameter1.xyzw) 
float2 Parameter2; // (Vignette_Size = Parameter2.x,Desaturation_Blend = Parameter2.y) 



struct INTERPOLANTS
{
    float4 position   : POSITION;
    // Input texture coordinate used for back buffer
    float2 texcoord0  : TEXCOORD_INTERP;

    
};

////////////////////////////////////////////////////////////////
///
/// main
///
////////////////////////////////////////////////////////////////
float4 main(INTERPOLANTS interpolants) : COLOR0
{
    float2 originalUVs = interpolants.texcoord0;
    float2 defaultUVs = interpolants.texcoord0;

    // allow manipulation of UVs used to look up textures
    
    defaultUVs +=  float2(0,0);

#ifdef BLEND
    defaultUVs = lerp(originalUVs, defaultUVs, POST_EFFECT_STRENGTH);
#endif
    // Read the texel from the back buffer. By default, it just samples the back buffer copy
    // at the offset UVs, but if we want to do color tweaking or
    // etc we can
    float4 var0 = Parameter0.xyzw; // Inner_Color
    float4 var1 = Parameter1.xyzw; // Outer_Color
    float2 var2;
    { // (UVCoord)
    float2 result = defaultUVs;
    var2 = result;
    }
    float2 var3;
    { // (simpleRemapFloat2)
    float2 input = var2;
    float2 result = float2(input.x*2-1, input.y*2-1);
    var3 = result;
    }
    float var4 = length(var3); // length
    float var5 = Parameter2.x; // Vignette_Size
    float var6 = pow(var4,var5); // Pow
    float var7 = saturate(var6); // saturate
    float4 var8 = lerp(var0, var1, var7); // Lerp
    float4 var9;
    { // (PostProcessBackBuffer)
    float4 result = tex2D(SAMPLER_BACK_BUFFER_COPY, defaultUVs);
    var9 = result;
    }
    float3 var10;
    { // (PixelLuminance)
    float3 input = var9.xyz;
    float3 lumTable = float3( 0.3, 0.59, 0.11 );
    float Lum = dot( input, lumTable );
    float3 result = float3(Lum,Lum,Lum);
    var10 = result;
    }
    float var11 = Parameter2.y; // Desaturation_Blend
    float4 var12 = lerp(var9, float4(var10, 1.0f), var11); // Lerp
    
    #ifdef LOW_QUALITY_MODE
        float4 var13 =  var9;
    #else
        float4 var13 =  var12;
    #endif
    
    float4 var14 = var8 * var13; // Multiply
    
    float4 texelBackBuffer = var14;

#ifdef BLEND
    float4 originalBackBuffer = tex2D(SAMPLER_BACK_BUFFER_COPY, originalUVs);
    texelBackBuffer = lerp(originalBackBuffer, texelBackBuffer, POST_EFFECT_STRENGTH);
#endif
    texelBackBuffer.rgb = ApplyBloom(texelBackBuffer.rgb, defaultUVs);
    texelBackBuffer.rgb = ApplyGamma(texelBackBuffer.rgb);

    float4 ret = texelBackBuffer;
    // Apply color overrides (e.g. Teemo Stealth)
    ret.rgb = ret.rgb * (1.0f - COLOR_OVERRIDE_PARAMS.a) + COLOR_OVERRIDE_PARAMS.rgb;

#ifdef DEATH_EFFECT
    ret.rgb = GetSaturatedColor(ret.rgb);
#endif

    // Return the converted color    
    
    return ret;
}
