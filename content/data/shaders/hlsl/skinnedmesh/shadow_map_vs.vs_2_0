#include "IOParam/IODefine_VS.hls"
#include "skinning.hls"
#include "unpack.hls"

/////////////////////////////////////////////////////////////////////////////////////
///
/// Constants
///
/////////////////////////////////////////////////////////////////////////////////////

struct VERTEX
{
    float3 m_Position           : X3D_VSIN_POSITION;
    float4 m_BlendWeight        : X3D_VSIN_BLENDWEIGHT;
    float3 m_Normal             : X3D_VSIN_NORMAL;   
    blendindex4 m_BlendIndices  : X3D_VSIN_BLENDINDICES;
    float2 m_TexCoord           : X3D_VSIN_TEXCOORD0;
};


struct INTERPOLANTS
{
    float4 position : POSITION;
    float Depth     : TEXCOORD0;
};
/////////////////////////////////////////////////////////////////////////////////////
///
/// Shader
///
/////////////////////////////////////////////////////////////////////////////////////
INTERPOLANTS main
(
    VERTEX vertex
)
{
    INTERPOLANTS interpolants;

#if EXPERIMENTAL_UNPACK_VERTS
    UnpackAttributes(vertex.m_BlendWeight, vertex.m_Normal, vertex.m_TexCoord);     // unpack fixed point attributes
#endif

    // Compute skinned local position
    float3 skinnedPosition;
    SkinPosition(vertex.m_Position, vertex.m_BlendIndices, vertex.m_BlendWeight, skinnedPosition);

    // Output homogeneous position
    interpolants.position = mul(float4(skinnedPosition.xyz, 1.0f), mProj);

    // Output position for pixel shader
    interpolants.Depth = interpolants.position.z;
#ifdef IS_OPENGL
    // fix the depth into the 0-1 range for OpenGL
    interpolants.Depth = (interpolants.Depth * 0.5f) + 0.5f;
#endif
    return interpolants;
}
