#include "../Fog/Fog.hls"
#include "../FogOfWar/FogOfWar_VS.hls"
#include "common.hls"
#include "navmeshmask_vs.hls"

// x = num frames along x, y = 1 / num frames along x, z = 1 / num frames along y
float4 TEXTURE_INFO;
float4 TEXTURE_INFO_2;

struct VERTEX
{
    float4  position        : X3D_VSIN_POSITION;
    float4  color0          : X3D_VSIN_COLOR0;
    float3  texcoord0       : X3D_VSIN_TEXCOORD0;   // xy = uv0, z = Frame number (why not a constant?)
    float2  texcoord1       : X3D_VSIN_TEXCOORD1;
    float2  texcoordAlpha   : X3D_VSIN_TEXCOORD2;
};

struct INTERPOLANTS
{
    float4  position        : POSITION;
    float4  color0          : TEXCOORD0;    // N.B. colors can be > 1 (e.g. mod2x), so use a full interpolator and not COLOR0 which saturates on ps_2_0
    float4  uv0_uv1         : TEXCOORD1;
    float4  uvFOW_uvAlpha   : TEXCOORD2;

#if defined(FOG_PIXELSHADER_BLEND)
//  float   fog         : TEXCOORD3;        // @todo add FOG_PIXELSHADER_BLEND support
#endif
#ifdef MASKED
    float2  maskCoords : TEXCOORD4;
#endif


};

INTERPOLANTS main(VERTEX vertex)
{
    INTERPOLANTS interpolants;

    // Posiiton
    interpolants.position = mul( vertex.position, mProj );

    // Color
    interpolants.color0 = vertex.color0.VCOLORSWIZZLE;

    // UV coordinates
    float frameNumber = vertex.texcoord0.z; // current flip book frame number @todo why isn't this in a constant?
    float2 uv0 = CalculateTexDivUV(vertex.texcoord0.xy, frameNumber, TEXTURE_INFO);
    
    float2 uvAlpha = vertex.texcoordAlpha.xy;

#ifdef MULTIPASS
    float2 uv1 = CalculateTexDivUV(vertex.texcoord1.xy, frameNumber, TEXTURE_INFO_2);
#else
    // Particle color texture lookup
    float2 uv1 = vertex.texcoord1.xy;
#endif

#ifndef DISABLE_FOW
    // Fog of war
    float2 uvFOW = FogOfWarTextureCoordinates( vertex.position.xyz ).xy;

    // assemble output to correct interpolator channels
    interpolants.uvFOW_uvAlpha.xy = uvFOW;
#else
    interpolants.uvFOW_uvAlpha.xy = 0.0f;
#endif

    interpolants.uvFOW_uvAlpha.zw = uvAlpha;

    interpolants.uv0_uv1.xy       = uv0;
    interpolants.uv0_uv1.zw       = uv1;
    
#ifdef MASKED
    interpolants.maskCoords = GetNavmeshMaskUVS(vertex.position.xyz);
#endif

    return interpolants;
}
