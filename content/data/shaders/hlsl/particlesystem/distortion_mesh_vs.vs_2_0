#include "../Fog/Fog.hls"
#include "../FogOfWar/FogOfWar_VS.hls"
#include "navmeshmask_vs.hls"

float4   kColorFactor;    // R3D_SHADER_VS_CONSTANT_PARTICLE_COLOR_FACTOR
column_major float3x3 vParticleUVTransform;

struct VERTEX
{
    float4  position        : X3D_VSIN_POSITION;
    float3  normal          : X3D_VSIN_NORMAL;
    float2  texcoord0       : X3D_VSIN_TEXCOORD0;
};

struct INTERPOLANTS
{
    float4  position        : POSITION;
    float4  color0          : TEXCOORD0;    // N.B. colors can be > 1 (e.g. mod2x), so use a full interpolator and not COLOR0 which saturates on ps_2_0
    float4  uv0_uvDistort   : TEXCOORD1;
#ifdef MASKED
    float2  uvMap           : TEXCOORD2;
#endif
};

INTERPOLANTS main(VERTEX vertex)
{
    INTERPOLANTS interpolants;
    float4 worldPos = mul( vertex.position, mWorld );
    interpolants.position = mul( worldPos, mProj );

    interpolants.color0 = kColorFactor;   // @todo no support for mesh vertex colors?
    
    float2 uv0 = mul(float3(vertex.texcoord0, 1), vParticleUVTransform).xy;
    
    // compute world position
    float4 worldPosition = mul(vertex.position, mWorld);
        
    // Distortion
    float2 uvDistort = interpolants.position.xy/interpolants.position.w;    // clip space uv
    uvDistort   = uvDistort/2 + 0.5;    // convert to distortion buffer tex coords
    uvDistort.y = 1 - uvDistort.y;
    
    interpolants.uv0_uvDistort = float4(uv0, uvDistort);
    
#ifdef MASKED
    interpolants.uvMap.xy = GetNavmeshMaskUVS(worldPosition.xyz);
#endif

    return interpolants;
}
