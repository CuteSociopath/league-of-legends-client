#include "../ColorPalette.hls"
#include "../DeathScreen.hls"
#include "../MipLevels.hls"
#include "../FogOfWar/FogOfWar_PS.hls"
#include "ColorRemap.hls"
#include "navmeshmask_ps.hls"
#include "AlphaTest_ps.hls"

sampler2D TEXTURE;
#ifdef  MULTIPASS
sampler2D TEXTUREMULT;
#endif
sampler2D PARTICLE_COLOR_TEXTURE;

#if defined(COLORPALETTE_COLORBLIND)
   float4 APPLY_TEAM_COLOR_CORRECTION;
#endif

struct INTERPOLANTS
{
    float4  position        : POSITION;
    float4  color0          : TEXCOORD0;    // N.B. colors can be > 1 (e.g. mod2x), so use a full interpolator and not COLOR0 which saturates on ps_2_0
    float4  uv0_uv1         : TEXCOORD1;
    float4  uvFOW_uvAlpha   : TEXCOORD2;
#ifdef MASKED
    float2  maskCoords   : TEXCOORD4;
#endif

};

float4 main(INTERPOLANTS interpolants) : COLOR0
{
    float2 uv0      = interpolants.uv0_uv1.xy;
    float2 uv1      = interpolants.uv0_uv1.zw;
#ifndef DISABLE_FOW
    float2 uvFOW    = interpolants.uvFOW_uvAlpha.xy;
#endif
    float2 uvAlpha  = interpolants.uvFOW_uvAlpha.zw;
    
    float4 color_texel = tex2D(TEXTURE, uv0);
    float4 alpha_texel = tex2D(TEXTURE, uvAlpha);

#ifdef PALETTIZE_TEXTURES
    // remap textures according to palettization settings
    color_texel.rgb = ColorizeMainTexture(color_texel).rgb;
#endif
    
#ifdef  MULTIPASS
    float4 particle_color_texel = tex2D(TEXTUREMULT, uv1);
#else
    float4 particle_color_texel = tex2D(PARTICLE_COLOR_TEXTURE, uv1);
#endif  

    float4 out_color0;
    out_color0.rgb  = color_texel.rgb * interpolants.color0.rgb * particle_color_texel.rgb;
    out_color0.a    = alpha_texel.a * interpolants.color0.a * particle_color_texel.a;

#ifdef COLORPALETTE_COLORBLIND
    if (APPLY_TEAM_COLOR_CORRECTION.r != 0.0f)
    {
        ApplyColorCorrectionColorblind(out_color0);
    }
#endif 
    
#ifndef DISABLE_FOW
    float4 fowFactors = GetFogOfWarFactors(uvFOW);
    // Apply FOW to final result
    // NOTE:  This ignores the FowOverlay texture tint and assumes the FoW is black
    out_color0.rgb *= fowFactors.a;
#endif

    out_color0.rgb = ApplyMipColorsVisualization(out_color0.rgb, uv0);
#ifdef MASKED
    out_color0 = ApplyNavmeshMask(out_color0, interpolants.maskCoords);
#endif

    AlphaTest(out_color0);

    return out_color0;
}
