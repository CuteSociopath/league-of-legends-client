#include "../ColorPalette.hls"
#include "navmeshmask_ps.hls"
#include "AlphaTest_ps.hls"

sampler2D TEXTURE;
sampler2D PARTICLE_COLOR_TEXTURE;
sampler2D NORMAL_MAP;

float2  COLOR_LOOKUP_UV;
float   DistortionPower;

#if defined(COLORPALETTE_COLORBLIND)
   float4 APPLY_TEAM_COLOR_CORRECTION;
#endif

struct INTERPOLANTS
{
    float4  position        : POSITION;
    float4  color0          : TEXCOORD0;    // N.B. colors can be > 1 (e.g. mod2x), so use a full interpolator and not COLOR0 which saturates on ps_2_0
    float4  uv0_uvDistort   : TEXCOORD1;
    
#ifdef MASKED
    float2  uvMap           : TEXCOORD2;
#endif
};

float4 main(INTERPOLANTS interpolants) : COLOR0
{
    float2 uv0 = interpolants.uv0_uvDistort.xy;
    float4 texel = tex2D(TEXTURE, uv0);

    float4 particle_color_texel = tex2D(PARTICLE_COLOR_TEXTURE, COLOR_LOOKUP_UV);
    texel = interpolants.color0 * texel * particle_color_texel;
    
    // Key part of distortion
    float2 uvDistort = interpolants.uv0_uvDistort.zw;
    float4 Normal = tex2D(NORMAL_MAP, uv0);
    float2 distortion = (Normal.xy-0.5)*2.0 * DistortionPower * particle_color_texel.a;
    float4 Refraction = tex2D(SAMPLER_BACK_BUFFER_COPY, uvDistort + distortion);
    float4 out_color0 = Refraction * texel;
    out_color0.a = Normal.a * particle_color_texel.a;

    // @todo No Fog of War? Already assumed to be in the distortion buffer screen capture?

#ifdef COLORPALETTE_COLORBLIND
    if (APPLY_TEAM_COLOR_CORRECTION.r != 0.0f)
    {
        ApplyColorCorrectionColorblind(out_color0);
    }
#endif
#ifdef MASKED
    out_color0 = ApplyNavmeshMask(out_color0, interpolants.uvMap.xy);
#endif

    AlphaTest(out_color0);

    return out_color0;
}
