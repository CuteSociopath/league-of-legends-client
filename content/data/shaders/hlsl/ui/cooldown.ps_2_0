float4 params;
float4 color0;
float4 color1;

struct INTERPOLANTS
{
    float4 position : POSITION;
    float4 col0     : COLOR0;
    float2 tex0     : TEXCOORD0;
};

float4 main(INTERPOLANTS interpolants) : COLOR
{
        float2 vec = interpolants.tex0 * 2 - 1;
        float2 dir = normalize(vec);

        // calculate the angle of this pixel to determine
        // whether it's part of the remainder or elapsed pie
        float PI = 3.141592653;
        float angle = PI + atan2(dir.x, dir.y);
        float gradAngle = .5; //controls the angle of the gradient 1 - 7

        // remaining time
        float4 color;
        if(angle < params.x)
                //float4(clamp((gradAngle-(params.x-angle)),0,1)*0.6*color0.xyz+color0.xyz*.4,color0.a)
                // pre-multiply alpha
                color = float4(color1.rgb * color1.a, color1.a);
        else
                // pre-multiply alpha before we do the angle math on it
                color = (gradAngle - (angle - params.x)) + float4(color0.rgb * color0.a, color0.a);
                //color = color0;
        // elapsed time        
        return float4(color.rgb * UI_COLOR.a, color.a * UI_COLOR.a);

}
