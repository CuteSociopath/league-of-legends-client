<?xml version="1.0" encoding="utf-8"?>
<BlockDefinitions>
  <Block Name="GetChampionCollection" Category="Action\Collection" SubCategory="Action\Unit" CanHaveChildren="false" NumberOfChildren="-1">
    <Description>Sets the Output parameter to reference a collection containing all champions in the game. This is an unfiltered collection, so it contains champions who have disconnected or are played by bots.</Description>
    <Label>{Out:Output}=Game.AllChampions</Label>
    <Parameters>
      <OutParameter Name="Output" Type="Obj_AI_HeroCollection">
        <Description>Destination reference; holds the collection of all champions in the game.</Description>
      </OutParameter>
    </Parameters>
  </Block>
  <!-- FloatCollection -->
  <Block Name="CreateFloatCollection" Category="Action\Collection\Float" SubCategory="" CanHaveChildren="false" NumberOfChildren="-1">
    <Description>Sets the Output parameter to reference a new float collection.</Description>
    <Label>{Out:Output}=new Float[{Size}]</Label>
    <Parameters>
      <Parameter Name="Size" Type="Int" Default="0" VariableType="Reference,Value">
        <Description>Source Reference</Description>
      </Parameter>
      <Parameter Name="Default" Type="Float" Default="0" Optional="True" VariableType="Reference,Value">
        <Description>Source Reference</Description>
      </Parameter>
      <OutParameter Name="Output" Type="FloatCollection">
        <Description>Destination Reference</Description>
      </OutParameter>
    </Parameters>
  </Block>
  <Block Name="SetVarFloatCollection" Category="Action\Collection\Float" SubCategory="" CanHaveChildren="false" NumberOfChildren="-1">   
    <Description>Sets the Output parameter to reference the specified Input float collection.</Description>
    <Label>{Out:Output}={Input}</Label>
    <Parameters>
      <Parameter Name="Input" Type="FloatCollection" Default="" VariableType="Reference">
        <Description>Source Reference</Description>
      </Parameter>
      <OutParameter Name="Output" Type="FloatCollection">
        <Description>Destination Reference</Description>
      </OutParameter>
    </Parameters>
  </Block>
  <Block Name="AddItemToFloatCollection" Category="Action\Collection\Float" SubCategory="" CanHaveChildren="false" NumberOfChildren="-1">
    <Description>Sets the Output parameter to reference the float Collection with the addition of the specified float ItemValue.</Description>
    <Label>[{Out:Output} != {Collection} ? {Out:Output}=:]{Collection}.Add({ItemValue})</Label>
    <Parameters>
      <Parameter Name="Collection" Type="FloatCollection" Default="" VariableType="Reference">
        <Description>Source Reference</Description>
      </Parameter>
      <Parameter Name="ItemValue" Type="Float" Default="0" VariableType="Reference,Value">
        <Description>Source Reference</Description>
      </Parameter>
      <OutParameter Name="Output" Type="FloatCollection">
        <Description>Destination Reference</Description>
      </OutParameter>
    </Parameters>
  </Block>
  <Block Name="SetVarFloatCollectionItem" Category="Action\Collection\Float" SubCategory="" CanHaveChildren="false" NumberOfChildren="-1">
    <Description>Sets the Output parameter to reference the float Collection with the specified float ItemValue set at the index specified by ItemID.</Description>
    <Label>[{Out:Output} != {Collection} ? {Out:Output}=:]{Collection}[{ItemID}]={ItemValue}</Label>
    <Parameters>
      <Parameter Name="Collection" Type="FloatCollection" Default="" VariableType="Reference">
        <Description>Source Reference</Description>
      </Parameter>
      <Parameter Name="ItemID" Type="Int" Default="0" VariableType="Reference,Value">
        <Description>Source Reference</Description>
      </Parameter>
      <Parameter Name="ItemValue" Type="Float" Default="0" VariableType="Reference,Value">
        <Description>Source Reference</Description>
      </Parameter>
      <OutParameter Name="Output" Type="FloatCollection">
        <Description>Destination Reference</Description>
      </OutParameter>
    </Parameters>
  </Block>
  <Block Name="GetVarFloatCollectionItem" Category="Action\Collection\Float" SubCategory="" CanHaveChildren="false" NumberOfChildren="-1">
    <Description>Sets the Output parameter to the float ItemValue found in the specified Collection at the index specified by ItemID.</Description>
    <Label>{Out:Output}={Collection}[{ItemID}]</Label>
    <Parameters>
      <Parameter Name="Collection" Type="FloatCollection" Default="" VariableType="Reference">
        <Description>Source Reference</Description>
      </Parameter>
      <Parameter Name="ItemID" Type="Int" Default="0" VariableType="Reference,Value">
        <Description>Source Reference</Description>
      </Parameter>
      <OutParameter Name="Output" Type="Float">
        <Description>Destination Reference</Description>
      </OutParameter>
    </Parameters>
  </Block>
  <!-- IntCollection -->
  <Block Name="CreateIntCollection" Category="Action\Collection\Int" SubCategory="" CanHaveChildren="false" NumberOfChildren="-1">
    <Description>Sets the Output parameter to reference a new int collection.</Description>
    <Label>{Out:Output}=new Int[{Size}]</Label>
    <Parameters>
      <Parameter Name="Size" Type="Int" Default="0" VariableType="Reference,Value">
        <Description>Source Reference</Description>
      </Parameter>
      <Parameter Name="Default" Type="Int" Default="0" Optional="True" VariableType="Reference,Value">
        <Description>Source Reference</Description>
      </Parameter>
      <OutParameter Name="Output" Type="IntCollection">
        <Description>Destination Reference</Description>
      </OutParameter>
    </Parameters>
  </Block>
  <Block Name="SetVarIntCollection" Category="Action\Collection\Int" SubCategory="" CanHaveChildren="false" NumberOfChildren="-1">
    <Description>Sets the Output parameter to reference the specified Input int collection.</Description>
    <Label>{Out:Output}={Input}</Label>
    <Parameters>
      <Parameter Name="Input" Type="IntCollection" Default="" VariableType="Reference">
        <Description>Source Reference</Description>
      </Parameter>
      <OutParameter Name="Output" Type="IntCollection">
        <Description>Destination Reference</Description>
      </OutParameter>
    </Parameters>
  </Block>
  <Block Name="AddItemToIntCollection" Category="Action\Collection\Int" SubCategory="" CanHaveChildren="false" NumberOfChildren="-1">
    <Description>Sets the Output parameter to reference the int Collection with the addition of the specified int ItemValue.</Description>    
    <Label>[{Out:Output} != {Collection} ? {Out:Output}=:]{Collection}.Add({ItemValue})</Label>
    <Parameters>
      <Parameter Name="Collection" Type="IntCollection" Default="" VariableType="Reference">
        <Description>Source Reference</Description>
      </Parameter>
      <Parameter Name="ItemValue" Type="Int" Default="0" VariableType="Reference,Value">
        <Description>Source Reference</Description>
      </Parameter>
      <OutParameter Name="Output" Type="IntCollection">
        <Description>Destination Reference</Description>
      </OutParameter>
    </Parameters>
  </Block>
  <Block Name="SetVarIntCollectionItem" Category="Action\Collection\Int" SubCategory="" CanHaveChildren="false" NumberOfChildren="-1">
    <Description>Sets OutputRef with the value of Input. This version is for int collection item.</Description>
    <Label>[{Out:Output} != {Collection} ? {Out:Output}=:]{Collection}[{ItemID}]={ItemValue}</Label>
    <Parameters>
      <Parameter Name="Collection" Type="IntCollection" Default="" VariableType="Reference">
        <Description>Source Reference</Description>
      </Parameter>
      <Parameter Name="ItemID" Type="Int" Default="0" VariableType="Reference,Value">
        <Description>Source Reference</Description>
      </Parameter>
      <Parameter Name="ItemValue" Type="Int" Default="0" VariableType="Reference,Value">
        <Description>Source Reference</Description>
      </Parameter>
      <OutParameter Name="Output" Type="IntCollection">
        <Description>Destination Reference</Description>
      </OutParameter>
    </Parameters>
  </Block>
  <Block Name="GetVarIntCollectionItem" Category="Action\Collection\Int" SubCategory="" CanHaveChildren="false" NumberOfChildren="-1">
    <Description>Sets the Output parameter to the int ItemValue found in the specified Collection at the index specified by ItemID.</Description>
    <Label>{Out:Output}={Collection}[{ItemID}]</Label>
    <Parameters>
      <Parameter Name="Collection" Type="IntCollection" Default="" VariableType="Reference">
        <Description>Source Reference</Description>
      </Parameter>
      <Parameter Name="ItemID" Type="Int" Default="0" VariableType="Reference,Value">
        <Description>Source Reference</Description>
      </Parameter>
      <OutParameter Name="Output" Type="Int">
        <Description>Destination Reference</Description>
      </OutParameter>
    </Parameters>
  </Block>
  <Block Name="DebugAction" Category="Action\Debug" SubCategory="Debug" CanHaveChildren="false" NumberOfChildren="-1">
    <Description>Debug node used to return an explicit value and write a string to log.</Description>
    <Label>On _{Result}_ Log: {String}</Label>
    <Parameters>
      <Parameter Name="Result" Type="BehaveResult" Default="SUCCESS" VariableType="Value">
        <Description>What the node should return when ticked</Description>
      </Parameter>
      <Parameter Name="String" Type="String" Default="EMPTY STRING" VariableType="Reference,Value">
        <Description>The string that should be outputted to log</Description>
      </Parameter>
    </Parameters>
  </Block>
  <Block Name="SetLoggingData" Category="Action\Logging" SubCategory="" CanHaveChildren="false" NumberOfChildren="-1">
    <Description>Sets the value of a data logging variable to be sent up to the data server.</Description>
    <Label>{LoggingCategory}.{ValueName}={NewValue}</Label>
    <Parameters>
      <Parameter Name="LoggingCategory" Type="String" Default="NONE" VariableType="Reference,Value">
        <Description>Category from DataLoggingCategories to log into</Description>
      </Parameter>
      <Parameter Name="ValueName" Type="String" Default="NONE" VariableType="Reference,Value">
        <Description>Value from the given category in DataLoggingCategories to set</Description>
      </Parameter>
      <Parameter Name="NewValue" Type="Float" Default="0" VariableType="Reference,Value">
        <Description>The new value to set into the given logging value position</Description>
      </Parameter>
    </Parameters>
  </Block> 
  <Block Name="AccumulateLoggingData" Category="Action\Logging" SubCategory="" CanHaveChildren="false" NumberOfChildren="-1">
    <Description>Sets the value of a data logging variable to be sent up to the data server.</Description>
    <Label>{LoggingCategory}.{ValueName} += {ValueChange}</Label>
    <Parameters>
      <Parameter Name="LoggingCategory" Type="String" Default="NONE" VariableType="Reference,Value">
        <Description>Category from DataLoggingCategories to log into</Description>
      </Parameter>
      <Parameter Name="ValueName" Type="String" Default="NONE" VariableType="Reference,Value">
        <Description>Value from the given category in DataLoggingCategories to set</Description>
      </Parameter>
      <Parameter Name="ValueChange" Type="Float" Default="0" VariableType="Reference,Value">
        <Description>The number that should be added to the given value</Description>
      </Parameter>
    </Parameters>
  </Block> 
  <Block Name="SampleLoggingBegin" Category="Action\Logging" SubCategory="" CanHaveChildren="false" NumberOfChildren="-1">
    <Description>Begins a sample in the give data logging category. Stores the sample ID of this sample into DestSampleID</Description>
    <Label>{LoggingCategory}.{DestSampleID}</Label>
    <Parameters>
      <Parameter Name="LoggingCategory" Type="String" Default="NONE" VariableType="Reference,Value">
        <Description>Category from DataLoggingCategories to log into</Description>
      </Parameter>
      <OutParameter Name="DestSampleID" Type="Int">
        <Description>Variable which is set to the sample ID of the given sample. Subsequent calls to SampleLoggingSetData should use this ID</Description>
      </OutParameter>
    </Parameters>
  </Block> 
  <Block Name="SampleLoggingSetData" Category="Action\Logging" SubCategory="" CanHaveChildren="false" NumberOfChildren="-1">
    <Description>Sets the value of a data logging variable in a given sample to be sent up to the data server.</Description>
    <Label>{LoggingCategory}.{SampleID}.{ValueName}={NewValue}</Label>
    <Parameters>
      <Parameter Name="LoggingCategory" Type="String" Default="NONE" VariableType="Reference,Value">
        <Description>Category from DataLoggingCategories to log into</Description>
      </Parameter>
      <Parameter Name="SampleID" Type="Int" Default="0" VariableType="Reference,Value">
        <Description>Sample ID from a call to SampleLoggingBegin into which this data should be set</Description>
      </Parameter>
      <Parameter Name="ValueName" Type="String" Default="NONE" VariableType="Reference,Value">
        <Description>Value from the given category in DataLoggingCategories to set</Description>
      </Parameter>
      <Parameter Name="NewValue" Type="Float" Default="0" VariableType="Reference,Value">
        <Description>The new value to set into the given logging value position</Description>
      </Parameter>
    </Parameters>
  </Block> 
  <Block Name="SampleLoggingEnd" Category="Action\Logging" SubCategory="" CanHaveChildren="false" NumberOfChildren="-1">
    <Description>Ends a sample in the give data logging category</Description>
    <Label>{LoggingCategory}.{SampleID}</Label>
    <Parameters>
      <Parameter Name="LoggingCategory" Type="String" Default="NONE" VariableType="Reference,Value">
        <Description>Category from DataLoggingCategories to log into</Description>
      </Parameter>
      <Parameter Name="SampleID" Type="Int" Default="0" VariableType="Reference,Value">
        <Description>Sample ID from a call to SampleLoggingBegin that we should end</Description>
      </Parameter>
    </Parameters>
  </Block> 
  <Block Name="IterateOverAllDecorator" Category="Decorator\Iterator" SubCategory="Control" CanHaveChildren="true" NumberOfChildren="1">
    <Description>Decorator that will iterate through a collection, looping its children for each entry. Right now this only supports AttackableUnit collections.  This will always return SUCCESS.</Description>
    <Label>{Collection}</Label>
    <Parameters>
      <Parameter Name="Collection" Type="GenericCollection" Default="" VariableType="Reference">
        <Description>The collection that the iterator should loop over.</Description>
      </Parameter>
      <OutParameter Name="Output" Type="CollectionItem">
        <Description>Output reference for each individual iteration of the node.  This should only be referenced by children!</Description>
      </OutParameter>
    </Parameters>
  </Block>
  <Block Name="MakeVector" Category="Action\Position" SubCategory="" CanHaveChildren="false" NumberOfChildren="-1">
    <Description>Creates a vector from three static components. If you want to copy a Vector, use SetVarVector.</Description>
    <Label>{Out:Vector}=new Float({X}, {Y}, {Z})</Label>
    <Parameters>
      <Parameter Name="X" Type="Float" Default="0" VariableType="Value,Reference">
        <Description>X component</Description>
      </Parameter>
      <Parameter Name="Y" Type="Float" Default="0" VariableType="Value,Reference">
        <Description>Y component</Description>
      </Parameter>
      <Parameter Name="Z" Type="Float" Default="0" VariableType="Value,Reference">
        <Description>Z component</Description>
      </Parameter>
      <OutParameter Name="Vector" Type="Vector">
        <Description>OutputVector</Description>
      </OutParameter>
    </Parameters>
  </Block>
  <Block Name="GetVectorXYZ" Category="Action\Position" SubCategory="" CanHaveChildren="false" NumberOfChildren="-1">
    <Description>Gets the static components of a vector given an input vector.</Description>
    <Label>{X}, {Y}, {Z}={Vector}(X,Y,Z)</Label>
    <Parameters>
      <Parameter Name="Vector" Type="Vector" Default="0;0;0;" VariableType="Reference">
        <Description>Vector to break down into components</Description>
      </Parameter>
      <OutParameter Name="X" Type="Float">
        <Description>X component</Description>
      </OutParameter>
      <OutParameter Name="Y" Type="Float">
        <Description>Y component</Description>
      </OutParameter>
      <OutParameter Name="Z" Type="Float">
        <Description>Z component</Description>
      </OutParameter>
    </Parameters>
  </Block>
  <Block Name="GetNexus" Category="Action\Unit\Building" SubCategory="" CanHaveChildren="false" NumberOfChildren="-1">
    <Description>Gets a handle to the nexus on a specific teamin a specific lane. I think this will return FAILURE if the Nexus is not alive, should confirm.</Description>
    <Label>{Out:Nexus}={Team}.Nexus</Label>
    <Parameters>
      <Parameter Name="Team" Type="TeamEnum" Default="TEAM_ORDER" VariableType="Reference,Value">
        <Description>Team of the nexus to return.</Description>
      </Parameter>
      <OutParameter Name="Nexus" Type="AttackableUnit">
        <Description>Destination Reference; holds a nexus object handle</Description>
      </OutParameter>
    </Parameters>
  </Block>
  <Block Name="PlayerHasABFeature" Category="Test\System" SubCategory="" CanHaveChildren="false" NumberOfChildren="-1">
    <Description>Returns SUCCESS if Unit's owning player has been flagged as having a specific ABFeature turned on.</Description>
    <Label>{Unit}.HasABFeature({FeatureID})</Label>
    <Parameters>
      <Parameter Name="Unit" Type="AttackableUnit" Default="" VariableType="Reference">
        <Description>Unit to poll.</Description>
      </Parameter>
      <Parameter Name="FeatureID" Type="String" Default ="" VariableType="Value">
        <Description>Name of the ABFeature to check.</Description>
      </Parameter>
    </Parameters>
  </Block>
  <Block Name="GetUnitPosition" Category="Action\Position" SubCategory="" CanHaveChildren="false" NumberOfChildren="-1">
    <Description>Returns the current position of a specific unit. Always returns SUCCESS.</Description>
    <Label>{Out:Output}={Unit}.Position</Label>
    <Parameters>
      <Parameter Name="Unit" Type="AttackableUnit" Default="" VariableType="Reference">
        <Description>Unit to poll.</Description>
      </Parameter>
      <OutParameter Name="Output" Type="Vector">
        <Description>Destination reference; contains the current position of the unit.</Description>
      </OutParameter>
    </Parameters>
  </Block>
  <Block Name="DistanceBetweenObjectAndPoint" Category="Action\Position" SubCategory="" CanHaveChildren="false" NumberOfChildren="-1">
    <Description>Returns the distance between the Unit and the Point. Distance is measured from the edge of the unit's bounding box</Description>
    <Label>{Out:Output}={Unit}.DistanceToPoint({Point})</Label>
    <Parameters>
      <Parameter Name="Unit" Type="AttackableUnit" Default="" VariableType="Reference">
        <Description>Handle of the unit</Description>
      </Parameter>
      <Parameter Name="Point" Type="Vector" Default="0;0;0;" VariableType="Reference">
        <Description>Point</Description>
      </Parameter>
      <OutParameter Name="Output" Type="Float">
        <Description>Destination Reference; holds the distance from the unit to the point</Description>
      </OutParameter>
    </Parameters>
  </Block>  
  <Block Name="Say" Category="Action\Debug" SubCategory="" CanHaveChildren="false" NumberOfChildren="-1">
    <Description>Display floating text over unit's head. For DEBUG only.  Does not support localization!  Returns SUCCESS regardless even if Unit does not exist.</Description>
    <Label>{Unit}.Say({String})</Label>
    <Parameters>
      <Parameter Name="Unit" Type="AttackableUnit" Default="" VariableType="Reference">
        <Description>Unit to show floating text over.</Description>
      </Parameter>
      <Parameter Name="String" Type="String" Default="EMPTY STRING" VariableType="Reference,Value">
        <Description>The string to display.</Description>
      </Parameter>
    </Parameters>
  </Block>
  <Block Name="GetUnitMetadataValue" Category="Action\Stats\Metadata" SubCategory="" CanHaveChildren="false" NumberOfChildren="-1">
    <Description>Checks the metadata of the unit and returns the associated value.  If the unit does not have an entry for the key the node will return FAILURE.</Description>
    <Label>{Out:Output}={Unit}.Metadata({Key})</Label>
    <Parameters>
      <Parameter Name="Unit" Type="AttackableUnit" Default="" VariableType="Reference">
        <Description>Unit to poll.</Description>
      </Parameter>
      <Parameter Name="Key" Type="String" Default="" VariableType="Reference,Value">
        <Description>The key to check for.</Description>
      </Parameter>
      <OutParameter Name="Output" Type="String">
        <Description>Destination reference; contains the value for the metadata key.</Description>
      </OutParameter>
    </Parameters>
  </Block>
  <Block Name="UnitHasUnitTag" Category="Test\Unit" SubCategory="" CanHaveChildren="false" NumberOfChildren="-1">
    <Description>Checks to see if the unit has or does not have the specified unit tags. Returns SUCCESS if so, otherwise FAILURE.</Description>
    <Label>{Unit}.HasUnitTag({RequiredUnitTags}) [{ExcludedUnitTags}!=? AND &#33;{Unit}.HasUnitTag({ExcludedUnitTags}):]</Label>
    <Parameters>
      <Parameter Name="Unit" Type="AttackableUnit" Default="" VariableType="Reference">
        <Description>Unit to poll.</Description>
      </Parameter>
      <Parameter Name="RequiredUnitTags" Type="String" Default="" VariableType="Value">
        <Description>If the unit has ANY of these, SUCCESS (unless overriden by ExludedUnitTags). This should be a string list delimited by bars. e.g. "Monster | Minion"</Description>
      </Parameter>
      <Parameter Name="ExcludedUnitTags" Type="String" Default="" VariableType="Value">
        <Description>If the unit has ANY of these, FAILURE. This should be a string list delimited by bars. e.g. "Monster_Large | Minion_Summon"</Description>
      </Parameter>
    </Parameters>
  </Block>
  <Block Name="EqualString" Category="Test\String" SubCategory="" CanHaveChildren="false" NumberOfChildren="-1">
    <Description>Returns SUCCESS if LeftHandSide is equal to RightHandSide, and FAILURE if it is not. This version is for string References.</Description>
    <Label>{LeftHandSide}=={RightHandSide}</Label>
    <Parameters>
      <Parameter Name="LeftHandSide" Type="String" Default="" VariableType="Reference">
        <Description>LeftHandSide Reference of the comparison</Description>
      </Parameter>
      <Parameter Name="RightHandSide" Type="String" Default ="" VariableType="Reference,Value">
        <Description>RightHandSide Reference of the comparison</Description>
      </Parameter>
    </Parameters>
  </Block>
  <Block Name="EqualStringCaseInsensitive" Category="Test\String" SubCategory="" CanHaveChildren="false" NumberOfChildren="-1">
    <Description>Returns SUCCESS if LeftHandSide is equal to RightHandSide without considering case, and FAILURE if it is not. This version is for string References.</Description>
    <Label>{LeftHandSide}=={RightHandSide}</Label>
    <Parameters>
      <Parameter Name="LeftHandSide" Type="String" Default="" VariableType="Reference">
        <Description>LeftHandSide Reference of the comparison</Description>
      </Parameter>
      <Parameter Name="RightHandSide" Type="String" Default ="" VariableType="Reference,Value">
        <Description>RightHandSide Reference of the comparison</Description>
      </Parameter>
    </Parameters>
  </Block>
  <Block Name="GetUnitSkinName" Category="Action\Unit" SubCategory="" CanHaveChildren="false" NumberOfChildren="-1">
    <Description>Returns the current skin of a specific unit. Since buildings don't hame skins, it will return the name of the building.</Description>
    <Label>{Out:Output}=={Unit}.SkinName</Label>
    <Parameters>
      <Parameter Name="Unit" Type="AttackableUnit" Default="" VariableType="Reference">
        <Description>Unit to poll.</Description>
      </Parameter>
      <OutParameter Name="Output" Type="String">
        <Description>Destination reference; contains the skin name of the unit.</Description>
      </OutParameter>
    </Parameters>
  </Block>
  <Block Name="GetUnitBaseSkinName" Category="Action\Unit" SubCategory="" CanHaveChildren="false" NumberOfChildren="-1">
    <Description>Returns the base skin name for the unit, ignoring all modifications. (So a Lulu-polymorphed Ninja Rammus is just 'Rammus')</Description>
    <Label>{Out:Output}=={Unit}.BaseSkinName</Label>
    <Parameters>
      <Parameter Name="Unit" Type="AttackableUnit" Default="" VariableType="Reference">
        <Description>Unit to poll.</Description>
      </Parameter>
      <OutParameter Name="Output" Type="String">
        <Description>Destination reference; contains the skin name of the unit.</Description>
      </OutParameter>
    </Parameters>
  </Block>
  <Block Name="GetUnitSkinID" Category="Action\Unit" SubCategory="" CanHaveChildren="false" NumberOfChildren="-1">
    <Description>Returns the current skin ID of a specific unit.</Description>
    <Label>{Out:Output}=={Unit}.SkinID</Label>
    <Parameters>
      <Parameter Name="Unit" Type="AttackableUnit" Default="" VariableType="Reference">
        <Description>Unit to poll.</Description>
      </Parameter>
      <OutParameter Name="Output" Type="Int">
        <Description>Destination reference; contains the skin ID of the unit.</Description>
      </OutParameter>
    </Parameters>
  </Block>
  <Block Name="NotEqualString" Category="Test\String" SubCategory="" CanHaveChildren="false" NumberOfChildren="-1">
    <Description>Returns SUCCESS if LeftHandSide is NOT equal to RightHandSide, and FAILURE if it is not. This version is for string References.</Description>
    <Label>{LeftHandSide} != {RightHandSide}</Label>
    <Parameters>
      <Parameter Name="LeftHandSide" Type="String" Default="" VariableType="Reference">
        <Description>LeftHandSide Reference of the comparison</Description>
      </Parameter>
      <Parameter Name="RightHandSide" Type="String" Default ="" VariableType="Reference,Value">
        <Description>RightHandSide Reference of the comparison</Description>
      </Parameter>
    </Parameters>
  </Block>
  <Block Name="SetVarString" Category="Action\Reference" SubCategory="" CanHaveChildren="false" NumberOfChildren="-1">
    <Description>Sets OutputRef with the value of Input. This version is for string References</Description>
    <Label>{Out:Output}={Input}</Label>
    <Parameters>
      <Parameter Name="Input" Type="String" Default="DEFAULT STRING" VariableType="Reference,Value">
        <Description>Source Reference</Description>
      </Parameter>
      <OutParameter Name="Output" Type="String">
        <Description>Destination Reference</Description>
      </OutParameter>
    </Parameters>
  </Block>
  <Block Name="Procedure" Category="Control" SubCategory="" CanHaveChildren="false" NumberOfChildren="-1">
    <Description>A Procedure call</Description>
    <Label>{@TreeQualifiedName}</Label>
    <Parameters />
  </Block>
  <Block Name="CallProcedureVariable" Category="Control" SubCategory="" CanHaveChildren="false" NumberOfChildren="-1">
    <Description>Call Procedure given by a variable.</Description>
    <Label>{@Variable}</Label>
    <Parameters/>
  </Block>
  <Block Name="SetProcedureVariable" Category="Control" SubCategory="" CanHaveChildren="false" NumberOfChildren="-1">
    <Description>Set a DynamicProcedure Variable</Description>
    <Label>{@TreeQualifiedName}</Label>
    <Parameters/>
  </Block>

  <Block Name="GetUnitCurrentHealthPercentage" Category="Action\Stats\Defense" SubCategory="" CanHaveChildren="false" NumberOfChildren="-1">
    <Description>Returns the current health percentage of a specific unit.</Description>
    <Label>{Out:Output}=={Unit}.CurrentHealthPercentage</Label>
    <Parameters>
      <Parameter Name="Unit" Type="AttackableUnit" Default="" VariableType="Reference">
        <Description>Unit to poll.</Description>
      </Parameter>
      <OutParameter Name="Output" Type="Float">
        <Description>Destination reference; contains the current health percentage of the unit (0.0->1.0).</Description>
      </OutParameter>
    </Parameters>
  </Block>
  <Block Name="GenerateRandomFloat" Category="Action\Math" SubCategory="" CanHaveChildren="false" NumberOfChildren="-1">
    <Description>Generate random value</Description>
    <Label>{Out:Output}==RandomFloat({MinValue}, {MaxValue})</Label>
    <Parameters>
      <Parameter Name="MinValue" Type="Float" Default="" VariableType="Reference,Value">
        <Description>lower bound</Description>
      </Parameter>
      <Parameter Name="MaxValue" Type="Float" Default="" VariableType="Reference,Value">
        <Description>upper bound</Description>
      </Parameter>
      <OutParameter Name="Output" Type="Float" VariableType="Reference">
        <Description>Random value</Description>
      </OutParameter>
    </Parameters>
  </Block>
  <Block Name="GenerateRandomInt" Category="Action\Math" SubCategory="" CanHaveChildren="false" NumberOfChildren="-1">
    <Description>Generate a random integer in range [MinValue, MaxValue]</Description>
    <Label>{Out:Output}==RandomInt({MinValue}, {MaxValue})</Label>
    <Parameters>
      <Parameter Name="MinValue" Type="Int" Default="" VariableType="Reference,Value">
        <Description>lower bound</Description>
      </Parameter>
      <Parameter Name="MaxValue" Type="Int" Default="" VariableType="Reference,Value">
        <Description>upper bound</Description>
      </Parameter>
      <OutParameter Name="Output" Type="Int" VariableType="Reference">
        <Description>Random value</Description>
      </OutParameter>
    </Parameters>
  </Block>
  <Block Name="LessFloat" Category="Test\Float" SubCategory="" CanHaveChildren="false" NumberOfChildren="-1">
    <Description>Returns SUCCESS if LeftHandSide is less than the RightHandSide, and FAILURE if it is not. This version is for float References.</Description>
    <Label>{LeftHandSide} &#60; {RightHandSide}</Label>
    <Parameters>
      <Parameter Name="LeftHandSide" Type="Float" Default="0" VariableType="Reference">
        <Description>LeftHandSide Reference of the comparison</Description>
      </Parameter>
      <Parameter Name="RightHandSide" Type="Float" Default ="0" VariableType="Reference,Value">
        <Description>RightHandSide Reference of the comparison</Description>
      </Parameter>
    </Parameters>
  </Block>
  <Block Name="LessEqualFloat" Category="Test\Float" SubCategory="" CanHaveChildren="false" NumberOfChildren="-1">
    <Description>Returns SUCCESS if LeftHandSide is less than or equal to RightHandSide, and FAILURE if it is not. This version is for float References.</Description>
    <Label>{LeftHandSide} &#8804; {RightHandSide}</Label>
    <Parameters>
      <Parameter Name="LeftHandSide" Type="Float" Default="0" VariableType="Reference">
        <Description>LeftHandSide Reference of the comparison</Description>
      </Parameter>
      <Parameter Name="RightHandSide" Type="Float" Default ="0" VariableType="Reference,Value">
        <Description>RightHandSide Reference of the comparison</Description>
      </Parameter>
    </Parameters>
  </Block>
  <Block Name="GetUnitType" Category="Action\Unit\Type" SubCategory="" CanHaveChildren="false" NumberOfChildren="-1">
    <Description>Returns the type of a specific unit. Unit type.</Description>
    <Label>{Out:Output}=={Unit}.Type</Label>
    <Parameters>
      <Parameter Name="Unit" Type="AttackableUnit" Default="" VariableType="Reference">
        <Description>Unit to poll.</Description>
      </Parameter>
      <OutParameter Name="Output" Type="UnitType">
        <Description>Destination reference contains the type of the unit.</Description>
      </OutParameter>
    </Parameters>
  </Block>
  <Block Name="GetUnitTeam" Category="Action\Unit" SubCategory="" CanHaveChildren="false" NumberOfChildren="-1">
    <Description>Returns unit Team ID. Returns FAILURE if unit is invalid.</Description>
    <Label>{Out:Output}={Unit}.TeamID</Label>
    <Parameters>
      <Parameter Name="Unit" Type="AttackableUnit" Default="" VariableType="Reference">
        <Description>Unit to poll.</Description>
      </Parameter>
      <OutParameter Name="Output" Type="TeamEnum">
        <Description>Destination reference.</Description>
      </OutParameter>
    </Parameters>
  </Block>
  <Block Name="GreaterInt" Category="Test\Integer" SubCategory="" CanHaveChildren="false" NumberOfChildren="-1">
    <Description>Returns SUCCESS if LeftHandSide is greater than RightHandSide, and FAILURE if it is not. This version is for int References.</Description>
    <Label>{LeftHandSide} &#62; {RightHandSide}</Label>
    <Parameters>
      <Parameter Name="LeftHandSide" Type="Int" Default="0" VariableType="Reference">
        <Description>LeftHandSide Reference of the comparison</Description>
      </Parameter>
      <Parameter Name="RightHandSide" Type="Int" Default ="0" VariableType="Reference,Value">
        <Description>RightHandSide Reference of the comparison</Description>
      </Parameter>
    </Parameters>
  </Block>
  <Block Name="SetVarUnitTeam" Category="Action\Reference" SubCategory="" CanHaveChildren="false" NumberOfChildren="-1">
    <Description>Sets OutputRef with the value of Input. This version is for UnitTeam References</Description>
    <Label>{Out:Output}={Input}</Label>
    <Parameters>
      <Parameter Name="Input" Type="TeamEnum" Default="TEAM_UNKNOWN" VariableType="Reference,Value">
        <Description>Source Reference</Description>
      </Parameter>
      <OutParameter Name="Output" Type="TeamEnum">
        <Description>Destination Reference</Description>
      </OutParameter>
    </Parameters>
  </Block>
  <Block Name="SetVarEventsNamesEnum" Category="Action\Reference" SubCategory="" CanHaveChildren="false" NumberOfChildren="-1">
    <Description>Sets OutputRef with the value of Input. This version is for EventsNames References</Description>
    <Label>{Out:Output}={Input}</Label>
    <Parameters>
      <Parameter Name="Input" Type="EventsNamesEnum" Default="EVENT_Numof" VariableType="Reference,Value">
        <Description>Source Reference</Description>
      </Parameter>
      <OutParameter Name="Output" Type="EventsNamesEnum">
        <Description>Destination Reference</Description>
      </OutParameter>
    </Parameters>
  </Block>
  <Block Name="EqualUnitTeam" Category="Test\System\Unit\Team" SubCategory="" CanHaveChildren="false" NumberOfChildren="-1">
    <Description>Returns SUCCESS if LeftHandSide is equal to RightHandSide, and FAILURE if it is not. This version is for Unit team.</Description>
    <Label>{LeftHandSide}=={RightHandSide}?</Label>
    <Parameters>
      <Parameter Name="LeftHandSide" Type="TeamEnum" Default="TEAM_UNKNOWN" VariableType="Reference">
        <Description>LeftHandSide Reference of the comparison</Description>
      </Parameter>
      <Parameter Name="RightHandSide" Type="TeamEnum" Default="TEAM_UNKNOWN" VariableType="Reference,Value">
        <Description>RightHandSide Reference of the comparison</Description>
      </Parameter>
    </Parameters>
  </Block>
  <Block Name="NotEqualUnitTeam" Category="Test\System\Unit\Team" SubCategory="" CanHaveChildren="false" NumberOfChildren="-1">
    <Description>Returns SUCCESS if LeftHandSide is NOT equal to RightHandSide, and FAILURE if it is not. This version is for Unit team.</Description>
    <Label>{LeftHandSide} != {RightHandSide}?</Label>
    <Parameters>
      <Parameter Name="LeftHandSide" Type="TeamEnum" Default="TEAM_UNKNOWN" VariableType="Reference">
        <Description>LeftHandSide Reference of the comparison</Description>
      </Parameter>
      <Parameter Name="RightHandSide" Type="TeamEnum" Default="TEAM_UNKNOWN" VariableType="Reference,Value">
        <Description>RightHandSide Reference of the comparison</Description>
      </Parameter>
    </Parameters>
  </Block>
  <Block Name="GetUnitLevel" Category="Action\Stats\Advancement" SubCategory="" CanHaveChildren="false" NumberOfChildren="-1">
    <Description>Returns the level of the target unit. Always returns SUCCESS.</Description>
    <Label>{Out:Output}={Unit}.Level</Label>
    <Parameters>
      <Parameter Name="Unit" Type="AttackableUnit" Default="" VariableType="Reference">
        <Description>Handle of the unit whose level you want to check.</Description>
      </Parameter>
      <OutParameter Name="Output" Type="Int">
        <Description>The level of the target unit.</Description>
      </OutParameter>
    </Parameters>
  </Block>
  <Block Name="SpendSkillPointToUpgradeSlot" Category="Action\Stats\Advancement" SubCategory="" CanHaveChildren="false" NumberOfChildren="-1">
    <Description>Returns the next suggested skill ability of unit (0-3). Returns SUCCESS if skill up is available.</Description>
    <Label>{Unit}.UpgradeSlot({SlotNumber})</Label>
    <Parameters>
      <Parameter Name="Unit" Type="AttackableUnit" Default="" VariableType="Reference">
        <Description>Handle of the unit who you want to level up.</Description>
      </Parameter>
      <Parameter Name="SlotNumber" Type="Int" Default="0" VariableType="Reference,Value">
        <Description>The skill ability slot (0-3) to level up on the target unit.</Description>
      </Parameter>
    </Parameters>
  </Block>  
  <Block Name="GetRecSkillUp" Category="Action\Stats\Advancement" SubCategory="" CanHaveChildren="false" NumberOfChildren="-1">
    <Description>Returns the next suggested skill ability of unit (0-3). Returns SUCCESS if skill up is available.</Description>
    <Label>{Out:Output}={Unit}.GetRecommendedUpgradeSlot()</Label>
    <Parameters>
      <Parameter Name="Unit" Type="AttackableUnit" Default="" VariableType="Reference">
        <Description>Handle of the unit who you want to get the rec skill up.</Description>
      </Parameter>
      <OutParameter Name="Output" Type="Int">
        <Description>The skill ability (0-3) of the target unit.</Description>
      </OutParameter>
    </Parameters>
  </Block>
  <Block Name="EqualInt" Category="Test\Integer" SubCategory="" CanHaveChildren="false" NumberOfChildren="-1">
    <Description>Returns SUCCESS if LeftHandSide is equal to RightHandSide, and FAILURE if it is not. This version is for int References.</Description>
    <Label>{LeftHandSide}=={RightHandSide}</Label>
    <Parameters>
      <Parameter Name="LeftHandSide" Type="Int" Default="0" VariableType="Reference">
        <Description>LeftHandSide Reference of the comparison</Description>
      </Parameter>
      <Parameter Name="RightHandSide" Type="Int" Default ="0" VariableType="Reference,Value">
        <Description>RightHandSide Reference of the comparison</Description>
      </Parameter>
    </Parameters>
  </Block>
  <Block Name="EqualBool" Category="Test\Boolean" SubCategory="" CanHaveChildren="false" NumberOfChildren="-1">
    <Description>Returns SUCCESS if LeftHandSide is equal to RightHandSide, and FAILURE if it is not. This version is for bool References.</Description>
    <Label>{LeftHandSide}=={RightHandSide}</Label>
    <Parameters>
      <Parameter Name="LeftHandSide" Type="Bool" Default="True" VariableType="Reference">
        <Description>LeftHandSide Reference of the comparison</Description>
      </Parameter>
      <Parameter Name="RightHandSide" Type="Bool" Default ="True" VariableType="Reference,Value">
        <Description>RightHandSide Reference of the comparison</Description>
      </Parameter>
    </Parameters>
  </Block>
  <Block Name="AddString" Category="Action\String" SubCategory="" CanHaveChildren="false" NumberOfChildren="-1">
    <Description>Concatenates the LeftHandSide to the RightHandSide and places the result in Output. This version is for Strings.  This will always return SUCCESS.</Description>
    <Label>[{Out:Output}=={LeftHandSide} ?{LeftHandSide} += {RightHandSide}:{Out:Output}={LeftHandSide} + {RightHandSide}]</Label>
    <Parameters>
      <Parameter Name="LeftHandSide" Type="ToString" Default="EMPTY STRING" VariableType="Reference,Value">
        <Description>LeftHandSide Reference of the operation</Description>
      </Parameter>
      <Parameter Name="RightHandSide" Type="ToString" Default ="EMPTY STRING" VariableType="Reference,Value">
        <Description>RightHandSide Reference of the operation</Description>
      </Parameter>
      <OutParameter Name="Output" Type="String">
        <Description>Output reference of the operation</Description>
      </OutParameter>
    </Parameters>
  </Block>
  <Block Name="SetVarBool" Category="Action\Reference" SubCategory="" CanHaveChildren="false" NumberOfChildren="-1">
    <Description>Sets OutputRef with the value of Input. This version is for bool References.</Description>
    <Label>{Out:Output}={Input}</Label>
    <Parameters>
      <Parameter Name="Input" Type="Bool" Default="True" VariableType="Reference,Value">
        <Description>Source Reference</Description>
      </Parameter>
      <OutParameter Name="Output" Type="Bool">
        <Description>Destination Reference</Description>
      </OutParameter>
    </Parameters>
  </Block>
  <Block Name="GetTeamKills" Category="Action\Stats\KDA" SubCategory="" CanHaveChildren="false" NumberOfChildren="-1">
    <Description>Returns an int containing the number of kills the team has. Always returns SUCCESS.</Description>
    <Label>{Out:Output}={Team}.GetKillCount</Label>
    <Parameters>
      <Parameter Name="Team" Type="TeamEnum" Default="TEAM_ORDER" VariableType="Reference,Value">
        <Description>Which team to poll</Description>
      </Parameter>
      <OutParameter Name="Output" Type="Int">
        <Description>Destination Reference; holds the number of champions killed by the team</Description>
      </OutParameter>
    </Parameters>
  </Block>
  <Block Name="NotEqualBool" Category="Test\Boolean" SubCategory="" CanHaveChildren="false" NumberOfChildren="-1">
    <Description>Returns SUCCESS if LeftHandSide is NOT equal to RightHandSide, and FAILURE if it is not. This version is for bool References.</Description>
    <Label>{LeftHandSide} != {RightHandSide}</Label>
    <Parameters>
      <Parameter Name="LeftHandSide" Type="Bool" Default="True" VariableType="Reference">
        <Description>LeftHandSide Reference of the comparison</Description>
      </Parameter>
      <Parameter Name="RightHandSide" Type="Bool" Default ="True" VariableType="Reference,Value">
        <Description>RightHandSide Reference of the comparison</Description>
      </Parameter>
    </Parameters>
  </Block>
  <Block Name="NotEqualInt" Category="Test\Integer" SubCategory="" CanHaveChildren="false" NumberOfChildren="-1">
    <Description>Returns SUCCESS if LeftHandSide is NOT equal to RightHandSide, and FAILURE if it is not. This version is for int References.</Description>
    <Label>{LeftHandSide} != {RightHandSide}</Label>
    <Parameters>
      <Parameter Name="LeftHandSide" Type="Int" Default="0" VariableType="Reference">
        <Description>LeftHandSide Reference of the comparison</Description>
      </Parameter>
      <Parameter Name="RightHandSide" Type="Int" Default ="0" VariableType="Reference,Value">
        <Description>RightHandSide Reference of the comparison</Description>
      </Parameter>
    </Parameters>
  </Block>
  <Block Name="LessInt" Category="Test\Integer" SubCategory="" CanHaveChildren="false" NumberOfChildren="-1">
    <Description>Returns SUCCESS if LeftHandSide is less than the RightHandSide, and FAILURE if it is not. This version is for int References.</Description>
    <Label>{LeftHandSide} &#60; {RightHandSide}</Label>
    <Parameters>
      <Parameter Name="LeftHandSide" Type="Int" Default="0" VariableType="Reference">
        <Description>LeftHandSide Reference of the comparison</Description>
      </Parameter>
      <Parameter Name="RightHandSide" Type="Int" Default ="0" VariableType="Reference,Value">
        <Description>RightHandSide Reference of the comparison</Description>
      </Parameter>
    </Parameters>
  </Block>
  <Block Name="LessEqualInt" Category="Test\Integer" SubCategory="" CanHaveChildren="false" NumberOfChildren="-1">
    <Description>Returns SUCCESS if LeftHandSide is less than or equal to RightHandSide, and FAILURE if it is not. This version is for int References.</Description>
    <Label>{LeftHandSide} &#8804; {RightHandSide}</Label>
    <Parameters>
      <Parameter Name="LeftHandSide" Type="Int" Default="0" VariableType="Reference">
        <Description>LeftHandSide Reference of the comparison</Description>
      </Parameter>
      <Parameter Name="RightHandSide" Type="Int" Default ="0" VariableType="Reference,Value">
        <Description>RightHandSide Reference of the comparison</Description>
      </Parameter>
    </Parameters>
  </Block>
  <Block Name="GreaterEqualInt" Category="Test\Integer" SubCategory="" CanHaveChildren="false" NumberOfChildren="-1">
    <Description>Returns SUCCESS if LeftHandSide is greater than or equal to RightHandSide, and FAILURE if it is not. This version is for int References.</Description>
    <Label>{LeftHandSide} &#8805; {RightHandSide}</Label>
    <Parameters>
      <Parameter Name="LeftHandSide" Type="Int" Default="0" VariableType="Reference">
        <Description>LeftHandSide Reference of the comparison</Description>
      </Parameter>
      <Parameter Name="RightHandSide" Type="Int" Default ="0" VariableType="Reference,Value">
        <Description>RightHandSide Reference of the comparison</Description>
      </Parameter>
    </Parameters>
  </Block>
  <Block Name="EqualUnsignedInt" Category="Test\Integer" SubCategory="" CanHaveChildren="false" NumberOfChildren="-1">
    <Description>Returns SUCCESS if LeftHandSide is equal to RightHandSide, and FAILURE if it is not. This version is for unsigned int References.</Description>
    <Label>{LeftHandSide}=={RightHandSide}</Label>
    <Parameters>
      <Parameter Name="LeftHandSide" Type="UnsignedInt" Default="0" VariableType="Reference">
        <Description>LeftHandSide Reference of the comparison</Description>
      </Parameter>
      <Parameter Name="RightHandSide" Type="UnsignedInt" Default ="0" VariableType="Reference,Value">
        <Description>RightHandSide Reference of the comparison</Description>
      </Parameter>
    </Parameters>
  </Block>
  <Block Name="NotEqualUnsignedInt" Category="Test\Integer" SubCategory="" CanHaveChildren="false" NumberOfChildren="-1">
    <Description>Returns SUCCESS if LeftHandSide is NOT equal to RightHandSide, and FAILURE if it is not. This version is for Unsigned int References.</Description>
    <Label>{LeftHandSide} != {RightHandSide}</Label>
    <Parameters>
      <Parameter Name="LeftHandSide" Type="UnsignedInt" Default="0" VariableType="Reference">
        <Description>LeftHandSide Reference of the comparison</Description>
      </Parameter>
      <Parameter Name="RightHandSide" Type="UnsignedInt" Default ="0" VariableType="Reference,Value">
        <Description>RightHandSide Reference of the comparison</Description>
      </Parameter>
    </Parameters>
  </Block>
  <Block Name="LessUnsignedInt" Category="Test\Integer" SubCategory="" CanHaveChildren="false" NumberOfChildren="-1">
    <Description>Returns SUCCESS if LeftHandSide is less than the RightHandSide, and FAILURE if it is not. This version is for Unsigned int References.</Description>
    <Label>{LeftHandSide} &#60; {RightHandSide}</Label>
    <Parameters>
      <Parameter Name="LeftHandSide" Type="UnsignedInt" Default="0" VariableType="Reference">
        <Description>LeftHandSide Reference of the comparison</Description>
      </Parameter>
      <Parameter Name="RightHandSide" Type="UnsignedInt" Default ="0" VariableType="Reference,Value">
        <Description>RightHandSide Reference of the comparison</Description>
      </Parameter>
    </Parameters>
  </Block>
  <Block Name="LessEqualUnsignedInt" Category="Test\Integer" SubCategory="" CanHaveChildren="false" NumberOfChildren="-1">
    <Description>Returns SUCCESS if LeftHandSide is less than or equal to RightHandSide, and FAILURE if it is not. This version is for Unsigned int References.</Description>
    <Label>{LeftHandSide} &#8804; {RightHandSide}</Label>
    <Parameters>
      <Parameter Name="LeftHandSide" Type="UnsignedInt" Default="0" VariableType="Reference">
        <Description>LeftHandSide Reference of the comparison</Description>
      </Parameter>
      <Parameter Name="RightHandSide" Type="UnsignedInt" Default ="0" VariableType="Reference,Value">
        <Description>RightHandSide Reference of the comparison</Description>
      </Parameter>
    </Parameters>
  </Block>
  <Block Name="GreaterUnsignedInt" Category="Test\Integer" SubCategory="" CanHaveChildren="false" NumberOfChildren="-1">
    <Description>Returns SUCCESS if LeftHandSide is greater than RightHandSide, and FAILURE if it is not. This version is for Unsigned int References.</Description>
    <Label>{LeftHandSide} &#62; {RightHandSide}</Label>
    <Parameters>
      <Parameter Name="LeftHandSide" Type="UnsignedInt" Default="0" VariableType="Reference">
        <Description>LeftHandSide Reference of the comparison</Description>
      </Parameter>
      <Parameter Name="RightHandSide" Type="UnsignedInt" Default ="0" VariableType="Reference,Value">
        <Description>RightHandSide Reference of the comparison</Description>
      </Parameter>
    </Parameters>
  </Block>
  <Block Name="GreaterEqualUnsignedInt" Category="Test\Integer" SubCategory="" CanHaveChildren="false" NumberOfChildren="-1">
    <Description>Returns SUCCESS if LeftHandSide is greater than or equal to RightHandSide, and FAILURE if it is not. This version is for Unsigned int References.</Description>
    <Label>{LeftHandSide} &#8805; {RightHandSide}</Label>
    <Parameters>
      <Parameter Name="LeftHandSide" Type="UnsignedInt" Default="0" VariableType="Reference">
        <Description>LeftHandSide Reference of the comparison</Description>
      </Parameter>
      <Parameter Name="RightHandSide" Type="UnsignedInt" Default ="0" VariableType="Reference,Value">
        <Description>RightHandSide Reference of the comparison</Description>
      </Parameter>
    </Parameters>
  </Block>
  <Block Name="EqualFloat" Category="Test\Float" SubCategory="" CanHaveChildren="false" NumberOfChildren="-1">
    <Description>Returns SUCCESS if LeftHandSide is equal to RightHandSide, and FAILURE if it is not. This version is for flooat References.</Description>
    <Label>{LeftHandSide}=={RightHandSide}</Label>
    <Parameters>
      <Parameter Name="LeftHandSide" Type="Float" Default="0" VariableType="Reference">
        <Description>LeftHandSide Reference of the comparison</Description>
      </Parameter>
      <Parameter Name="RightHandSide" Type="Float" Default ="0" VariableType="Reference,Value">
        <Description>RightHandSide Reference of the comparison</Description>
      </Parameter>
    </Parameters>
  </Block>
  <Block Name="NotEqualFloat" Category="Test\Float" SubCategory="" CanHaveChildren="false" NumberOfChildren="-1">
    <Description>Returns SUCCESS if LeftHandSide is NOT equal to RightHandSide, and FAILURE if it is not. This version is for float References.</Description>
    <Label>{LeftHandSide} != {RightHandSide}</Label>
    <Parameters>
      <Parameter Name="LeftHandSide" Type="Float" Default="0" VariableType="Reference">
        <Description>LeftHandSide Reference of the comparison</Description>
      </Parameter>
      <Parameter Name="RightHandSide" Type="Float" Default ="0" VariableType="Reference,Value">
        <Description>RightHandSide Reference of the comparison</Description>
      </Parameter>
    </Parameters>
  </Block>
  <Block Name="GreaterFloat" Category="Test\Float" SubCategory="" CanHaveChildren="false" NumberOfChildren="-1">
    <Description>Returns SUCCESS if LeftHandSide is greater than RightHandSide, and FAILURE if it is not. This version is for float References.</Description>
    <Label>{LeftHandSide} &#62; {RightHandSide}</Label>
    <Parameters>
      <Parameter Name="LeftHandSide" Type="Float" Default="0" VariableType="Reference">
        <Description>LeftHandSide Reference of the comparison</Description>
      </Parameter>
      <Parameter Name="RightHandSide" Type="Float" Default ="0" VariableType="Reference,Value">
        <Description>RightHandSide Reference of the comparison</Description>
      </Parameter>
    </Parameters>
  </Block>
  <Block Name="EqualUnit" Category="Test\System\Unit\Reference" SubCategory="" CanHaveChildren="false" NumberOfChildren="-1">
    <Description>Returns SUCCESS if LeftHandSide is equal to RightHandSide, and FAILURE if it is not. This version is for Unit References.</Description>
    <Label>{LeftHandSide}=={RightHandSide}?</Label>
    <Parameters>
      <Parameter Name="LeftHandSide" Type="AttackableUnit" Default="0" VariableType="Reference">
        <Description>LeftHandSide Reference of the comparison</Description>
      </Parameter>
      <Parameter Name="RightHandSide" Type="AttackableUnit" Default ="0" VariableType="Reference">
        <Description>RightHandSide Reference of the comparison</Description>
      </Parameter>
    </Parameters>
  </Block>
  <Block Name="NotEqualUnit" Category="Test\System\Unit\Reference" SubCategory="" CanHaveChildren="false" NumberOfChildren="-1">
    <Description>Returns SUCCESS if LeftHandSide is NOT equal to RightHandSide, and FAILURE if it is not. This version is for Unit References.</Description>
    <Label>{LeftHandSide} != {RightHandSide}?</Label>
    <Parameters>
      <Parameter Name="LeftHandSide" Type="AttackableUnit" Default="0" VariableType="Reference">
        <Description>LeftHandSide Reference of the comparison</Description>
      </Parameter>
      <Parameter Name="RightHandSide" Type="AttackableUnit" Default ="0" VariableType="Reference">
        <Description>RightHandSide Reference of the comparison</Description>
      </Parameter>
    </Parameters>
  </Block>
  <Block Name="NormalizeFloatToTickRate" Category="Action\Math" SubCategory="" CanHaveChildren="false" NumberOfChildren="-1">
    <Description>Takes a value which is meant to be updated at the constant tick rate of the behavior tree, and normalizes it to match. If you expect your value you to be updated 10 times per second, but the behavior tree may not actually update at this rate, so this causes us to match to that rate.</Description>
    <Parameters>
      <Parameter Name="LeftHandSide" Type="Float" Default="0" VariableType="Reference,Value">
        <Description>LeftHandSide Reference of the operation</Description>
      </Parameter>
      <OutParameter Name="Output" Type="Float">
        <Description>Output reference of the operation</Description>
      </OutParameter>
    </Parameters>
  </Block>
  <Block Name="EqualUnitType" Category="Test\System\Unit\Type" SubCategory="" CanHaveChildren="false" NumberOfChildren="-1">
    <Description>Returns SUCCESS if LeftHandSide is equal to RightHandSide, and FAILURE if it is not. This version is for Unit type References.</Description>
    <Label>{LeftHandSide}=={RightHandSide}?</Label>
    <Parameters>
      <Parameter Name="LeftHandSide" Type="UnitType" Default="UNKNOWN_UNIT" VariableType="Reference">
        <Description>LeftHandSide Reference of the comparison</Description>
      </Parameter>
      <Parameter Name="RightHandSide" Type="UnitType" Default="UNKNOWN_UNIT" VariableType="Reference,Value">
        <Description>RightHandSide Reference of the comparison</Description>
      </Parameter>
    </Parameters>
  </Block>
  <Block Name="Sequence" Category="Control" SubCategory="" CanHaveChildren="true" NumberOfChildren="-1">
    <Description>Sequence blocks will tick their children in order until one returns a FAILURE, at which point the node will return FAILURE.  If a child return RUNNING then the node will return RUNNING and execute that child first next tick.  If all children return SUCCESS the node will return SUCCESS. Generally alternate these with selector nodes.</Description>
    <Label>*{@Name}*</Label>
    <Parameters/>
  </Block>
  <Block Name="Selector" Category="Control" SubCategory="" CanHaveChildren="true" NumberOfChildren="-1">
    <Description>Selector blocks will tick their children in order until one returns a SUCCESS, at which point the node will return SUCCESS.  If a child return RUNNING then the node will return RUNNING and execute that child first next tick.  If all children return FAILURE the node will return FAILURE. Generally alternate these with sequence nodes.</Description>
    <Label>*{@Name}*</Label>
    <Parameters/>
  </Block>
  <Block Name="MaskFailure" Category="Decorator" SubCategory="Control" CanHaveChildren="true" NumberOfChildren="1">
    <Description>Decorator that masks FAILURE. Running still returns running.</Description>
    <Label>*{@Name}*</Label>
    <Parameters></Parameters>
  </Block>
  <Block Name="SetVarInt" Category="Action\Reference" SubCategory="" CanHaveChildren="false" NumberOfChildren="-1">
    <Description>Sets OutputRef with the value of Input. This version is for int References</Description>
    <Label>{Out:Output}={Input}</Label>
    <Parameters>
      <Parameter Name="Input" Type="Int" Default="0" VariableType="Reference,Value">
        <Description>Source Reference</Description>
      </Parameter>
      <OutParameter Name="Output" Type="Int">
        <Description>Destination Reference</Description>
      </OutParameter>
    </Parameters>
  </Block>
  <Block Name="SetVarUnsignedInt" Category="Action\Reference" SubCategory="" CanHaveChildren="false" NumberOfChildren="-1">
    <Description>Sets OutputRef with the value of Input. This version is for Unsigned Int References</Description>
    <Label>{Out:Output}={Input}</Label>
    <Parameters>
      <Parameter Name="Input" Type="UnsignedInt" Default="0" VariableType="Reference,Value">
        <Description>Source Reference</Description>
      </Parameter>
      <OutParameter Name="Output" Type="UnsignedInt">
        <Description>Destination Reference</Description>
      </OutParameter>
    </Parameters>
  </Block>
  <Block Name="SetVarDWORD" Category="Action\Reference" SubCategory="" CanHaveChildren="false" NumberOfChildren="-1">
    <Description>Sets OutputRef with the value of Input. This version is for int References</Description>
    <Label>{Out:Output}={Input}</Label>
    <Parameters>
      <Parameter Name="Input" Type="DWORD" Default="0" VariableType="Reference,Value">
        <Description>Source Reference</Description>
      </Parameter>
      <OutParameter Name="Output" Type="DWORD">
        <Description>Destination Reference</Description>
      </OutParameter>
    </Parameters>
  </Block>
  <Block Name="SetVarFloat" Category="Action\Reference" SubCategory="" CanHaveChildren="false" NumberOfChildren="-1">
    <Description>Sets OutputRef with the value of Input. This version is for Floats</Description>
    <Label>{Out:Output}={Input}</Label>
    <Parameters>
      <Parameter Name="Input" Type="Float" Default="0" VariableType="Reference,Value">
        <Description>Source Reference</Description>
      </Parameter>
      <OutParameter Name="Output" Type="Float">
        <Description>Destination Reference</Description>
      </OutParameter>
    </Parameters>
  </Block>
  <Block Name="SetVarVector" Category="Action\Reference" SubCategory="" CanHaveChildren="false" NumberOfChildren="-1">
    <Description>Sets OutputRef with the value of Input. This version is for Vector References.  If you want to make a vector out of 3 floats, use MakeVector.</Description>
    <Label>{Out:Output}={Input}</Label>
    <Parameters>
      <Parameter Name="Input" Type="Vector" Default="0;0;0" VariableType="Reference">
        <Description>Source Reference</Description>
      </Parameter>
      <OutParameter Name="Output" Type="Vector">
        <Description>Destination Reference</Description>
      </OutParameter>
    </Parameters>
  </Block>
  <Block Name="AddInt" Category="Action\Math\Add" SubCategory="" CanHaveChildren="false" NumberOfChildren="-1">
    <Description>Adds the LeftHandSide to the RightHandSide and places the result in Output. This version is for Ints.  This will always return SUCCESS.</Description>
    <Label>[{Out:Output}=={LeftHandSide} ?[{RightHandSide}==1 ?{LeftHandSide}++:{LeftHandSide} += {RightHandSide}]:{Out:Output}={LeftHandSide} + {RightHandSide}]</Label>
    <Parameters>
      <Parameter Name="LeftHandSide" Type="Int" Default="0" VariableType="Reference,Value">
        <Description>LeftHandSide Reference of the operation</Description>
      </Parameter>
      <Parameter Name="RightHandSide" Type="Int" Default ="0" VariableType="Reference,Value">
        <Description>RightHandSide Reference of the operation</Description>
      </Parameter>
      <OutParameter Name="Output" Type="Int">
        <Description>Output reference of the operation</Description>
      </OutParameter>
    </Parameters>
  </Block>
  <Block Name="SubtractInt" Category="Action\Math\Subtract" SubCategory="" CanHaveChildren="false" NumberOfChildren="-1">
    <Description>Subtracts the LeftHandSide to the RightHandSide and places the result in Output. This version is for Ints. This will always return SUCCESS.</Description>
    <Label>{Out:Output}={LeftHandSide} - {RightHandSide}</Label>
    <Parameters>
      <Parameter Name="LeftHandSide" Type="Int" Default="0" VariableType="Reference,Value">
        <Description>LeftHandSide Reference of the operation</Description>
      </Parameter>
      <Parameter Name="RightHandSide" Type="Int" Default ="0" VariableType="Reference,Value">
        <Description>RightHandSide Reference of the operation</Description>
      </Parameter>
      <OutParameter Name="Output" Type="Int">
        <Description>Output reference of the operation</Description>
      </OutParameter>
    </Parameters>
  </Block>
  <Block Name="GreaterEqualFloat" Category="Test\Float" SubCategory="" CanHaveChildren="false" NumberOfChildren="-1">
    <Description>Returns SUCCESS if LeftHandSide is greater than or equal to RightHandSide, and FAILURE if it is not. This version is for float References.</Description>
    <Label>{LeftHandSide} &#8805; {RightHandSide}</Label>
    <Parameters>
      <Parameter Name="LeftHandSide" Type="Float" Default="0" VariableType="Reference">
        <Description>LeftHandSide Reference of the comparison</Description>
      </Parameter>
      <Parameter Name="RightHandSide" Type="Float" Default ="0" VariableType="Reference,Value">
        <Description>RightHandSide Reference of the comparison</Description>
      </Parameter>
    </Parameters>
  </Block>
  <Block Name="MultiplyInt" Category="Action\Math\Multiply" SubCategory="" CanHaveChildren="false" NumberOfChildren="-1">
    <Description>Multiplies the LeftHandSide to the RightHandSide and places the result in Output. This version is for Ints. This will always return SUCCESS.</Description>
    <Label>{Out:Output}={LeftHandSide} &#215; {RightHandSide}</Label>
    <Parameters>
      <Parameter Name="LeftHandSide" Type="Int" Default="0" VariableType="Reference,Value">
        <Description>LeftHandSide Reference of the operation</Description>
      </Parameter>
      <Parameter Name="RightHandSide" Type="Int" Default ="0" VariableType="Reference,Value">
        <Description>RightHandSide Reference of the operation</Description>
      </Parameter>
      <OutParameter Name="Output" Type="Int">
        <Description>Output reference of the operation</Description>
      </OutParameter>
    </Parameters>
  </Block>
  <Block Name="DivideInt" Category="Action\Math\Divide" SubCategory="" CanHaveChildren="false" NumberOfChildren="-1">
    <Description>Divides the LeftHandSide by the RightHandSide and places the result in Output. This version is for Ints.  This will always return SUCCESS.</Description>
    <Label>{Out:Output}={LeftHandSide} &#247; {RightHandSide}</Label>
    <Parameters>
      <Parameter Name="LeftHandSide" Type="Int" Default="0" VariableType="Reference,Value">
        <Description>LeftHandSide Reference of the operation</Description>
      </Parameter>
      <Parameter Name="RightHandSide" Type="Int" Default ="0" VariableType="Reference,Value">
        <Description>RightHandSide Reference of the operation</Description>
      </Parameter>
      <OutParameter Name="Output" Type="Int">
        <Description>Output reference of the operation</Description>
      </OutParameter>
    </Parameters>
  </Block>
  <Block Name="ModulusInt" Category="Action\Math\Modulus" SubCategory="" CanHaveChildren="false" NumberOfChildren="-1">
    <Description>Divides the LeftHandSide to the RightHandSide and places the result in Output. This version is for Ints.  This will always return SUCCESS.</Description>
    <Label>{Out:Output}={LeftHandSide} &#37; {RightHandSide}</Label>
    <Parameters>
      <Parameter Name="LeftHandSide" Type="Int" Default="0" VariableType="Reference,Value">
        <Description>LeftHandSide Reference of the operation</Description>
      </Parameter>
      <Parameter Name="RightHandSide" Type="Int" Default ="0" VariableType="Reference,Value">
        <Description>RightHandSide Reference of the operation</Description>
      </Parameter>
      <OutParameter Name="Output" Type="Int">
        <Description>Output reference of the operation</Description>
      </OutParameter>
    </Parameters>
  </Block>
  <Block Name="MinInt" Category="Action\Math\Min" SubCategory="" CanHaveChildren="false" NumberOfChildren="-1">
    <Description>Compares LeftHandSide to the RightHandSide and places the lesser value in Output. This version is for Ints.  This will always return SUCCESS.</Description>
    <Label>{Out:Output}=Math.Min({LeftHandSide}, {RightHandSide})</Label>
    <Parameters>
      <Parameter Name="LeftHandSide" Type="Int" Default="0" VariableType="Reference,Value">
        <Description>LeftHandSide Reference of the operation</Description>
      </Parameter>
      <Parameter Name="RightHandSide" Type="Int" Default ="0" VariableType="Reference,Value">
        <Description>RightHandSide Reference of the operation</Description>
      </Parameter>
      <OutParameter Name="Output" Type="Int">
        <Description>Output reference of the operation</Description>
      </OutParameter>
    </Parameters>
  </Block>
  <Block Name="MaxInt" Category="Action\Math\Max" SubCategory="" CanHaveChildren="false" NumberOfChildren="-1">
    <Description>Compares LeftHandSide to the RightHandSide and places the greater value in Output. This version is for Ints.  This will always return SUCCESS.</Description>
    <Label>{Out:Output}=Math.Max({LeftHandSide}, {RightHandSide})</Label>
    <Parameters>
      <Parameter Name="LeftHandSide" Type="Int" Default="0" VariableType="Reference,Value">
        <Description>LeftHandSide Reference of the operation</Description>
      </Parameter>
      <Parameter Name="RightHandSide" Type="Int" Default ="0" VariableType="Reference,Value">
        <Description>RightHandSide Reference of the operation</Description>
      </Parameter>
      <OutParameter Name="Output" Type="Int">
        <Description>Output reference of the operation</Description>
      </OutParameter>
    </Parameters>
  </Block>
  <Block Name="AbsInt" Category="Action\Math\Abs" SubCategory="" CanHaveChildren="false" NumberOfChildren="-1">
    <Description>Takes the LeftHandSide and places its absolute value in Output. This version is for Ints.  This will always return SUCCESS.</Description>
    <Label>{Out:Output}=Math.Abs({LeftHandSide})</Label>
    <Parameters>
      <Parameter Name="LeftHandSide" Type="Int" Default="0" VariableType="Reference,Value">
        <Description>LeftHandSide Reference of the operation</Description>
      </Parameter>
      <OutParameter Name="Output" Type="Int">
        <Description>Output reference of the operation</Description>
      </OutParameter>
    </Parameters>
  </Block>
  <Block Name="AddFloat" Category="Action\Math\Add" SubCategory="" CanHaveChildren="false" NumberOfChildren="-1">
    <Description>Adds the LeftHandSide to the RightHandSide and places the result in Output. This version is for Floats.  This will always return SUCCESS.</Description>
    <Label>[{Out:Output}=={LeftHandSide} ?{LeftHandSide} += {RightHandSide}:{Out:Output}={LeftHandSide} + {RightHandSide}]</Label>
    <Parameters>
      <Parameter Name="LeftHandSide" Type="ToFloat" Default="0" VariableType="Reference,Value">
        <Description>LeftHandSide Reference of the operation</Description>
      </Parameter>
      <Parameter Name="RightHandSide" Type="ToFloat" Default ="0" VariableType="Reference,Value">
        <Description>RightHandSide Reference of the operation</Description>
      </Parameter>
      <OutParameter Name="Output" Type="Float">
        <Description>Output reference of the operation</Description>
      </OutParameter>
    </Parameters>
  </Block>
  <Block Name="SubtractFloat" Category="Action\Math\Subtract" SubCategory="" CanHaveChildren="false" NumberOfChildren="-1">
    <Description>Subtracts the LeftHandSide to the RightHandSide and places the result in Output. This version is for Floats.  This will always return SUCCESS.</Description>
    <Label>[{Out:Output}=={LeftHandSide} ?{LeftHandSide} -= {RightHandSide}:{Out:Output}={LeftHandSide} - {RightHandSide}]</Label>
    <Parameters>
      <Parameter Name="LeftHandSide" Type="ToFloat" Default="0" VariableType="Reference,Value">
        <Description>LeftHandSide Reference of the operation</Description>
      </Parameter>
      <Parameter Name="RightHandSide" Type="ToFloat" Default ="0" VariableType="Reference,Value">
        <Description>RightHandSide Reference of the operation</Description>
      </Parameter>
      <OutParameter Name="Output" Type="Float">
        <Description>Output reference of the operation</Description>
      </OutParameter>
    </Parameters>
  </Block>
  <Block Name="MultiplyFloat" Category="Action\Math\Multiply" SubCategory="" CanHaveChildren="false" NumberOfChildren="-1">
    <Description>Multiplies the LeftHandSide to the RightHandSide and places the result in Output. This version is for Floats.  This will always return SUCCESS.</Description>
    <Label>{Out:Output}={LeftHandSide} &#215; {RightHandSide}</Label>
    <Parameters>
      <Parameter Name="LeftHandSide" Type="ToFloat" Default="0" VariableType="Reference,Value">
        <Description>LeftHandSide Reference of the operation</Description>
      </Parameter>
      <Parameter Name="RightHandSide" Type="ToFloat" Default ="0" VariableType="Reference,Value">
        <Description>RightHandSide Reference of the operation</Description>
      </Parameter>
      <OutParameter Name="Output" Type="Float">
        <Description>Output reference of the operation</Description>
      </OutParameter>
    </Parameters>
  </Block>
  <Block Name="DivideFloat" Category="Action\Math\Divide" SubCategory="" CanHaveChildren="false" NumberOfChildren="-1">
    <Description>Divides the LeftHandSide to the RightHandSide and places the result in Output. This version is for Floats.  This will always return SUCCESS.</Description>
    <Label>{Out:Output}={LeftHandSide} &#247; {RightHandSide}</Label>
    <Parameters>
      <Parameter Name="LeftHandSide" Type="ToFloat" Default="0" VariableType="Reference,Value">
        <Description>LeftHandSide Reference of the operation</Description>
      </Parameter>
      <Parameter Name="RightHandSide" Type="ToFloat" Default ="0" VariableType="Reference,Value">
        <Description>RightHandSide Reference of the operation</Description>
      </Parameter>
      <OutParameter Name="Output" Type="Float">
        <Description>Output reference of the operation</Description>
      </OutParameter>
    </Parameters>
  </Block>
  <Block Name="MinFloat" Category="Action\Math\Min" SubCategory="" CanHaveChildren="false" NumberOfChildren="-1">
    <Description>Compares LeftHandSide to the RightHandSide and places the lesser value in Output. This version is for Floats.  This will always return SUCCESS.</Description>
    <Label>{Out:Output}=Math.Min({LeftHandSide}, {RightHandSide})</Label>
    <Parameters>
      <Parameter Name="LeftHandSide" Type="Float" Default="0" VariableType="Reference,Value">
        <Description>LeftHandSide Reference of the operation</Description>
      </Parameter>
      <Parameter Name="RightHandSide" Type="Float" Default ="0" VariableType="Reference,Value">
        <Description>RightHandSide Reference of the operation</Description>
      </Parameter>
      <OutParameter Name="Output" Type="Float">
        <Description>Output reference of the operation</Description>
      </OutParameter>
    </Parameters>
  </Block>
  <Block Name="MaxFloat" Category="Action\Math\Max" SubCategory="" CanHaveChildren="false" NumberOfChildren="-1">
    <Description>Compares LeftHandSide to the RightHandSide and places the greater value in Output. This version is for Floats.  This will always return SUCCESS.</Description>
    <Label>{Out:Output}=Math.Max({LeftHandSide}, {RightHandSide})</Label>
    <Parameters>
      <Parameter Name="LeftHandSide" Type="Float" Default="0" VariableType="Reference,Value">
        <Description>LeftHandSide Reference of the operation</Description>
      </Parameter>
      <Parameter Name="RightHandSide" Type="Float" Default ="0" VariableType="Reference,Value">
        <Description>RightHandSide Reference of the operation</Description>
      </Parameter>
      <OutParameter Name="Output" Type="Float">
        <Description>Output reference of the operation</Description>
      </OutParameter>
    </Parameters>
  </Block>
  <Block Name="AbsFloat" Category="Action\Math\Abs" SubCategory="" CanHaveChildren="false" NumberOfChildren="-1">
    <Description>Takes the LeftHandSide and places its absolute value in Output. This version is for Floats.  This will always return SUCCESS.</Description>
    <Label>{Out:Output}=Math.Abs({LeftHandSide})</Label>
    <Parameters>
      <Parameter Name="LeftHandSide" Type="Float" Default="0" VariableType="Reference,Value">
        <Description>LeftHandSide Reference of the operation</Description>
      </Parameter>
      <OutParameter Name="Output" Type="Float">
        <Description>Output reference of the operation</Description>
      </OutParameter>
    </Parameters>
  </Block>
  <Block Name="Sine" Category="Action\Math\Trigonometric" SubCategory="" CanHaveChildren="false" NumberOfChildren="-1">
    <Description>Calculates sin(LeftHandSide) and places it in Output.  This will always return SUCCESS.</Description>
    <Label>{Out:Output}=Math.Sin({LeftHandSide})</Label>
    <Parameters>
      <Parameter Name="LeftHandSide" Type="Float" Default="0" VariableType="Reference,Value">
        <Description>LeftHandSide Reference of the operation</Description>
      </Parameter>
      <OutParameter Name="Output" Type="Float">
        <Description>Output reference of the operation</Description>
      </OutParameter>
    </Parameters>
  </Block>
  <Block Name="Cosine" Category="Action\Math\Trigonometric" SubCategory="" CanHaveChildren="false" NumberOfChildren="-1">
    <Description>Calculates cos(LeftHandSide) and places it in Output.  This will always return SUCCESS.</Description>
    <Label>{Out:Output}=Math.Cos({LeftHandSide})</Label>
    <Parameters>
      <Parameter Name="LeftHandSide" Type="Float" Default="0" VariableType="Reference,Value">
        <Description>LeftHandSide Reference of the operation</Description>
      </Parameter>
      <OutParameter Name="Output" Type="Float">
        <Description>Output reference of the operation</Description>
      </OutParameter>
    </Parameters>
  </Block>
  <Block Name="Tangent" Category="Action\Math\Trigonometric" SubCategory="" CanHaveChildren="false" NumberOfChildren="-1">
    <Description>Calculates tan(LeftHandSide) and places it in Output.  This will always return SUCCESS.</Description>
    <Label>{Out:Output}=Math.Tan({LeftHandSide})</Label>
    <Parameters>
      <Parameter Name="LeftHandSide" Type="Float" Default="0" VariableType="Reference,Value">
        <Description>LeftHandSide Reference of the operation</Description>
      </Parameter>
      <OutParameter Name="Output" Type="Float">
        <Description>Output reference of the operation</Description>
      </OutParameter>
    </Parameters>
  </Block>
  <Block Name="Arctangent" Category="Action\Math\Trigonometric" SubCategory="" CanHaveChildren="false" NumberOfChildren="-1">
    <Description>Calculates arctan(LeftHandSide) and places it in Output.  This will always return SUCCESS.</Description>
    <Label>{Out:Output}=Math.Arctan({LeftHandSide})</Label>
    <Parameters>
      <Parameter Name="LeftHandSide" Type="Float" Default="0" VariableType="Reference,Value">
        <Description>LeftHandSide Reference of the operation</Description>
      </Parameter>
      <OutParameter Name="Output" Type="Float">
        <Description>Output reference of the operation</Description>
      </OutParameter>
    </Parameters>
  </Block>
  <Block Name="SetEmitterGroupEmissionPaused" Category="Action\Particle" SubCategory="" CanHaveChildren="false" NumberOfChildren="-1">
    <Description>Sets the emission of an emitter to be paused or not. Alive particles will continue to update</Description>
    <Label>{GroupName}.Paused={EmissionPause}</Label>
    <Parameters>
      <Parameter Name="GroupName" Type="String" Default="-EMPTY-" VariableType="Reference,Value">
        <Description>Group on which to act</Description>
      </Parameter>
      <Parameter Name="EmissionPause" Type="Bool" Default="True" VariableType="Reference,Value">
        <Description>Pause or resume the particle emission</Description>
      </Parameter>
    </Parameters>
  </Block>
  <Block Name="RestartEmitterGroup" Category="Action\Particle" SubCategory="" CanHaveChildren="false" NumberOfChildren="-1">
    <Description>Restart the emitters in a group</Description>
    <Label>{GroupName}.Restart</Label>
    <Parameters>
      <Parameter Name="GroupName" Type="String" Default="-EMPTY-" VariableType="Reference,Value">
        <Description>Group to reset</Description>
      </Parameter>
    </Parameters>
  </Block>
  <Block Name="GetPropByName" Category="Action\LevelProp" SubCategory="" CanHaveChildren="false" NumberOfChildren="-1">
    <Description>Finds a level prop by its name.</Description>
    <Label>{Out:Output}=GetPropByName({PropName})</Label>
    <Parameters>
      <Parameter Name="PropName" Type="String" Default="" VariableType="Reference,Value">
        <Description></Description>
      </Parameter>
      <OutParameter Name="Output" Type="GameObject">
        <Description></Description>
      </OutParameter>
    </Parameters>
  </Block>
  <Block Name="GetPropPositionByName" Category="Action\LevelProp" SubCategory="" CanHaveChildren="false" NumberOfChildren="-1">
    <Description>return the level prop position identified by its name.</Description>
    <Label>{Out:Output}=GetPropPositionByName({PropName})</Label>
    <Parameters>
      <Parameter Name="PropName" Type="String" Default="" VariableType="Reference,Value">
        <Description></Description>
      </Parameter>
      <OutParameter Name="Output" Type="Vector">
        <Description>contains the current position of the Level Prop.</Description>
      </OutParameter>
    </Parameters>
  </Block>
  <Block Name="PlayAnimationOnProp" Category="Action\LevelProp" SubCategory="" CanHaveChildren="false" NumberOfChildren="-1">
    <Description>Plays an animation on a level prop. If this is done on the server, it will be synced across all clients. If called on a client, the animation will be for that client only.</Description>
    <Label>{LevelProp}.{Animation} [{Loop}==True ?Loop:] [{Duration} !is none?for {Duration}:] [{DestroyPropAfterAnimation}==True ? *Destroy Prop After Animation*:]</Label>
    <Parameters>
      <Parameter Name="LevelProp" Type="GameObject" Default="" VariableType="Reference">
        <Description>The Level Prop Object you want to play the animation on</Description>
      </Parameter>
      <Parameter Name="Animation" Type="String" Default="" VariableType="Reference,Value">
        <Description>The Name of the Animation to play</Description>
      </Parameter>
      <Parameter Name="Loop" Type="Bool" Default="True" Optional="true" VariableType="Reference,Value">
        <Description>Should this animation loop when its done?</Description>
      </Parameter>
      <Parameter Name="Duration" Type="Float" Default="0.0" Optional="true" VariableType="Reference,Value">
        <Description>If this value is greater than 0, than it time syncs this animation across all clients to play for this exact duration</Description>
      </Parameter>
      <Parameter Name="DestroyPropAfterAnimation" Type="Bool" Default="False" Optional="true" VariableType="Reference,Value">
        <Description>Should the prop be removed from the game after the animation is played</Description>
      </Parameter>
    </Parameters>
  </Block>

  <Block Name="CountUnitsInTargetArea" Category="Action\Collection" SubCategory="" CanHaveChildren="false" NumberOfChildren="-1">
    <Description>Count number of units in the target area. Always returns SUCCESS.</Description>
    <Label>{Out:Output}={Unit}.CountUnitsInTargetArea(Center={TargetLocation}, Radius={Radius}[{SpellAffectsTypeFlags}!= ?, SpellAffectsTypeFlags={SpellAffectsTypeFlags}:][{SpellAffectsStatusFlags}!= ?, SpellAffectsStatusFlags={SpellAffectsStatusFlags}:][{BuffName}!= ?, BuffName={BuffName}:][{RequiredUnitTags}!= ?, RequiredUnitTags={RequiredUnitTags}:][{ExcludedUnitTags}!= ?, ExcludedUnitTags={ExcludedUnitTags}:])</Label>
    <Parameters>
      <Parameter Name="Unit" Type="AttackableUnit" Default="" VariableType="Reference">
        <Description>Handle of the unit that serves as the reference for team flags.</Description>
      </Parameter>
      <Parameter Name="TargetLocation" Type="Vector" Default="0;0;0;" VariableType="Reference">
        <Description>Center of the test</Description>
      </Parameter>
      <Parameter Name="Radius" Type="Float" Default="0" VariableType="Value, Reference">
        <Description>Radius of the unit test</Description>
      </Parameter>
      <Parameter Name="SpellAffectsTypeFlags" Type="SpellAffectsType" Default="AlwaysSelf" VariableType="Value">
        <Description>Flags for which types of units we should look for.</Description>
      </Parameter>
      <Parameter Name="SpellAffectsStatusFlags" Type="SpellAffectsStatus" Default="" VariableType="Value">
        <Description>Flags for which statuses on units we should accept or ignore.</Description>
      </Parameter>
      <Parameter Name="BuffName" Type="String" Default="" Optional="True" VariableType="Reference,Value">
        <Description>Cound units with this buff. Disregard buff if this is empty.</Description>
      </Parameter>
      <Parameter Name="RequiredUnitTags" Type="String" Optional="True" Default="" VariableType="Value">
        <Description>If the unit has ANY of these, SUCCESS (unless overriden by ExludedUnitTags). This should be a string list delimited by bars. e.g. "Monster | Minion"</Description>
      </Parameter>
      <Parameter Name="ExcludedUnitTags" Type="String" Optional="True" Default="" VariableType="Value">
        <Description>If the unit has ANY of these, FAILURE. This should be a string list delimited by bars. e.g. "Monster_Large | Minion_Summon"</Description>
      </Parameter>
      <OutParameter Name="Output" Type="Int">
        <Description>Number of units discovered</Description>
      </OutParameter>
    </Parameters>
  </Block>
  <Block Name="GetGameTime" Category="Action\Game" SubCategory="" CanHaveChildren="false" NumberOfChildren="-1">
    <Description>Returns the current elapsed game time.  This will be affected by pausing, cheats, or other things. Always returns SUCCESS.</Description>
    <Label>{Out:Output}</Label>
    <Parameters>
      <OutParameter Name="Output" Type="Float">
        <Description>Destination reference; contains the currently elapsed game time.</Description>
      </OutParameter>
    </Parameters>
  </Block>
  <Block Name="HasCustomizationTag" Category="Action\Skin" SubCategory="" CanHaveChildren="false" NumberOfChildren="-1">
    <Description>Check existence of a skin customization tag</Description>
    <Label>{Out:Output}=HasCustomizationTag({Tag})</Label>
    <Parameters>
      <Parameter Name="Tag" Type="String" Default="" VariableType="Reference,Value">
        <Description>Tag itself</Description>
      </Parameter>
      <OutParameter Name="Output" Type="Bool">
        <Description>Does this tag exist</Description>
      </OutParameter>
    </Parameters>
  </Block>
</BlockDefinitions>